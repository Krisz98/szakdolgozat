
gimbalmcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e960  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800eb48  0800eb48  0001eb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee38  0800ee38  00021864  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee38  0800ee38  00021864  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee38  0800ee38  00021864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee38  0800ee38  0001ee38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee3c  0800ee3c  0001ee3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001864  20000000  0800ee40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001344  20001864  080106a4  00021864  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ba8  080106a4  00022ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021864  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182c6  00000000  00000000  0002188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003145  00000000  00000000  00039b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  0003cc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003df28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc4c  00000000  00000000  0003f068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000119bd  00000000  00000000  0005bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e2ec  00000000  00000000  0006d671  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010b95d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005598  00000000  00000000  0010b9d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20001864 	.word	0x20001864
 8000204:	00000000 	.word	0x00000000
 8000208:	0800eb30 	.word	0x0800eb30

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20001868 	.word	0x20001868
 8000224:	0800eb30 	.word	0x0800eb30

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2uiz>:
 8000b50:	004a      	lsls	r2, r1, #1
 8000b52:	d211      	bcs.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d211      	bcs.n	8000b7e <__aeabi_d2uiz+0x2e>
 8000b5a:	d50d      	bpl.n	8000b78 <__aeabi_d2uiz+0x28>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d40e      	bmi.n	8000b84 <__aeabi_d2uiz+0x34>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_d2uiz+0x3a>
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	d1ed      	bne.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fmul>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d06f      	beq.n	8000ea4 <__aeabi_fmul+0xf8>
 8000dc4:	441a      	add	r2, r3
 8000dc6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dca:	0240      	lsls	r0, r0, #9
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dd2:	d01e      	beq.n	8000e12 <__aeabi_fmul+0x66>
 8000dd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ddc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de0:	fba0 3101 	umull	r3, r1, r0, r1
 8000de4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dec:	bf3e      	ittt	cc
 8000dee:	0049      	lslcc	r1, r1, #1
 8000df0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	ea40 0001 	orr.w	r0, r0, r1
 8000dfa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dfe:	2afd      	cmp	r2, #253	; 0xfd
 8000e00:	d81d      	bhi.n	8000e3e <__aeabi_fmul+0x92>
 8000e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e0a:	bf08      	it	eq
 8000e0c:	f020 0001 	biceq.w	r0, r0, #1
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1a:	bf08      	it	eq
 8000e1c:	0249      	lsleq	r1, r1, #9
 8000e1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e26:	3a7f      	subs	r2, #127	; 0x7f
 8000e28:	bfc2      	ittt	gt
 8000e2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e32:	4770      	bxgt	lr
 8000e34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	3a01      	subs	r2, #1
 8000e3e:	dc5d      	bgt.n	8000efc <__aeabi_fmul+0x150>
 8000e40:	f112 0f19 	cmn.w	r2, #25
 8000e44:	bfdc      	itt	le
 8000e46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	4770      	bxle	lr
 8000e4c:	f1c2 0200 	rsb	r2, r2, #0
 8000e50:	0041      	lsls	r1, r0, #1
 8000e52:	fa21 f102 	lsr.w	r1, r1, r2
 8000e56:	f1c2 0220 	rsb	r2, r2, #32
 8000e5a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e5e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e62:	f140 0000 	adc.w	r0, r0, #0
 8000e66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e6a:	bf08      	it	eq
 8000e6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e70:	4770      	bx	lr
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xce>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fmul+0xe6>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e78f      	b.n	8000dc4 <__aeabi_fmul+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	bf18      	it	ne
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d00a      	beq.n	8000eca <__aeabi_fmul+0x11e>
 8000eb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb8:	bf18      	it	ne
 8000eba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ebe:	d1d8      	bne.n	8000e72 <__aeabi_fmul+0xc6>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	4770      	bx	lr
 8000eca:	f090 0f00 	teq	r0, #0
 8000ece:	bf17      	itett	ne
 8000ed0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ed4:	4608      	moveq	r0, r1
 8000ed6:	f091 0f00 	teqne	r1, #0
 8000eda:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ede:	d014      	beq.n	8000f0a <__aeabi_fmul+0x15e>
 8000ee0:	ea92 0f0c 	teq	r2, ip
 8000ee4:	d101      	bne.n	8000eea <__aeabi_fmul+0x13e>
 8000ee6:	0242      	lsls	r2, r0, #9
 8000ee8:	d10f      	bne.n	8000f0a <__aeabi_fmul+0x15e>
 8000eea:	ea93 0f0c 	teq	r3, ip
 8000eee:	d103      	bne.n	8000ef8 <__aeabi_fmul+0x14c>
 8000ef0:	024b      	lsls	r3, r1, #9
 8000ef2:	bf18      	it	ne
 8000ef4:	4608      	movne	r0, r1
 8000ef6:	d108      	bne.n	8000f0a <__aeabi_fmul+0x15e>
 8000ef8:	ea80 0001 	eor.w	r0, r0, r1
 8000efc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f08:	4770      	bx	lr
 8000f0a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_fdiv>:
 8000f14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f1c:	bf1e      	ittt	ne
 8000f1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f22:	ea92 0f0c 	teqne	r2, ip
 8000f26:	ea93 0f0c 	teqne	r3, ip
 8000f2a:	d069      	beq.n	8001000 <__aeabi_fdiv+0xec>
 8000f2c:	eba2 0203 	sub.w	r2, r2, r3
 8000f30:	ea80 0c01 	eor.w	ip, r0, r1
 8000f34:	0249      	lsls	r1, r1, #9
 8000f36:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f3a:	d037      	beq.n	8000fac <__aeabi_fdiv+0x98>
 8000f3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f40:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f44:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	bf38      	it	cc
 8000f50:	005b      	lslcc	r3, r3, #1
 8000f52:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f56:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	bf24      	itt	cs
 8000f5e:	1a5b      	subcs	r3, r3, r1
 8000f60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f64:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f68:	bf24      	itt	cs
 8000f6a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f6e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f72:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f76:	bf24      	itt	cs
 8000f78:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f8a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	bf18      	it	ne
 8000f92:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f96:	d1e0      	bne.n	8000f5a <__aeabi_fdiv+0x46>
 8000f98:	2afd      	cmp	r2, #253	; 0xfd
 8000f9a:	f63f af50 	bhi.w	8000e3e <__aeabi_fmul+0x92>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fa4:	bf08      	it	eq
 8000fa6:	f020 0001 	biceq.w	r0, r0, #1
 8000faa:	4770      	bx	lr
 8000fac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fb4:	327f      	adds	r2, #127	; 0x7f
 8000fb6:	bfc2      	ittt	gt
 8000fb8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fbc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc0:	4770      	bxgt	lr
 8000fc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	3a01      	subs	r2, #1
 8000fcc:	e737      	b.n	8000e3e <__aeabi_fmul+0x92>
 8000fce:	f092 0f00 	teq	r2, #0
 8000fd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0040      	lsleq	r0, r0, #1
 8000fda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fde:	3a01      	subeq	r2, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xc2>
 8000fe2:	ea40 000c 	orr.w	r0, r0, ip
 8000fe6:	f093 0f00 	teq	r3, #0
 8000fea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fee:	bf02      	ittt	eq
 8000ff0:	0049      	lsleq	r1, r1, #1
 8000ff2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ff6:	3b01      	subeq	r3, #1
 8000ff8:	d0f9      	beq.n	8000fee <__aeabi_fdiv+0xda>
 8000ffa:	ea41 010c 	orr.w	r1, r1, ip
 8000ffe:	e795      	b.n	8000f2c <__aeabi_fdiv+0x18>
 8001000:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001004:	ea92 0f0c 	teq	r2, ip
 8001008:	d108      	bne.n	800101c <__aeabi_fdiv+0x108>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	f47f af7d 	bne.w	8000f0a <__aeabi_fmul+0x15e>
 8001010:	ea93 0f0c 	teq	r3, ip
 8001014:	f47f af70 	bne.w	8000ef8 <__aeabi_fmul+0x14c>
 8001018:	4608      	mov	r0, r1
 800101a:	e776      	b.n	8000f0a <__aeabi_fmul+0x15e>
 800101c:	ea93 0f0c 	teq	r3, ip
 8001020:	d104      	bne.n	800102c <__aeabi_fdiv+0x118>
 8001022:	024b      	lsls	r3, r1, #9
 8001024:	f43f af4c 	beq.w	8000ec0 <__aeabi_fmul+0x114>
 8001028:	4608      	mov	r0, r1
 800102a:	e76e      	b.n	8000f0a <__aeabi_fmul+0x15e>
 800102c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001030:	bf18      	it	ne
 8001032:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001036:	d1ca      	bne.n	8000fce <__aeabi_fdiv+0xba>
 8001038:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800103c:	f47f af5c 	bne.w	8000ef8 <__aeabi_fmul+0x14c>
 8001040:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001044:	f47f af3c 	bne.w	8000ec0 <__aeabi_fmul+0x114>
 8001048:	e75f      	b.n	8000f0a <__aeabi_fmul+0x15e>
 800104a:	bf00      	nop
 800104c:	0000      	movs	r0, r0
	...

08001050 <sinVal>:
		-806,-788,-769,-751,-732,-714,-695,-676,-658,-639,-620,-601,-582,-563,-544,-525,-506,-487,-468,-448,
		-429,-410,-391,-371,-352,-332,-313,-294,-274,-255,-235,-216,-196,-176,-157,-137,-118,-98,-78,-59,-39,-20};


double sinVal(double a)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	e9c7 0102 	strd	r0, r1, [r7, #8]
	double an = fmod(-1 * a, 2 * M_PI) * 360 / M_PI;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	a34a      	add	r3, pc, #296	; (adr r3, 8001190 <sinVal+0x140>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001070:	f00b fa88 	bl	800c584 <fmod>
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <sinVal+0x158>)
 800107a:	f7ff fa91 	bl	80005a0 <__aeabi_dmul>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	a344      	add	r3, pc, #272	; (adr r3, 8001198 <sinVal+0x148>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fbb2 	bl	80007f4 <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double ap = fmod(a, 2 * M_PI) * 360 / M_PI;
 8001098:	a33d      	add	r3, pc, #244	; (adr r3, 8001190 <sinVal+0x140>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a2:	f00b fa6f 	bl	800c584 <fmod>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <sinVal+0x158>)
 80010ac:	f7ff fa78 	bl	80005a0 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	a337      	add	r3, pc, #220	; (adr r3, 8001198 <sinVal+0x148>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fb99 	bl	80007f4 <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double s1 = qsine[(uint32_t)(an)];
 80010ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80010ce:	f7ff fd3f 	bl	8000b50 <__aeabi_d2uiz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a35      	ldr	r2, [pc, #212]	; (80011ac <sinVal+0x15c>)
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double s2 = qsine[(uint32_t)(ap)];
 80010e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010e6:	f7ff fd33 	bl	8000b50 <__aeabi_d2uiz>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <sinVal+0x15c>)
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return ((a < 0 ? -1 *  s1 : s2) / 2249) * 2249/12;//1499 / 8;
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001106:	f7ff fcbd 	bl	8000a84 <__aeabi_dcmplt>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d01f      	beq.n	8001150 <sinVal+0x100>
 8001110:	69bc      	ldr	r4, [r7, #24]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001118:	a321      	add	r3, pc, #132	; (adr r3, 80011a0 <sinVal+0x150>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff fb67 	bl	80007f4 <__aeabi_ddiv>
 8001126:	4603      	mov	r3, r0
 8001128:	460c      	mov	r4, r1
 800112a:	4618      	mov	r0, r3
 800112c:	4621      	mov	r1, r4
 800112e:	a31c      	add	r3, pc, #112	; (adr r3, 80011a0 <sinVal+0x150>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa34 	bl	80005a0 <__aeabi_dmul>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	4618      	mov	r0, r3
 800113e:	4621      	mov	r1, r4
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <sinVal+0x160>)
 8001146:	f7ff fb55 	bl	80007f4 <__aeabi_ddiv>
 800114a:	4603      	mov	r3, r0
 800114c:	460c      	mov	r4, r1
 800114e:	e01a      	b.n	8001186 <sinVal+0x136>
 8001150:	a313      	add	r3, pc, #76	; (adr r3, 80011a0 <sinVal+0x150>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800115a:	f7ff fb4b 	bl	80007f4 <__aeabi_ddiv>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	4618      	mov	r0, r3
 8001164:	4621      	mov	r1, r4
 8001166:	a30e      	add	r3, pc, #56	; (adr r3, 80011a0 <sinVal+0x150>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fa18 	bl	80005a0 <__aeabi_dmul>
 8001170:	4603      	mov	r3, r0
 8001172:	460c      	mov	r4, r1
 8001174:	4618      	mov	r0, r3
 8001176:	4621      	mov	r1, r4
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <sinVal+0x160>)
 800117e:	f7ff fb39 	bl	80007f4 <__aeabi_ddiv>
 8001182:	4603      	mov	r3, r0
 8001184:	460c      	mov	r4, r1
}
 8001186:	4618      	mov	r0, r3
 8001188:	4621      	mov	r1, r4
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bdb0      	pop	{r4, r5, r7, pc}
 8001190:	54442d18 	.word	0x54442d18
 8001194:	401921fb 	.word	0x401921fb
 8001198:	54442d18 	.word	0x54442d18
 800119c:	400921fb 	.word	0x400921fb
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40a19200 	.word	0x40a19200
 80011a8:	40768000 	.word	0x40768000
 80011ac:	20000000 	.word	0x20000000
 80011b0:	40280000 	.word	0x40280000
 80011b4:	00000000 	.word	0x00000000

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011bc:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 80011c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f002 fdf9 	bl	8003db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f002 f9d1 	bl	800356c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f002 fbd5 	bl	8003978 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011ce:	f002 fa87 	bl	80036e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d2:	f002 faf3 	bl	80037bc <MX_TIM3_Init>
  MX_TIM4_Init();
 80011d6:	f002 fb6b 	bl	80038b0 <MX_TIM4_Init>
  MX_I2C2_Init();
 80011da:	f002 fa53 	bl	8003684 <MX_I2C2_Init>
  MX_I2C1_Init();
 80011de:	f002 fa23 	bl	8003628 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011e2:	f00a fabb 	bl	800b75c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t check = 0u;
 80011e6:	f107 02bf 	add.w	r2, r7, #191	; 0xbf
 80011ea:	2300      	movs	r3, #0
 80011ec:	7013      	strb	r3, [r2, #0]
  uint8_t data=0;
 80011ee:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80011f2:	2300      	movs	r3, #0
 80011f4:	7013      	strb	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */



  /*-------------Initialize camera gyro---------------*/
  HAL_Delay(100);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f002 fe40 	bl	8003e7c <HAL_Delay>
  if(HAL_OK == HAL_I2C_IsDeviceReady(&hi2c2,ADDRESS,1 ,100) )
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	2201      	movs	r2, #1
 8001200:	21d0      	movs	r1, #208	; 0xd0
 8001202:	48cd      	ldr	r0, [pc, #820]	; (8001538 <main+0x380>)
 8001204:	f003 fd80 	bl	8004d08 <HAL_I2C_IsDeviceReady>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <main+0x62>
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001214:	48c9      	ldr	r0, [pc, #804]	; (800153c <main+0x384>)
 8001216:	f003 f8cb 	bl	80043b0 <HAL_GPIO_WritePin>
  }
  HAL_I2C_Mem_Read(&hi2c2, ADDRESS,0x75,1, &check, 1, 1000);
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f107 03bf 	add.w	r3, r7, #191	; 0xbf
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	2275      	movs	r2, #117	; 0x75
 800122e:	21d0      	movs	r1, #208	; 0xd0
 8001230:	48c1      	ldr	r0, [pc, #772]	; (8001538 <main+0x380>)
 8001232:	f003 fb07 	bl	8004844 <HAL_I2C_Mem_Read>
  HAL_Delay(200);
 8001236:	20c8      	movs	r0, #200	; 0xc8
 8001238:	f002 fe20 	bl	8003e7c <HAL_Delay>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001242:	48be      	ldr	r0, [pc, #760]	; (800153c <main+0x384>)
 8001244:	f003 f8b4 	bl	80043b0 <HAL_GPIO_WritePin>

  HAL_Delay(200);
 8001248:	20c8      	movs	r0, #200	; 0xc8
 800124a:	f002 fe17 	bl	8003e7c <HAL_Delay>
  if(0x68 == check)
 800124e:	f107 03bf 	add.w	r3, r7, #191	; 0xbf
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b68      	cmp	r3, #104	; 0x68
 8001256:	d105      	bne.n	8001264 <main+0xac>
  {
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125e:	48b7      	ldr	r0, [pc, #732]	; (800153c <main+0x384>)
 8001260:	f003 f8a6 	bl	80043b0 <HAL_GPIO_WritePin>
  }
  /*Reset sensor*/
  data = 0x00;
 8001264:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 8001268:	2300      	movs	r3, #0
 800126a:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c2, ADDRESS, 0x6B, 1,&data, 1, 1000);
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	226b      	movs	r2, #107	; 0x6b
 8001280:	21d0      	movs	r1, #208	; 0xd0
 8001282:	48ad      	ldr	r0, [pc, #692]	; (8001538 <main+0x380>)
 8001284:	f003 f9e4 	bl	8004650 <HAL_I2C_Mem_Write>
  /*Wake up sensor*/
  data = 0x00;
 8001288:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800128c:	2300      	movs	r3, #0
 800128e:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c2, ADDRESS, 0x00, 1,&data, 1, 1000);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2301      	movs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	2200      	movs	r2, #0
 80012a4:	21d0      	movs	r1, #208	; 0xd0
 80012a6:	48a4      	ldr	r0, [pc, #656]	; (8001538 <main+0x380>)
 80012a8:	f003 f9d2 	bl	8004650 <HAL_I2C_Mem_Write>
  /*Set DATA RATE of 1KHz by writing SMPLRT_DIV register*/
  data = 0x07;
 80012ac:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80012b0:	2307      	movs	r3, #7
 80012b2:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c2, ADDRESS, 0x19, 1, &data, 1, 1000);
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	2219      	movs	r2, #25
 80012c8:	21d0      	movs	r1, #208	; 0xd0
 80012ca:	489b      	ldr	r0, [pc, #620]	; (8001538 <main+0x380>)
 80012cc:	f003 f9c0 	bl	8004650 <HAL_I2C_Mem_Write>

  /*Configure gyro (+-250 degrees/s) and accelerometer*/
  data = 0x10;
 80012d0:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80012d4:	2310      	movs	r3, #16
 80012d6:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c2, ADDRESS, 0x1B, 1, &data, 1, 1000);
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2301      	movs	r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	221b      	movs	r2, #27
 80012ec:	21d0      	movs	r1, #208	; 0xd0
 80012ee:	4892      	ldr	r0, [pc, #584]	; (8001538 <main+0x380>)
 80012f0:	f003 f9ae 	bl	8004650 <HAL_I2C_Mem_Write>
  data = 0x08;
 80012f4:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80012f8:	2308      	movs	r3, #8
 80012fa:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c2, ADDRESS, 0x1C, 1, &data, 1, 1000);
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221c      	movs	r2, #28
 8001310:	21d0      	movs	r1, #208	; 0xd0
 8001312:	4889      	ldr	r0, [pc, #548]	; (8001538 <main+0x380>)
 8001314:	f003 f99c 	bl	8004650 <HAL_I2C_Mem_Write>
 /*-----------------------------------------------------------------*/

  /*-------------Initialize mount gyro---------------*/
  HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	; 0x64
 800131a:	f002 fdaf 	bl	8003e7c <HAL_Delay>
  if(HAL_OK == HAL_I2C_IsDeviceReady(&hi2c1,ADDRESS2,1 ,100) )
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	2201      	movs	r2, #1
 8001322:	21d2      	movs	r1, #210	; 0xd2
 8001324:	4886      	ldr	r0, [pc, #536]	; (8001540 <main+0x388>)
 8001326:	f003 fcef 	bl	8004d08 <HAL_I2C_IsDeviceReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <main+0x184>
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001336:	4881      	ldr	r0, [pc, #516]	; (800153c <main+0x384>)
 8001338:	f003 f83a 	bl	80043b0 <HAL_GPIO_WritePin>
  }

  HAL_I2C_Mem_Read(&hi2c1, ADDRESS2,0x75,1, &check, 1, 1000);
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 03bf 	add.w	r3, r7, #191	; 0xbf
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2275      	movs	r2, #117	; 0x75
 8001350:	21d2      	movs	r1, #210	; 0xd2
 8001352:	487b      	ldr	r0, [pc, #492]	; (8001540 <main+0x388>)
 8001354:	f003 fa76 	bl	8004844 <HAL_I2C_Mem_Read>
  HAL_Delay(200);
 8001358:	20c8      	movs	r0, #200	; 0xc8
 800135a:	f002 fd8f 	bl	8003e7c <HAL_Delay>
  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);

  HAL_Delay(200);
 800135e:	20c8      	movs	r0, #200	; 0xc8
 8001360:	f002 fd8c 	bl	8003e7c <HAL_Delay>
  if(0x68 == check)
  {
	 // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
  }
  /*Reset sensor*/
  data = 0x00;
 8001364:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 8001368:	2300      	movs	r3, #0
 800136a:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c1, ADDRESS2, 0x6B, 1,&data, 1, 1000);
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	226b      	movs	r2, #107	; 0x6b
 8001380:	21d2      	movs	r1, #210	; 0xd2
 8001382:	486f      	ldr	r0, [pc, #444]	; (8001540 <main+0x388>)
 8001384:	f003 f964 	bl	8004650 <HAL_I2C_Mem_Write>
  /*Wake up sensor*/
  data = 0x00;
 8001388:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800138c:	2300      	movs	r3, #0
 800138e:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c1, ADDRESS2, 0x00, 1,&data, 1, 1000);
 8001390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2301      	movs	r3, #1
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	2200      	movs	r2, #0
 80013a4:	21d2      	movs	r1, #210	; 0xd2
 80013a6:	4866      	ldr	r0, [pc, #408]	; (8001540 <main+0x388>)
 80013a8:	f003 f952 	bl	8004650 <HAL_I2C_Mem_Write>
  /*Set DATA RATE of 1KHz by writing SMPLRT_DIV register*/
  data = 0x07;
 80013ac:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80013b0:	2307      	movs	r3, #7
 80013b2:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c1, ADDRESS2, 0x19, 1, &data, 1, 1000);
 80013b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b8:	9302      	str	r3, [sp, #8]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	2219      	movs	r2, #25
 80013c8:	21d2      	movs	r1, #210	; 0xd2
 80013ca:	485d      	ldr	r0, [pc, #372]	; (8001540 <main+0x388>)
 80013cc:	f003 f940 	bl	8004650 <HAL_I2C_Mem_Write>

  /*Configure gyro (+-250 degrees/s) and accelerometer*/
  data = 0x10;
 80013d0:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80013d4:	2310      	movs	r3, #16
 80013d6:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c1, ADDRESS2, 0x1B, 1, &data, 1, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	2301      	movs	r3, #1
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	221b      	movs	r2, #27
 80013ec:	21d2      	movs	r1, #210	; 0xd2
 80013ee:	4854      	ldr	r0, [pc, #336]	; (8001540 <main+0x388>)
 80013f0:	f003 f92e 	bl	8004650 <HAL_I2C_Mem_Write>
  data = 0x08;
 80013f4:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 80013f8:	2308      	movs	r3, #8
 80013fa:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Mem_Write(&hi2c1, ADDRESS2, 0x1C, 1, &data, 1, 1000);
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 03be 	add.w	r3, r7, #190	; 0xbe
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	221c      	movs	r2, #28
 8001410:	21d2      	movs	r1, #210	; 0xd2
 8001412:	484b      	ldr	r0, [pc, #300]	; (8001540 <main+0x388>)
 8001414:	f003 f91c 	bl	8004650 <HAL_I2C_Mem_Write>
 /*-----------------------------------------------------------------*/

  /*-----------------Initialize motors-------------------------*/
  /*Start YAW*/
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001418:	2108      	movs	r1, #8
 800141a:	484a      	ldr	r0, [pc, #296]	; (8001544 <main+0x38c>)
 800141c:	f006 f98e 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001420:	2104      	movs	r1, #4
 8001422:	4849      	ldr	r0, [pc, #292]	; (8001548 <main+0x390>)
 8001424:	f006 f98a 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001428:	210c      	movs	r1, #12
 800142a:	4846      	ldr	r0, [pc, #280]	; (8001544 <main+0x38c>)
 800142c:	f006 f986 	bl	800773c <HAL_TIM_PWM_Start>

  /*Start YAW*/
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001430:	2108      	movs	r1, #8
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <main+0x390>)
 8001434:	f006 f982 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001438:	210c      	movs	r1, #12
 800143a:	4843      	ldr	r0, [pc, #268]	; (8001548 <main+0x390>)
 800143c:	f006 f97e 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001440:	2100      	movs	r1, #0
 8001442:	4842      	ldr	r0, [pc, #264]	; (800154c <main+0x394>)
 8001444:	f006 f97a 	bl	800773c <HAL_TIM_PWM_Start>

  /*Start PITCH*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001448:	2104      	movs	r1, #4
 800144a:	4840      	ldr	r0, [pc, #256]	; (800154c <main+0x394>)
 800144c:	f006 f976 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001450:	2108      	movs	r1, #8
 8001452:	483e      	ldr	r0, [pc, #248]	; (800154c <main+0x394>)
 8001454:	f006 f972 	bl	800773c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001458:	210c      	movs	r1, #12
 800145a:	483c      	ldr	r0, [pc, #240]	; (800154c <main+0x394>)
 800145c:	f006 f96e 	bl	800773c <HAL_TIM_PWM_Start>



  /*Pull YAW rotor to  a init position*/
  TIM4->CCR3 = 1450;
 8001460:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <main+0x398>)
 8001462:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8001466:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR2 = 0u;
 8001468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146c:	2300      	movs	r3, #0
 800146e:	6393      	str	r3, [r2, #56]	; 0x38
  TIM4->CCR4 = 0u;
 8001470:	4a37      	ldr	r2, [pc, #220]	; (8001550 <main+0x398>)
 8001472:	2300      	movs	r3, #0
 8001474:	6413      	str	r3, [r2, #64]	; 0x40

  /*Pull ROLL rotor to  a init position*/
  TIM2->CCR3 = 1450;
 8001476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800147a:	f240 53aa 	movw	r3, #1450	; 0x5aa
 800147e:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM2->CCR4 = 0u;
 8001480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001484:	2300      	movs	r3, #0
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
  TIM3->CCR1 = 0u;
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <main+0x39c>)
 800148a:	2300      	movs	r3, #0
 800148c:	6353      	str	r3, [r2, #52]	; 0x34

  /*Pull PITCH rotor to  a init position*/
  TIM3->CCR2 = 1450;
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <main+0x39c>)
 8001490:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8001494:	6393      	str	r3, [r2, #56]	; 0x38
  TIM3->CCR3 = 0u;
 8001496:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <main+0x39c>)
 8001498:	2300      	movs	r3, #0
 800149a:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM3->CCR4 = 0u;
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <main+0x39c>)
 800149e:	2300      	movs	r3, #0
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
  /*------------------------------------------------------------*/

  /*---------------Initialize variables---------------*/
  double dt = 1;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	4c2c      	ldr	r4, [pc, #176]	; (8001558 <main+0x3a0>)
 80014a8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80014ac:	e9c2 3400 	strd	r3, r4, [r2]
  double a, b, c;
  double fia, fib, fic;
  uint8_t values[6];
  int16_t Accel_X_RAW = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
  int16_t Accel_Y_RAW = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270
  int16_t Accel_Z_RAW = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e
  int16_t Gyro_X_RAW = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8a7 326c 	strh.w	r3, [r7, #620]	; 0x26c
  int16_t Gyro_Y_RAW = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8a7 326a 	strh.w	r3, [r7, #618]	; 0x26a
  int16_t Gyro_Z_RAW = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8a7 3268 	strh.w	r3, [r7, #616]	; 0x268

  double Ax = 0.0f;
 80014d4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	f04f 0400 	mov.w	r4, #0
 80014e0:	e9c2 3400 	strd	r3, r4, [r2]
  double Ay = 0.0f;
 80014e4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f04f 0400 	mov.w	r4, #0
 80014f0:	e9c2 3400 	strd	r3, r4, [r2]
  double ax = 0.0f;
 80014f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f04f 0400 	mov.w	r4, #0
 8001500:	e9c2 3400 	strd	r3, r4, [r2]
  double ay = 0.0f;
 8001504:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0400 	mov.w	r4, #0
 8001510:	e9c2 3400 	strd	r3, r4, [r2]
  double az = 0.0f;
 8001514:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	f04f 0400 	mov.w	r4, #0
 8001520:	e9c2 3400 	strd	r3, r4, [r2]

  double Gx = 0.0f;
 8001524:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	f04f 0400 	mov.w	r4, #0
 8001530:	e9c2 3400 	strd	r3, r4, [r2]
 8001534:	e012      	b.n	800155c <main+0x3a4>
 8001536:	bf00      	nop
 8001538:	20001b40 	.word	0x20001b40
 800153c:	40010c00 	.word	0x40010c00
 8001540:	20001aec 	.word	0x20001aec
 8001544:	20001aa4 	.word	0x20001aa4
 8001548:	20001bdc 	.word	0x20001bdc
 800154c:	20001b94 	.word	0x20001b94
 8001550:	40000800 	.word	0x40000800
 8001554:	40000400 	.word	0x40000400
 8001558:	3ff00000 	.word	0x3ff00000
  double Gy = 0.0f;
 800155c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f04f 0400 	mov.w	r4, #0
 8001568:	e9c2 3400 	strd	r3, r4, [r2]
  double Gz = 0.0f;
 800156c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	f04f 0400 	mov.w	r4, #0
 8001578:	e9c2 3400 	strd	r3, r4, [r2]
  double gx = 0.0f;
 800157c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	f04f 0400 	mov.w	r4, #0
 8001588:	e9c2 3400 	strd	r3, r4, [r2]
  double gy = 0.0f;
 800158c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f04f 0400 	mov.w	r4, #0
 8001598:	e9c2 3400 	strd	r3, r4, [r2]
  double gz = 0.0f;
 800159c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	f04f 0400 	mov.w	r4, #0
 80015a8:	e9c2 3400 	strd	r3, r4, [r2]
  double fid = 0.0;
 80015ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f04f 0400 	mov.w	r4, #0
 80015b8:	e9c2 3400 	strd	r3, r4, [r2]
  double thetad = 0.0;
 80015bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f04f 0400 	mov.w	r4, #0
 80015c8:	e9c2 3400 	strd	r3, r4, [r2]
  double pszid = 0.0;
 80015cc:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	e9c2 3400 	strd	r3, r4, [r2]
  double fi = 0.0;
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f04f 0400 	mov.w	r4, #0
 80015e4:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80015e8:	e9c2 3400 	strd	r3, r4, [r2]
  double theta = 0.0;
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f04f 0400 	mov.w	r4, #0
 80015f4:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80015f8:	e9c2 3400 	strd	r3, r4, [r2]
  double pszi = 0.0;
 80015fc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	f04f 0400 	mov.w	r4, #0
 8001608:	e9c2 3400 	strd	r3, r4, [r2]

  double fiz = 0.0;
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	f04f 0400 	mov.w	r4, #0
 8001614:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8001618:	e9c2 3400 	strd	r3, r4, [r2]

  double figx = 0.0;
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	f04f 0400 	mov.w	r4, #0
 8001624:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8001628:	e9c2 3400 	strd	r3, r4, [r2]
  double figy = 0.0;
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	f04f 0400 	mov.w	r4, #0
 8001634:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8001638:	e9c2 3400 	strd	r3, r4, [r2]

  double fi0, theta0, pszi0;

  /*----------PID PITCH vars---------*/
  double ik2, ik12, ek2, ek12, dk2, dk12, uk2;
  ik2 = ik12 = ek2 = ek12 = dk2 = dk12 = uk2 = 0.0;
 800163c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	e9c2 3400 	strd	r3, r4, [r2]
 800164c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001650:	cb18      	ldmia	r3, {r3, r4}
 8001652:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8001656:	e9c2 3400 	strd	r3, r4, [r2]
 800165a:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800165e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001662:	cb18      	ldmia	r3, {r3, r4}
 8001664:	e9c2 3400 	strd	r3, r4, [r2]
 8001668:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800166c:	cb18      	ldmia	r3, {r3, r4}
 800166e:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8001672:	e9c2 3400 	strd	r3, r4, [r2]
 8001676:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800167a:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800167e:	cb18      	ldmia	r3, {r3, r4}
 8001680:	e9c2 3400 	strd	r3, r4, [r2]
 8001684:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001688:	cb18      	ldmia	r3, {r3, r4}
 800168a:	f507 7240 	add.w	r2, r7, #768	; 0x300
 800168e:	e9c2 3400 	strd	r3, r4, [r2]
 8001692:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8001696:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800169a:	cb18      	ldmia	r3, {r3, r4}
 800169c:	e9c2 3400 	strd	r3, r4, [r2]
  uint8_t sat2 = 0u;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
  /*--------------*/

  /*----------PID ROLL vars---------*/
  double ik3, ik13, ek3, ek13, dk3, dk13, uk3;
  ik3 = ik13 = ek3 = ek13 = dk3 = dk13 = uk3 = 0.0;
 80016a6:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	e9c2 3400 	strd	r3, r4, [r2]
 80016b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80016ba:	cb18      	ldmia	r3, {r3, r4}
 80016bc:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80016c0:	e9c2 3400 	strd	r3, r4, [r2]
 80016c4:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80016c8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80016cc:	cb18      	ldmia	r3, {r3, r4}
 80016ce:	e9c2 3400 	strd	r3, r4, [r2]
 80016d2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80016d6:	cb18      	ldmia	r3, {r3, r4}
 80016d8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80016dc:	e9c2 3400 	strd	r3, r4, [r2]
 80016e0:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80016e4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80016e8:	cb18      	ldmia	r3, {r3, r4}
 80016ea:	e9c2 3400 	strd	r3, r4, [r2]
 80016ee:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80016f2:	cb18      	ldmia	r3, {r3, r4}
 80016f4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]
 80016fc:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8001700:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001704:	cb18      	ldmia	r3, {r3, r4}
 8001706:	e9c2 3400 	strd	r3, r4, [r2]
  uint8_t sat3 = 0u;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
  double figx2, figy2;
  double fi20, theta20, pszi20;

  double firef0, thetaref0, psziref0;

  memset(buf, '\0',20);
 8001710:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001714:	2214      	movs	r2, #20
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00a fcbf 	bl	800c09c <memset>
  sprintf (buf, "X");
 800171e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001722:	2358      	movs	r3, #88	; 0x58
 8001724:	8013      	strh	r3, [r2, #0]
  data = '\n';
 8001726:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800172a:	230a      	movs	r3, #10
 800172c:	7013      	strb	r3, [r2, #0]
  uint8_t kezdo = 'X';
 800172e:	f207 12af 	addw	r2, r7, #431	; 0x1af
 8001732:	2358      	movs	r3, #88	; 0x58
 8001734:	7013      	strb	r3, [r2, #0]

  double firef, thetaref, psziref;
  firef = psziref = thetaref = 0;
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f04f 0400 	mov.w	r4, #0
 800173e:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8001742:	e9c2 3400 	strd	r3, r4, [r2]
 8001746:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800174a:	cb18      	ldmia	r3, {r3, r4}
 800174c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8001750:	e9c2 3400 	strd	r3, r4, [r2]
 8001754:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001758:	cb18      	ldmia	r3, {r3, r4}
 800175a:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800175e:	e9c2 3400 	strd	r3, r4, [r2]
  uint8_t init = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
  double efi, etheta, epszi;
  efi = etheta = epszi = 0;
 8001768:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f04f 0400 	mov.w	r4, #0
 8001774:	e9c2 3400 	strd	r3, r4, [r2]
 8001778:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800177c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001780:	cb18      	ldmia	r3, {r3, r4}
 8001782:	e9c2 3400 	strd	r3, r4, [r2]
 8001786:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800178a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800178e:	cb18      	ldmia	r3, {r3, r4}
 8001790:	e9c2 3400 	strd	r3, r4, [r2]
  double m1;

  uint16_t init2 = 200u;
 8001794:	23c8      	movs	r3, #200	; 0xc8
 8001796:	f8a7 3274 	strh.w	r3, [r7, #628]	; 0x274
  uint64_t iter = 0u;
 800179a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	f04f 0400 	mov.w	r4, #0
 80017a6:	e9c2 3400 	strd	r3, r4, [r2]

  //motor angles
  double fim, thetam, pszim;

  HAL_Delay(2000);
 80017aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ae:	f002 fb65 	bl	8003e7c <HAL_Delay>

  /*Registers for measuring time*/
  DWT->CTRL |= 1 ; // enable the counter
 80017b2:	4bc1      	ldr	r3, [pc, #772]	; (8001ab8 <main+0x900>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4ac0      	ldr	r2, [pc, #768]	; (8001ab8 <main+0x900>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6013      	str	r3, [r2, #0]

  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80017be:	4bbf      	ldr	r3, [pc, #764]	; (8001abc <main+0x904>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4abe      	ldr	r2, [pc, #760]	; (8001abc <main+0x904>)
 80017c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c8:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk;
 80017ca:	4bbb      	ldr	r3, [pc, #748]	; (8001ab8 <main+0x900>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4aba      	ldr	r2, [pc, #744]	; (8001ab8 <main+0x900>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80017d6:	4ab8      	ldr	r2, [pc, #736]	; (8001ab8 <main+0x900>)
 80017d8:	2300      	movs	r3, #0
 80017da:	6053      	str	r3, [r2, #4]

  while (1)
  {
	  /*Reading accelerometer registers*/
	  HAL_I2C_Mem_Read (&hi2c2,ADDRESS, 0x3B, 1, values, 6, 1000);
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2306      	movs	r3, #6
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	223b      	movs	r2, #59	; 0x3b
 80017f0:	21d0      	movs	r1, #208	; 0xd0
 80017f2:	48b3      	ldr	r0, [pc, #716]	; (8001ac0 <main+0x908>)
 80017f4:	f003 f826 	bl	8004844 <HAL_I2C_Mem_Read>
	  Accel_X_RAW = (int16_t)(values[0] << 8 | values [1]);
 80017f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
	  Accel_Y_RAW = (int16_t)(values[2] << 8 | values [3]);
 8001810:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001814:	789b      	ldrb	r3, [r3, #2]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800181e:	78db      	ldrb	r3, [r3, #3]
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	f8a7 3270 	strh.w	r3, [r7, #624]	; 0x270
	  Accel_Z_RAW = (int16_t)(values[4] << 8 | values [5]);
 8001828:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001836:	795b      	ldrb	r3, [r3, #5]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	f8a7 326e 	strh.w	r3, [r7, #622]	; 0x26e

	  	  	  /*Read gyro registers*/
	  HAL_I2C_Mem_Read (&hi2c2, ADDRESS, 0x43, 1, values, 6, 1000);
 8001840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2306      	movs	r3, #6
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	2243      	movs	r2, #67	; 0x43
 8001854:	21d0      	movs	r1, #208	; 0xd0
 8001856:	489a      	ldr	r0, [pc, #616]	; (8001ac0 <main+0x908>)
 8001858:	f002 fff4 	bl	8004844 <HAL_I2C_Mem_Read>
	  Gyro_X_RAW = (int16_t)(values[0] << 8 | values [1]);
 800185c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	f8a7 326c 	strh.w	r3, [r7, #620]	; 0x26c
	  Gyro_Y_RAW = (int16_t)(values[2] << 8 | values [3]);
 8001874:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001878:	789b      	ldrb	r3, [r3, #2]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	f8a7 326a 	strh.w	r3, [r7, #618]	; 0x26a
	  Gyro_Z_RAW = (int16_t)(values[4] << 8 | values [5]);
 800188c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	f8a7 3268 	strh.w	r3, [r7, #616]	; 0x268

	  /*Reading mount accelerometer registers*/
	  HAL_I2C_Mem_Read (&hi2c1,ADDRESS2, 0x3B, 1, values2, 6, 1000);
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2306      	movs	r3, #6
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	223b      	movs	r2, #59	; 0x3b
 80018b8:	21d2      	movs	r1, #210	; 0xd2
 80018ba:	4882      	ldr	r0, [pc, #520]	; (8001ac4 <main+0x90c>)
 80018bc:	f002 ffc2 	bl	8004844 <HAL_I2C_Mem_Read>
	  Accel_X_RAW2 = (int16_t)(values2[0] << 8 | values2 [1]);
 80018c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b219      	sxth	r1, r3
 80018ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	f507 72c3 	add.w	r2, r7, #390	; 0x186
 80018d6:	430b      	orrs	r3, r1
 80018d8:	8013      	strh	r3, [r2, #0]
	  Accel_Y_RAW2 = (int16_t)(values2[2] << 8 | values2 [3]);
 80018da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b219      	sxth	r1, r3
 80018e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e8:	78db      	ldrb	r3, [r3, #3]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 80018f0:	430b      	orrs	r3, r1
 80018f2:	8013      	strh	r3, [r2, #0]
	  Accel_Z_RAW2 = (int16_t)(values2[4] << 8 | values2 [5]);
 80018f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b219      	sxth	r1, r3
 80018fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001902:	795b      	ldrb	r3, [r3, #5]
 8001904:	b21b      	sxth	r3, r3
 8001906:	f507 72c1 	add.w	r2, r7, #386	; 0x182
 800190a:	430b      	orrs	r3, r1
 800190c:	8013      	strh	r3, [r2, #0]

	  	  	  /*Read mount gyro registers*/
	  HAL_I2C_Mem_Read (&hi2c1, ADDRESS2, 0x43, 1, values2, 6, 1000);
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2306      	movs	r3, #6
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	2243      	movs	r2, #67	; 0x43
 8001922:	21d2      	movs	r1, #210	; 0xd2
 8001924:	4867      	ldr	r0, [pc, #412]	; (8001ac4 <main+0x90c>)
 8001926:	f002 ff8d 	bl	8004844 <HAL_I2C_Mem_Read>
	  Gyro_X_RAW2 = (int16_t)(values2[0] << 8 | values2 [1]);
 800192a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b219      	sxth	r1, r3
 8001934:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	b21b      	sxth	r3, r3
 800193c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001940:	430b      	orrs	r3, r1
 8001942:	8013      	strh	r3, [r2, #0]
	  Gyro_Y_RAW2 = (int16_t)(values2[2] << 8 | values2 [3]);
 8001944:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b219      	sxth	r1, r3
 800194e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	b21b      	sxth	r3, r3
 8001956:	f507 72bf 	add.w	r2, r7, #382	; 0x17e
 800195a:	430b      	orrs	r3, r1
 800195c:	8013      	strh	r3, [r2, #0]
	  Gyro_Z_RAW2 = (int16_t)(values2[4] << 8 | values2 [5]);
 800195e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b219      	sxth	r1, r3
 8001968:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	b21b      	sxth	r3, r3
 8001970:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8001974:	430b      	orrs	r3, r1
 8001976:	8013      	strh	r3, [r2, #0]


	  /*Calculate elapsed time*/
	  dt = (((double)DWT->CYCCNT) / HAL_RCC_GetHCLKFreq());
 8001978:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <main+0x900>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd95 	bl	80004ac <__aeabi_ui2d>
 8001982:	4605      	mov	r5, r0
 8001984:	460e      	mov	r6, r1
 8001986:	f005 fd97 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fd8d 	bl	80004ac <__aeabi_ui2d>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	461a      	mov	r2, r3
 8001998:	4623      	mov	r3, r4
 800199a:	4628      	mov	r0, r5
 800199c:	4631      	mov	r1, r6
 800199e:	f7fe ff29 	bl	80007f4 <__aeabi_ddiv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80019aa:	e9c2 3400 	strd	r3, r4, [r2]
	  DWT->CYCCNT = 0;
 80019ae:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <main+0x900>)
 80019b0:	2300      	movs	r3, #0
 80019b2:	6053      	str	r3, [r2, #4]
	  	  	  /*Get the acceleration values*/
	  ax = G*Accel_X_RAW / 8192.0;
 80019b4:	f9b7 3272 	ldrsh.w	r3, [r7, #626]	; 0x272
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f9a3 	bl	8000d04 <__aeabi_i2f>
 80019be:	4603      	mov	r3, r0
 80019c0:	4941      	ldr	r1, [pc, #260]	; (8001ac8 <main+0x910>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff f9f2 	bl	8000dac <__aeabi_fmul>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fd90 	bl	80004f0 <__aeabi_f2d>
 80019d0:	f507 7514 	add.w	r5, r7, #592	; 0x250
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <main+0x914>)
 80019da:	f7fe ff0b 	bl	80007f4 <__aeabi_ddiv>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
 80019e2:	e9c5 3400 	strd	r3, r4, [r5]
	  ay = -1 * (G*Accel_Y_RAW / 8192.0);
 80019e6:	f9b7 3270 	ldrsh.w	r3, [r7, #624]	; 0x270
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f98a 	bl	8000d04 <__aeabi_i2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4935      	ldr	r1, [pc, #212]	; (8001ac8 <main+0x910>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f9d9 	bl	8000dac <__aeabi_fmul>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd77 	bl	80004f0 <__aeabi_f2d>
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b31      	ldr	r3, [pc, #196]	; (8001acc <main+0x914>)
 8001a08:	f7fe fef4 	bl	80007f4 <__aeabi_ddiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4619      	mov	r1, r3
 8001a12:	4622      	mov	r2, r4
 8001a14:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8001a18:	460b      	mov	r3, r1
 8001a1a:	6003      	str	r3, [r0, #0]
 8001a1c:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 8001a20:	6043      	str	r3, [r0, #4]
	  az = -G*Accel_Z_RAW / 8192.0;
 8001a22:	f9b7 326e 	ldrsh.w	r3, [r7, #622]	; 0x26e
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f96c 	bl	8000d04 <__aeabi_i2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4928      	ldr	r1, [pc, #160]	; (8001ad0 <main+0x918>)
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f9bb 	bl	8000dac <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd59 	bl	80004f0 <__aeabi_f2d>
 8001a3e:	f507 7510 	add.w	r5, r7, #576	; 0x240
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <main+0x914>)
 8001a48:	f7fe fed4 	bl	80007f4 <__aeabi_ddiv>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	e9c5 3400 	strd	r3, r4, [r5]
	  	  	  /*Get angular velocity values*/
	  gx = Gyro_X_RAW / 32.8;
 8001a54:	f9b7 326c 	ldrsh.w	r3, [r7, #620]	; 0x26c
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd37 	bl	80004cc <__aeabi_i2d>
 8001a5e:	f507 7508 	add.w	r5, r7, #544	; 0x220
 8001a62:	a313      	add	r3, pc, #76	; (adr r3, 8001ab0 <main+0x8f8>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fec4 	bl	80007f4 <__aeabi_ddiv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	e9c5 3400 	strd	r3, r4, [r5]
	  gy = -1 * (Gyro_Y_RAW / 32.8);
 8001a74:	f9b7 326a 	ldrsh.w	r3, [r7, #618]	; 0x26a
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd27 	bl	80004cc <__aeabi_i2d>
 8001a7e:	a30c      	add	r3, pc, #48	; (adr r3, 8001ab0 <main+0x8f8>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe feb6 	bl	80007f4 <__aeabi_ddiv>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4622      	mov	r2, r4
 8001a90:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8001a94:	460b      	mov	r3, r1
 8001a96:	6003      	str	r3, [r0, #0]
 8001a98:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 8001a9c:	6043      	str	r3, [r0, #4]
	  gz = -Gyro_Z_RAW / 32.8;
 8001a9e:	f9b7 3268 	ldrsh.w	r3, [r7, #616]	; 0x268
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd11 	bl	80004cc <__aeabi_i2d>
 8001aaa:	f507 7504 	add.w	r5, r7, #528	; 0x210
 8001aae:	e011      	b.n	8001ad4 <main+0x91c>
 8001ab0:	66666666 	.word	0x66666666
 8001ab4:	40406666 	.word	0x40406666
 8001ab8:	e0001000 	.word	0xe0001000
 8001abc:	e000edf0 	.word	0xe000edf0
 8001ac0:	20001b40 	.word	0x20001b40
 8001ac4:	20001aec 	.word	0x20001aec
 8001ac8:	411cf5c3 	.word	0x411cf5c3
 8001acc:	40c00000 	.word	0x40c00000
 8001ad0:	c11cf5c3 	.word	0xc11cf5c3
 8001ad4:	a3cc      	add	r3, pc, #816	; (adr r3, 8001e08 <main+0xc50>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fe8b 	bl	80007f4 <__aeabi_ddiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	e9c5 3400 	strd	r3, r4, [r5]
	  	  	  /*Normalize values*/
	  ax = ax / G;
 8001ae6:	f507 7514 	add.w	r5, r7, #592	; 0x250
 8001aea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8001aee:	a3c8      	add	r3, pc, #800	; (adr r3, 8001e10 <main+0xc58>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af8:	f7fe fe7c 	bl	80007f4 <__aeabi_ddiv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	e9c5 3400 	strd	r3, r4, [r5]
	  ay = ay / G;
 8001b04:	f507 7512 	add.w	r5, r7, #584	; 0x248
 8001b08:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001b0c:	a3c0      	add	r3, pc, #768	; (adr r3, 8001e10 <main+0xc58>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b16:	f7fe fe6d 	bl	80007f4 <__aeabi_ddiv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	e9c5 3400 	strd	r3, r4, [r5]
	  az = az / G;
 8001b22:	f507 7510 	add.w	r5, r7, #576	; 0x240
 8001b26:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001b2a:	a3b9      	add	r3, pc, #740	; (adr r3, 8001e10 <main+0xc58>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b34:	f7fe fe5e 	bl	80007f4 <__aeabi_ddiv>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	e9c5 3400 	strd	r3, r4, [r5]

	  Ax = (atan(ay / az)-0.01);
 8001b40:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001b44:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b50:	f7fe fe50 	bl	80007f4 <__aeabi_ddiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	460c      	mov	r4, r1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	f00a faa8 	bl	800c0b0 <atan>
 8001b60:	f507 7518 	add.w	r5, r7, #608	; 0x260
 8001b64:	a3ac      	add	r3, pc, #688	; (adr r3, 8001e18 <main+0xc60>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe fb61 	bl	8000230 <__aeabi_dsub>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	e9c5 3400 	strd	r3, r4, [r5]
	  Ay = (atan(-ax / (sqrt(pow(ay,2) + pow(az,2)))) - 0.027576);
 8001b76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b8a:	f507 7112 	add.w	r1, r7, #584	; 0x248
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9a:	f00a fd4f 	bl	800c63c <pow>
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	460e      	mov	r6, r1
 8001ba2:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bb2:	f00a fd43 	bl	800c63c <pow>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	4631      	mov	r1, r6
 8001bc2:	f7fe fb37 	bl	8000234 <__adddf3>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f00a fe91 	bl	800c8f4 <sqrt>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4623      	mov	r3, r4
 8001bda:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001bde:	f7fe fe09 	bl	80007f4 <__aeabi_ddiv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4618      	mov	r0, r3
 8001be8:	4621      	mov	r1, r4
 8001bea:	f00a fa61 	bl	800c0b0 <atan>
 8001bee:	f507 7516 	add.w	r5, r7, #600	; 0x258
 8001bf2:	a38b      	add	r3, pc, #556	; (adr r3, 8001e20 <main+0xc68>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fb1a 	bl	8000230 <__aeabi_dsub>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	e9c5 3400 	strd	r3, r4, [r5]
	  Gx = (gx - 0.50491+0.06) * M_PI / 180.0;
 8001c04:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8001c08:	a387      	add	r3, pc, #540	; (adr r3, 8001e28 <main+0xc70>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c12:	f7fe fb0d 	bl	8000230 <__aeabi_dsub>
 8001c16:	4603      	mov	r3, r0
 8001c18:	460c      	mov	r4, r1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	a384      	add	r3, pc, #528	; (adr r3, 8001e30 <main+0xc78>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb06 	bl	8000234 <__adddf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4621      	mov	r1, r4
 8001c30:	a381      	add	r3, pc, #516	; (adr r3, 8001e38 <main+0xc80>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcb3 	bl	80005a0 <__aeabi_dmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	f507 750e 	add.w	r5, r7, #568	; 0x238
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <main+0xc98>)
 8001c4c:	f7fe fdd2 	bl	80007f4 <__aeabi_ddiv>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	e9c5 3400 	strd	r3, r4, [r5]
	  Gy = (gy + 1.5-0.025) * M_PI / 180.0;
 8001c58:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	4b7c      	ldr	r3, [pc, #496]	; (8001e54 <main+0xc9c>)
 8001c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c66:	f7fe fae5 	bl	8000234 <__adddf3>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4621      	mov	r1, r4
 8001c72:	a373      	add	r3, pc, #460	; (adr r3, 8001e40 <main+0xc88>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fada 	bl	8000230 <__aeabi_dsub>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	a36c      	add	r3, pc, #432	; (adr r3, 8001e38 <main+0xc80>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fc89 	bl	80005a0 <__aeabi_dmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	4618      	mov	r0, r3
 8001c94:	4621      	mov	r1, r4
 8001c96:	f507 750c 	add.w	r5, r7, #560	; 0x230
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <main+0xc98>)
 8001ca0:	f7fe fda8 	bl	80007f4 <__aeabi_ddiv>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	e9c5 3400 	strd	r3, r4, [r5]
	  Gz = (gz + 0.024518) * M_PI / 180.0;
 8001cac:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8001cb0:	a365      	add	r3, pc, #404	; (adr r3, 8001e48 <main+0xc90>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cba:	f7fe fabb 	bl	8000234 <__adddf3>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	a35c      	add	r3, pc, #368	; (adr r3, 8001e38 <main+0xc80>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fc68 	bl	80005a0 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	f507 750a 	add.w	r5, r7, #552	; 0x228
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <main+0xc98>)
 8001ce2:	f7fe fd87 	bl	80007f4 <__aeabi_ddiv>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	e9c5 3400 	strd	r3, r4, [r5]

	  	  /*Get the mount acceleration values*/
      ay2 = -G*Accel_X_RAW2 / 8192.0;
 8001cee:	f507 73c3 	add.w	r3, r7, #390	; 0x186
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f804 	bl	8000d04 <__aeabi_i2f>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	4956      	ldr	r1, [pc, #344]	; (8001e58 <main+0xca0>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f853 	bl	8000dac <__aeabi_fmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fbf1 	bl	80004f0 <__aeabi_f2d>
 8001d0e:	f507 75b8 	add.w	r5, r7, #368	; 0x170
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <main+0xca4>)
 8001d18:	f7fe fd6c 	bl	80007f4 <__aeabi_ddiv>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	e9c5 3400 	strd	r3, r4, [r5]
      ax2 = 1 * (G*Accel_Y_RAW2 / 8192.0);
 8001d24:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ffe9 	bl	8000d04 <__aeabi_i2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	494a      	ldr	r1, [pc, #296]	; (8001e60 <main+0xca8>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f838 	bl	8000dac <__aeabi_fmul>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbd6 	bl	80004f0 <__aeabi_f2d>
 8001d44:	f507 75b4 	add.w	r5, r7, #360	; 0x168
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <main+0xca4>)
 8001d4e:	f7fe fd51 	bl	80007f4 <__aeabi_ddiv>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	e9c5 3400 	strd	r3, r4, [r5]
      az2 = G*Accel_Z_RAW2 / 8192.0;
 8001d5a:	f507 73c1 	add.w	r3, r7, #386	; 0x182
 8001d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ffce 	bl	8000d04 <__aeabi_i2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	493d      	ldr	r1, [pc, #244]	; (8001e60 <main+0xca8>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f81d 	bl	8000dac <__aeabi_fmul>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbbb 	bl	80004f0 <__aeabi_f2d>
 8001d7a:	f507 75b0 	add.w	r5, r7, #352	; 0x160
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <main+0xca4>)
 8001d84:	f7fe fd36 	bl	80007f4 <__aeabi_ddiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	e9c5 3400 	strd	r3, r4, [r5]
	  	  /*Get mount angular velocity values*/
      gy2 = -Gyro_X_RAW2 / 32.8;
 8001d90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d98:	425b      	negs	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb96 	bl	80004cc <__aeabi_i2d>
 8001da0:	f507 75ac 	add.w	r5, r7, #344	; 0x158
 8001da4:	a318      	add	r3, pc, #96	; (adr r3, 8001e08 <main+0xc50>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fd23 	bl	80007f4 <__aeabi_ddiv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	e9c5 3400 	strd	r3, r4, [r5]
      gx2 = (Gyro_Y_RAW2 / 32.8);
 8001db6:	f507 73bf 	add.w	r3, r7, #382	; 0x17e
 8001dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fb84 	bl	80004cc <__aeabi_i2d>
 8001dc4:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8001dc8:	a30f      	add	r3, pc, #60	; (adr r3, 8001e08 <main+0xc50>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fd11 	bl	80007f4 <__aeabi_ddiv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	e9c5 3400 	strd	r3, r4, [r5]
      gz2 = Gyro_Z_RAW2 / 32.8;
 8001dda:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb72 	bl	80004cc <__aeabi_i2d>
 8001de8:	f507 75a4 	add.w	r5, r7, #328	; 0x148
 8001dec:	a306      	add	r3, pc, #24	; (adr r3, 8001e08 <main+0xc50>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fcff 	bl	80007f4 <__aeabi_ddiv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	e9c5 3400 	strd	r3, r4, [r5]
	  	  /*Normalize values*/
      ax2 = ax2 / G;
 8001dfe:	f507 75b4 	add.w	r5, r7, #360	; 0x168
 8001e02:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001e06:	e02d      	b.n	8001e64 <main+0xcac>
 8001e08:	66666666 	.word	0x66666666
 8001e0c:	40406666 	.word	0x40406666
 8001e10:	60000000 	.word	0x60000000
 8001e14:	40239eb8 	.word	0x40239eb8
 8001e18:	47ae147b 	.word	0x47ae147b
 8001e1c:	3f847ae1 	.word	0x3f847ae1
 8001e20:	089e3433 	.word	0x089e3433
 8001e24:	3f9c3ce2 	.word	0x3f9c3ce2
 8001e28:	042d8c2a 	.word	0x042d8c2a
 8001e2c:	3fe02839 	.word	0x3fe02839
 8001e30:	eb851eb8 	.word	0xeb851eb8
 8001e34:	3faeb851 	.word	0x3faeb851
 8001e38:	54442d18 	.word	0x54442d18
 8001e3c:	400921fb 	.word	0x400921fb
 8001e40:	9999999a 	.word	0x9999999a
 8001e44:	3f999999 	.word	0x3f999999
 8001e48:	20a73f75 	.word	0x20a73f75
 8001e4c:	3f991b3f 	.word	0x3f991b3f
 8001e50:	40668000 	.word	0x40668000
 8001e54:	3ff80000 	.word	0x3ff80000
 8001e58:	c11cf5c3 	.word	0xc11cf5c3
 8001e5c:	40c00000 	.word	0x40c00000
 8001e60:	411cf5c3 	.word	0x411cf5c3
 8001e64:	a37a      	add	r3, pc, #488	; (adr r3, 8002050 <main+0xe98>)
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6e:	f7fe fcc1 	bl	80007f4 <__aeabi_ddiv>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	e9c5 3400 	strd	r3, r4, [r5]
      ay2 = ay2 / G;
 8001e7a:	f507 75b8 	add.w	r5, r7, #368	; 0x170
 8001e7e:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001e82:	a373      	add	r3, pc, #460	; (adr r3, 8002050 <main+0xe98>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e8c:	f7fe fcb2 	bl	80007f4 <__aeabi_ddiv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	e9c5 3400 	strd	r3, r4, [r5]
      az2 = az2 / G;
 8001e98:	f507 75b0 	add.w	r5, r7, #352	; 0x160
 8001e9c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001ea0:	a36b      	add	r3, pc, #428	; (adr r3, 8002050 <main+0xe98>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eaa:	f7fe fca3 	bl	80007f4 <__aeabi_ddiv>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	e9c5 3400 	strd	r3, r4, [r5]

      Ax2 = (atan(ay2 / az2)-0.01);
 8001eb6:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001eba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ec6:	f7fe fc95 	bl	80007f4 <__aeabi_ddiv>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f00a f8ed 	bl	800c0b0 <atan>
 8001ed6:	f507 75a0 	add.w	r5, r7, #320	; 0x140
 8001eda:	a35f      	add	r3, pc, #380	; (adr r3, 8002058 <main+0xea0>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe f9a6 	bl	8000230 <__aeabi_dsub>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	460c      	mov	r4, r1
 8001ee8:	e9c5 3400 	strd	r3, r4, [r5]
      Ay2 = (atan(-ax2 / (sqrt(pow(ay2,2) + pow(az2,2)))) - 0.027576);
 8001eec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f00:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f10:	f00a fb94 	bl	800c63c <pow>
 8001f14:	4605      	mov	r5, r0
 8001f16:	460e      	mov	r6, r1
 8001f18:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f28:	f00a fb88 	bl	800c63c <pow>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	460c      	mov	r4, r1
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	4628      	mov	r0, r5
 8001f36:	4631      	mov	r1, r6
 8001f38:	f7fe f97c 	bl	8000234 <__adddf3>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4618      	mov	r0, r3
 8001f42:	4621      	mov	r1, r4
 8001f44:	f00a fcd6 	bl	800c8f4 <sqrt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001f54:	f7fe fc4e 	bl	80007f4 <__aeabi_ddiv>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	4621      	mov	r1, r4
 8001f60:	f00a f8a6 	bl	800c0b0 <atan>
 8001f64:	f507 759c 	add.w	r5, r7, #312	; 0x138
 8001f68:	a33d      	add	r3, pc, #244	; (adr r3, 8002060 <main+0xea8>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe f95f 	bl	8000230 <__aeabi_dsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	e9c5 3400 	strd	r3, r4, [r5]
      Gx2 = (gx2 - 1.1649) * M_PI / 180.0;
 8001f7a:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001f7e:	a33a      	add	r3, pc, #232	; (adr r3, 8002068 <main+0xeb0>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f88:	f7fe f952 	bl	8000230 <__aeabi_dsub>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4618      	mov	r0, r3
 8001f92:	4621      	mov	r1, r4
 8001f94:	a336      	add	r3, pc, #216	; (adr r3, 8002070 <main+0xeb8>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb01 	bl	80005a0 <__aeabi_dmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f507 7598 	add.w	r5, r7, #304	; 0x130
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <main+0xed0>)
 8001fb0:	f7fe fc20 	bl	80007f4 <__aeabi_ddiv>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	e9c5 3400 	strd	r3, r4, [r5]
      Gy2 = (gy2 - 5.47) * M_PI / 180.0;
 8001fbc:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8001fc0:	a32d      	add	r3, pc, #180	; (adr r3, 8002078 <main+0xec0>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fca:	f7fe f931 	bl	8000230 <__aeabi_dsub>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	a326      	add	r3, pc, #152	; (adr r3, 8002070 <main+0xeb8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fae0 	bl	80005a0 <__aeabi_dmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	f507 7594 	add.w	r5, r7, #296	; 0x128
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <main+0xed0>)
 8001ff2:	f7fe fbff 	bl	80007f4 <__aeabi_ddiv>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	e9c5 3400 	strd	r3, r4, [r5]
      Gz2 = (gz2 - 1.975482) * M_PI / 180.0;
 8001ffe:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8002002:	a31f      	add	r3, pc, #124	; (adr r3, 8002080 <main+0xec8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800200c:	f7fe f910 	bl	8000230 <__aeabi_dsub>
 8002010:	4603      	mov	r3, r0
 8002012:	460c      	mov	r4, r1
 8002014:	4618      	mov	r0, r3
 8002016:	4621      	mov	r1, r4
 8002018:	a315      	add	r3, pc, #84	; (adr r3, 8002070 <main+0xeb8>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fabf 	bl	80005a0 <__aeabi_dmul>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	4618      	mov	r0, r3
 8002028:	4621      	mov	r1, r4
 800202a:	f507 7590 	add.w	r5, r7, #288	; 0x120
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <main+0xed0>)
 8002034:	f7fe fbde 	bl	80007f4 <__aeabi_ddiv>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	e9c5 3400 	strd	r3, r4, [r5]

	  if(1u == init)
 8002040:	f897 3277 	ldrb.w	r3, [r7, #631]	; 0x277
 8002044:	2b01      	cmp	r3, #1
 8002046:	f040 80b6 	bne.w	80021b6 <main+0xffe>
 800204a:	e01f      	b.n	800208c <main+0xed4>
 800204c:	f3af 8000 	nop.w
 8002050:	60000000 	.word	0x60000000
 8002054:	40239eb8 	.word	0x40239eb8
 8002058:	47ae147b 	.word	0x47ae147b
 800205c:	3f847ae1 	.word	0x3f847ae1
 8002060:	089e3433 	.word	0x089e3433
 8002064:	3f9c3ce2 	.word	0x3f9c3ce2
 8002068:	2eb1c433 	.word	0x2eb1c433
 800206c:	3ff2a36e 	.word	0x3ff2a36e
 8002070:	54442d18 	.word	0x54442d18
 8002074:	400921fb 	.word	0x400921fb
 8002078:	ae147ae1 	.word	0xae147ae1
 800207c:	4015e147 	.word	0x4015e147
 8002080:	037d6302 	.word	0x037d6302
 8002084:	3fff9b93 	.word	0x3fff9b93
 8002088:	40668000 	.word	0x40668000
	  {
		  init = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277

		  figx = Ax;
 8002092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002096:	cb18      	ldmia	r3, {r3, r4}
 8002098:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800209c:	e9c2 3400 	strd	r3, r4, [r2]
		  figy = Ay;
 80020a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80020a4:	cb18      	ldmia	r3, {r3, r4}
 80020a6:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80020aa:	e9c2 3400 	strd	r3, r4, [r2]

		  fi = Ax;
 80020ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020b2:	cb18      	ldmia	r3, {r3, r4}
 80020b4:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80020b8:	e9c2 3400 	strd	r3, r4, [r2]
		  theta = Ay;
 80020bc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80020c0:	cb18      	ldmia	r3, {r3, r4}
 80020c2:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80020c6:	e9c2 3400 	strd	r3, r4, [r2]
		  fiz = 0;
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80020d6:	e9c2 3400 	strd	r3, r4, [r2]

		  dt = 0;
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f04f 0400 	mov.w	r4, #0
 80020e2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80020e6:	e9c2 3400 	strd	r3, r4, [r2]

		  fi0 = Ax;
 80020ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020ee:	cb18      	ldmia	r3, {r3, r4}
 80020f0:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80020f4:	e9c2 3400 	strd	r3, r4, [r2]
		  theta0 = Ay;
 80020f8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80020fc:	cb18      	ldmia	r3, {r3, r4}
 80020fe:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8002102:	e9c2 3400 	strd	r3, r4, [r2]
		  pszi0 = 0;
 8002106:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	e9c2 3400 	strd	r3, r4, [r2]

		  firef = fi0;
 8002116:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800211a:	cb18      	ldmia	r3, {r3, r4}
 800211c:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8002120:	e9c2 3400 	strd	r3, r4, [r2]
		  thetaref = theta0;
 8002124:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002128:	cb18      	ldmia	r3, {r3, r4}
 800212a:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800212e:	e9c2 3400 	strd	r3, r4, [r2]
		  psziref = 0;
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	f04f 0400 	mov.w	r4, #0
 800213a:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800213e:	e9c2 3400 	strd	r3, r4, [r2]

		  /*mount IMU*/
		  figx2 = Ax2;
 8002142:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002146:	cb18      	ldmia	r3, {r3, r4}
 8002148:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800214c:	e9c2 3400 	strd	r3, r4, [r2]
		  figy2 = Ay2;
 8002150:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002154:	cb18      	ldmia	r3, {r3, r4}
 8002156:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800215a:	e9c2 3400 	strd	r3, r4, [r2]

		  fi2 = Ax2;
 800215e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002162:	cb18      	ldmia	r3, {r3, r4}
 8002164:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8002168:	e9c2 3400 	strd	r3, r4, [r2]
		  theta2 = Ay2;
 800216c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002170:	cb18      	ldmia	r3, {r3, r4}
 8002172:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8002176:	e9c2 3400 	strd	r3, r4, [r2]
		  pszi2 = 0;
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f04f 0400 	mov.w	r4, #0
 8002182:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002186:	e9c2 3400 	strd	r3, r4, [r2]

		  fi20 = Ax2;
 800218a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800218e:	cb18      	ldmia	r3, {r3, r4}
 8002190:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002194:	e9c2 3400 	strd	r3, r4, [r2]
		  theta20 = Ay2;
 8002198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800219c:	cb18      	ldmia	r3, {r3, r4}
 800219e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80021a2:	e9c2 3400 	strd	r3, r4, [r2]
		  pszi20 = 0;
 80021a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	f04f 0400 	mov.w	r4, #0
 80021b2:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  if(init2 != 0u)
 80021b6:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03a      	beq.n	8002234 <main+0x107c>
	  {
		  firef -= fi0 / 200.0;
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <main+0x1078>)
 80021c4:	f507 7144 	add.w	r1, r7, #784	; 0x310
 80021c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021cc:	f7fe fb12 	bl	80007f4 <__aeabi_ddiv>
 80021d0:	4603      	mov	r3, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	f507 7122 	add.w	r1, r7, #648	; 0x288
 80021dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e0:	f7fe f826 	bl	8000230 <__aeabi_dsub>
 80021e4:	4603      	mov	r3, r0
 80021e6:	460c      	mov	r4, r1
 80021e8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80021ec:	e9c2 3400 	strd	r3, r4, [r2]
		  thetaref -= theta0 / 200.0;
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <main+0x1078>)
 80021f6:	f507 7142 	add.w	r1, r7, #776	; 0x308
 80021fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021fe:	f7fe faf9 	bl	80007f4 <__aeabi_ddiv>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461a      	mov	r2, r3
 8002208:	4623      	mov	r3, r4
 800220a:	f507 7120 	add.w	r1, r7, #640	; 0x280
 800220e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002212:	f7fe f80d 	bl	8000230 <__aeabi_dsub>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	f507 7220 	add.w	r2, r7, #640	; 0x280
 800221e:	e9c2 3400 	strd	r3, r4, [r2]
		  init2--;
 8002222:	f8b7 3274 	ldrh.w	r3, [r7, #628]	; 0x274
 8002226:	3b01      	subs	r3, #1
 8002228:	f8a7 3274 	strh.w	r3, [r7, #628]	; 0x274
 800222c:	e012      	b.n	8002254 <main+0x109c>
 800222e:	bf00      	nop
 8002230:	40690000 	.word	0x40690000
	  }
	  else
	  {
		  firef = 0;
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8002240:	e9c2 3400 	strd	r3, r4, [r2]
		  thetaref = 0;
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8002250:	e9c2 3400 	strd	r3, r4, [r2]
	  }

	  fid = Gx + Gy * sin(fi) * tan(theta) + Gz * cos(fi) * tan(theta);
 8002254:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225c:	f00a f92e 	bl	800c4bc <sin>
 8002260:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f99a 	bl	80005a0 <__aeabi_dmul>
 800226c:	4603      	mov	r3, r0
 800226e:	460c      	mov	r4, r1
 8002270:	461d      	mov	r5, r3
 8002272:	4626      	mov	r6, r4
 8002274:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002278:	e9d3 0100 	ldrd	r0, r1, [r3]
 800227c:	f00a f958 	bl	800c530 <tan>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	4628      	mov	r0, r5
 800228a:	4631      	mov	r1, r6
 800228c:	f7fe f988 	bl	80005a0 <__aeabi_dmul>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4618      	mov	r0, r3
 8002296:	4621      	mov	r1, r4
 8002298:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fd ffc8 	bl	8000234 <__adddf3>
 80022a4:	4603      	mov	r3, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	4698      	mov	r8, r3
 80022aa:	46a1      	mov	r9, r4
 80022ac:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80022b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b4:	f00a f886 	bl	800c3c4 <cos>
 80022b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f7fe f96e 	bl	80005a0 <__aeabi_dmul>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	461d      	mov	r5, r3
 80022ca:	4626      	mov	r6, r4
 80022cc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80022d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d4:	f00a f92c 	bl	800c530 <tan>
 80022d8:	4603      	mov	r3, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	4631      	mov	r1, r6
 80022e4:	f7fe f95c 	bl	80005a0 <__aeabi_dmul>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	f507 7502 	add.w	r5, r7, #520	; 0x208
 80022f0:	461a      	mov	r2, r3
 80022f2:	4623      	mov	r3, r4
 80022f4:	4640      	mov	r0, r8
 80022f6:	4649      	mov	r1, r9
 80022f8:	f7fd ff9c 	bl	8000234 <__adddf3>
 80022fc:	4603      	mov	r3, r0
 80022fe:	460c      	mov	r4, r1
 8002300:	e9c5 3400 	strd	r3, r4, [r5]
	  thetad = Gy * cos(fi) - Gz * sin(fi);
 8002304:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230c:	f00a f85a 	bl	800c3c4 <cos>
 8002310:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f942 	bl	80005a0 <__aeabi_dmul>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4698      	mov	r8, r3
 8002322:	46a1      	mov	r9, r4
 8002324:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232c:	f00a f8c6 	bl	800c4bc <sin>
 8002330:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f932 	bl	80005a0 <__aeabi_dmul>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	f507 7500 	add.w	r5, r7, #512	; 0x200
 8002344:	461a      	mov	r2, r3
 8002346:	4623      	mov	r3, r4
 8002348:	4640      	mov	r0, r8
 800234a:	4649      	mov	r1, r9
 800234c:	f7fd ff70 	bl	8000230 <__aeabi_dsub>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	e9c5 3400 	strd	r3, r4, [r5]
	  pszid = (Gy * sin(fi) / cos(theta)) + Gz * cos(fi) / cos(theta);
 8002358:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800235c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002360:	f00a f8ac 	bl	800c4bc <sin>
 8002364:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe f918 	bl	80005a0 <__aeabi_dmul>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	461d      	mov	r5, r3
 8002376:	4626      	mov	r6, r4
 8002378:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800237c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002380:	f00a f820 	bl	800c3c4 <cos>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	4628      	mov	r0, r5
 800238e:	4631      	mov	r1, r6
 8002390:	f7fe fa30 	bl	80007f4 <__aeabi_ddiv>
 8002394:	4603      	mov	r3, r0
 8002396:	460c      	mov	r4, r1
 8002398:	4698      	mov	r8, r3
 800239a:	46a1      	mov	r9, r4
 800239c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80023a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023a4:	f00a f80e 	bl	800c3c4 <cos>
 80023a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f8f6 	bl	80005a0 <__aeabi_dmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	461d      	mov	r5, r3
 80023ba:	4626      	mov	r6, r4
 80023bc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80023c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c4:	f009 fffe 	bl	800c3c4 <cos>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	461a      	mov	r2, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	4628      	mov	r0, r5
 80023d2:	4631      	mov	r1, r6
 80023d4:	f7fe fa0e 	bl	80007f4 <__aeabi_ddiv>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	f507 75fc 	add.w	r5, r7, #504	; 0x1f8
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	4640      	mov	r0, r8
 80023e6:	4649      	mov	r1, r9
 80023e8:	f7fd ff24 	bl	8000234 <__adddf3>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	e9c5 3400 	strd	r3, r4, [r5]

	  figx = figx + fid * dt + dt * 0.16 * M_PI / 180;
 80023f4:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80023f8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002404:	f7fe f8cc 	bl	80005a0 <__aeabi_dmul>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd ff0c 	bl	8000234 <__adddf3>
 800241c:	4603      	mov	r3, r0
 800241e:	460c      	mov	r4, r1
 8002420:	461d      	mov	r5, r3
 8002422:	4626      	mov	r6, r4
 8002424:	a3d0      	add	r3, pc, #832	; (adr r3, 8002768 <main+0x15b0>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f507 7156 	add.w	r1, r7, #856	; 0x358
 800242e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002432:	f7fe f8b5 	bl	80005a0 <__aeabi_dmul>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	4618      	mov	r0, r3
 800243c:	4621      	mov	r1, r4
 800243e:	a3cc      	add	r3, pc, #816	; (adr r3, 8002770 <main+0x15b8>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f8ac 	bl	80005a0 <__aeabi_dmul>
 8002448:	4603      	mov	r3, r0
 800244a:	460c      	mov	r4, r1
 800244c:	4618      	mov	r0, r3
 800244e:	4621      	mov	r1, r4
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4bce      	ldr	r3, [pc, #824]	; (8002790 <main+0x15d8>)
 8002456:	f7fe f9cd 	bl	80007f4 <__aeabi_ddiv>
 800245a:	4603      	mov	r3, r0
 800245c:	460c      	mov	r4, r1
 800245e:	461a      	mov	r2, r3
 8002460:	4623      	mov	r3, r4
 8002462:	4628      	mov	r0, r5
 8002464:	4631      	mov	r1, r6
 8002466:	f7fd fee5 	bl	8000234 <__adddf3>
 800246a:	4603      	mov	r3, r0
 800246c:	460c      	mov	r4, r1
 800246e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8002472:	e9c2 3400 	strd	r3, r4, [r2]
	  figy = figy + thetad * dt - dt * 0.03 * M_PI / 180;
 8002476:	f507 7100 	add.w	r1, r7, #512	; 0x200
 800247a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002486:	f7fe f88b 	bl	80005a0 <__aeabi_dmul>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8002496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249a:	f7fd fecb 	bl	8000234 <__adddf3>
 800249e:	4603      	mov	r3, r0
 80024a0:	460c      	mov	r4, r1
 80024a2:	461d      	mov	r5, r3
 80024a4:	4626      	mov	r6, r4
 80024a6:	a3b4      	add	r3, pc, #720	; (adr r3, 8002778 <main+0x15c0>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80024b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024b4:	f7fe f874 	bl	80005a0 <__aeabi_dmul>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4618      	mov	r0, r3
 80024be:	4621      	mov	r1, r4
 80024c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8002770 <main+0x15b8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f86b 	bl	80005a0 <__aeabi_dmul>
 80024ca:	4603      	mov	r3, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	4618      	mov	r0, r3
 80024d0:	4621      	mov	r1, r4
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4bae      	ldr	r3, [pc, #696]	; (8002790 <main+0x15d8>)
 80024d8:	f7fe f98c 	bl	80007f4 <__aeabi_ddiv>
 80024dc:	4603      	mov	r3, r0
 80024de:	460c      	mov	r4, r1
 80024e0:	461a      	mov	r2, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	4631      	mov	r1, r6
 80024e8:	f7fd fea2 	bl	8000230 <__aeabi_dsub>
 80024ec:	4603      	mov	r3, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80024f4:	e9c2 3400 	strd	r3, r4, [r2]
	  fiz = fiz + pszid * dt;
 80024f8:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80024fc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002508:	f7fe f84a 	bl	80005a0 <__aeabi_dmul>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	f507 714a 	add.w	r1, r7, #808	; 0x328
 8002518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800251c:	f7fd fe8a 	bl	8000234 <__adddf3>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8002528:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Calculate angle values*/
	  /*Pitch*/
	  fi = 0.94 * figx + 0.06 * Ax;
 800252c:	a394      	add	r3, pc, #592	; (adr r3, 8002780 <main+0x15c8>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8002536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253a:	f7fe f831 	bl	80005a0 <__aeabi_dmul>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	461d      	mov	r5, r3
 8002544:	4626      	mov	r6, r4
 8002546:	f507 7118 	add.w	r1, r7, #608	; 0x260
 800254a:	a38f      	add	r3, pc, #572	; (adr r3, 8002788 <main+0x15d0>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002554:	f7fe f824 	bl	80005a0 <__aeabi_dmul>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	4628      	mov	r0, r5
 8002562:	4631      	mov	r1, r6
 8002564:	f7fd fe66 	bl	8000234 <__adddf3>
 8002568:	4603      	mov	r3, r0
 800256a:	460c      	mov	r4, r1
 800256c:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8002570:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Roll*/
	  theta = 0.94 * figy + 0.06 * Ay;
 8002574:	a382      	add	r3, pc, #520	; (adr r3, 8002780 <main+0x15c8>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f507 7146 	add.w	r1, r7, #792	; 0x318
 800257e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002582:	f7fe f80d 	bl	80005a0 <__aeabi_dmul>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
 800258a:	461d      	mov	r5, r3
 800258c:	4626      	mov	r6, r4
 800258e:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8002592:	a37d      	add	r3, pc, #500	; (adr r3, 8002788 <main+0x15d0>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800259c:	f7fe f800 	bl	80005a0 <__aeabi_dmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	460c      	mov	r4, r1
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	4631      	mov	r1, r6
 80025ac:	f7fd fe42 	bl	8000234 <__adddf3>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80025b8:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Yaw*/
	  pszi = fiz;
 80025bc:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80025c0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80025c4:	cb18      	ldmia	r3, {r3, r4}
 80025c6:	e9c2 3400 	strd	r3, r4, [r2]

	  /*mount IMU*/
	  fid2 = Gx2 + Gy2 * sin(fi2) * tan(theta2) + Gz2 * cos(fi2) * tan(theta2);
 80025ca:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80025ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d2:	f009 ff73 	bl	800c4bc <sin>
 80025d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd ffdf 	bl	80005a0 <__aeabi_dmul>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	461d      	mov	r5, r3
 80025e8:	4626      	mov	r6, r4
 80025ea:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80025ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f2:	f009 ff9d 	bl	800c530 <tan>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	4628      	mov	r0, r5
 8002600:	4631      	mov	r1, r6
 8002602:	f7fd ffcd 	bl	80005a0 <__aeabi_dmul>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	4618      	mov	r0, r3
 800260c:	4621      	mov	r1, r4
 800260e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fe0d 	bl	8000234 <__adddf3>
 800261a:	4603      	mov	r3, r0
 800261c:	460c      	mov	r4, r1
 800261e:	4698      	mov	r8, r3
 8002620:	46a1      	mov	r9, r4
 8002622:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262a:	f009 fecb 	bl	800c3c4 <cos>
 800262e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd ffb3 	bl	80005a0 <__aeabi_dmul>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	461d      	mov	r5, r3
 8002640:	4626      	mov	r6, r4
 8002642:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264a:	f009 ff71 	bl	800c530 <tan>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	461a      	mov	r2, r3
 8002654:	4623      	mov	r3, r4
 8002656:	4628      	mov	r0, r5
 8002658:	4631      	mov	r1, r6
 800265a:	f7fd ffa1 	bl	80005a0 <__aeabi_dmul>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	f507 7584 	add.w	r5, r7, #264	; 0x108
 8002666:	461a      	mov	r2, r3
 8002668:	4623      	mov	r3, r4
 800266a:	4640      	mov	r0, r8
 800266c:	4649      	mov	r1, r9
 800266e:	f7fd fde1 	bl	8000234 <__adddf3>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	e9c5 3400 	strd	r3, r4, [r5]
	  thetad2 = Gy2 * cos(fi2) - Gz2 * sin(fi2);
 800267a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800267e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002682:	f009 fe9f 	bl	800c3c4 <cos>
 8002686:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ff87 	bl	80005a0 <__aeabi_dmul>
 8002692:	4603      	mov	r3, r0
 8002694:	460c      	mov	r4, r1
 8002696:	4698      	mov	r8, r3
 8002698:	46a1      	mov	r9, r4
 800269a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800269e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a2:	f009 ff0b 	bl	800c4bc <sin>
 80026a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fd ff77 	bl	80005a0 <__aeabi_dmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	460c      	mov	r4, r1
 80026b6:	f507 7580 	add.w	r5, r7, #256	; 0x100
 80026ba:	461a      	mov	r2, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	4640      	mov	r0, r8
 80026c0:	4649      	mov	r1, r9
 80026c2:	f7fd fdb5 	bl	8000230 <__aeabi_dsub>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	e9c5 3400 	strd	r3, r4, [r5]
	  pszid2 = (Gy2 * sin(fi2) / cos(theta2)) + Gz2 * cos(fi2) / cos(theta2);
 80026ce:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80026d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d6:	f009 fef1 	bl	800c4bc <sin>
 80026da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f7fd ff5d 	bl	80005a0 <__aeabi_dmul>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	461d      	mov	r5, r3
 80026ec:	4626      	mov	r6, r4
 80026ee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80026f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f6:	f009 fe65 	bl	800c3c4 <cos>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	4628      	mov	r0, r5
 8002704:	4631      	mov	r1, r6
 8002706:	f7fe f875 	bl	80007f4 <__aeabi_ddiv>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	4698      	mov	r8, r3
 8002710:	46a1      	mov	r9, r4
 8002712:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271a:	f009 fe53 	bl	800c3c4 <cos>
 800271e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff3b 	bl	80005a0 <__aeabi_dmul>
 800272a:	4603      	mov	r3, r0
 800272c:	460c      	mov	r4, r1
 800272e:	461d      	mov	r5, r3
 8002730:	4626      	mov	r6, r4
 8002732:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800273a:	f009 fe43 	bl	800c3c4 <cos>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	461a      	mov	r2, r3
 8002744:	4623      	mov	r3, r4
 8002746:	4628      	mov	r0, r5
 8002748:	4631      	mov	r1, r6
 800274a:	f7fe f853 	bl	80007f4 <__aeabi_ddiv>
 800274e:	4603      	mov	r3, r0
 8002750:	460c      	mov	r4, r1
 8002752:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 8002756:	461a      	mov	r2, r3
 8002758:	4623      	mov	r3, r4
 800275a:	4640      	mov	r0, r8
 800275c:	4649      	mov	r1, r9
 800275e:	f7fd fd69 	bl	8000234 <__adddf3>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	e015      	b.n	8002794 <main+0x15dc>
 8002768:	47ae147b 	.word	0x47ae147b
 800276c:	3fc47ae1 	.word	0x3fc47ae1
 8002770:	54442d18 	.word	0x54442d18
 8002774:	400921fb 	.word	0x400921fb
 8002778:	eb851eb8 	.word	0xeb851eb8
 800277c:	3f9eb851 	.word	0x3f9eb851
 8002780:	e147ae14 	.word	0xe147ae14
 8002784:	3fee147a 	.word	0x3fee147a
 8002788:	eb851eb8 	.word	0xeb851eb8
 800278c:	3faeb851 	.word	0x3faeb851
 8002790:	40668000 	.word	0x40668000
 8002794:	e9c5 3400 	strd	r3, r4, [r5]

	  figx2 = figx2 + fid2 * dt + dt * 0.07 * M_PI / 180;
 8002798:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800279c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027a8:	f7fd fefa 	bl	80005a0 <__aeabi_dmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4618      	mov	r0, r3
 80027b2:	4621      	mov	r1, r4
 80027b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fd3a 	bl	8000234 <__adddf3>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	461d      	mov	r5, r3
 80027c6:	4626      	mov	r6, r4
 80027c8:	a3c9      	add	r3, pc, #804	; (adr r3, 8002af0 <main+0x1938>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f507 7156 	add.w	r1, r7, #856	; 0x358
 80027d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027d6:	f7fd fee3 	bl	80005a0 <__aeabi_dmul>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	4618      	mov	r0, r3
 80027e0:	4621      	mov	r1, r4
 80027e2:	a3c5      	add	r3, pc, #788	; (adr r3, 8002af8 <main+0x1940>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fd feda 	bl	80005a0 <__aeabi_dmul>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	4618      	mov	r0, r3
 80027f2:	4621      	mov	r1, r4
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	4bcd      	ldr	r3, [pc, #820]	; (8002b30 <main+0x1978>)
 80027fa:	f7fd fffb 	bl	80007f4 <__aeabi_ddiv>
 80027fe:	4603      	mov	r3, r0
 8002800:	460c      	mov	r4, r1
 8002802:	461a      	mov	r2, r3
 8002804:	4623      	mov	r3, r4
 8002806:	4628      	mov	r0, r5
 8002808:	4631      	mov	r1, r6
 800280a:	f7fd fd13 	bl	8000234 <__adddf3>
 800280e:	4603      	mov	r3, r0
 8002810:	460c      	mov	r4, r1
 8002812:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8002816:	e9c2 3400 	strd	r3, r4, [r2]
	  figy2 = figy2 + thetad2 * dt + dt * 0.03 * M_PI / 180;
 800281a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800281e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800282a:	f7fd feb9 	bl	80005a0 <__aeabi_dmul>
 800282e:	4603      	mov	r3, r0
 8002830:	460c      	mov	r4, r1
 8002832:	4618      	mov	r0, r3
 8002834:	4621      	mov	r1, r4
 8002836:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fcf9 	bl	8000234 <__adddf3>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	461d      	mov	r5, r3
 8002848:	4626      	mov	r6, r4
 800284a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002b00 <main+0x1948>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8002854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002858:	f7fd fea2 	bl	80005a0 <__aeabi_dmul>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	4618      	mov	r0, r3
 8002862:	4621      	mov	r1, r4
 8002864:	a3a4      	add	r3, pc, #656	; (adr r3, 8002af8 <main+0x1940>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	f7fd fe99 	bl	80005a0 <__aeabi_dmul>
 800286e:	4603      	mov	r3, r0
 8002870:	460c      	mov	r4, r1
 8002872:	4618      	mov	r0, r3
 8002874:	4621      	mov	r1, r4
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4bad      	ldr	r3, [pc, #692]	; (8002b30 <main+0x1978>)
 800287c:	f7fd ffba 	bl	80007f4 <__aeabi_ddiv>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	4628      	mov	r0, r5
 800288a:	4631      	mov	r1, r6
 800288c:	f7fd fcd2 	bl	8000234 <__adddf3>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002898:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Calculate angle values*/
	  /*Pitch*/
	  fi2 = 0.94 * figx2 + 0.06 * Ax2;
 800289c:	a39a      	add	r3, pc, #616	; (adr r3, 8002b08 <main+0x1950>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80028a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028aa:	f7fd fe79 	bl	80005a0 <__aeabi_dmul>
 80028ae:	4603      	mov	r3, r0
 80028b0:	460c      	mov	r4, r1
 80028b2:	461d      	mov	r5, r3
 80028b4:	4626      	mov	r6, r4
 80028b6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80028ba:	a395      	add	r3, pc, #596	; (adr r3, 8002b10 <main+0x1958>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028c4:	f7fd fe6c 	bl	80005a0 <__aeabi_dmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	461a      	mov	r2, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	4631      	mov	r1, r6
 80028d4:	f7fd fcae 	bl	8000234 <__adddf3>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80028e0:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Roll*/
	  theta2 = 0.94 * figy2 + 0.06 * Ay2;
 80028e4:	a388      	add	r3, pc, #544	; (adr r3, 8002b08 <main+0x1950>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 80028ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f2:	f7fd fe55 	bl	80005a0 <__aeabi_dmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	461d      	mov	r5, r3
 80028fc:	4626      	mov	r6, r4
 80028fe:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8002902:	a383      	add	r3, pc, #524	; (adr r3, 8002b10 <main+0x1958>)
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290c:	f7fd fe48 	bl	80005a0 <__aeabi_dmul>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	461a      	mov	r2, r3
 8002916:	4623      	mov	r3, r4
 8002918:	4628      	mov	r0, r5
 800291a:	4631      	mov	r1, r6
 800291c:	f7fd fc8a 	bl	8000234 <__adddf3>
 8002920:	4603      	mov	r3, r0
 8002922:	460c      	mov	r4, r1
 8002924:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8002928:	e9c2 3400 	strd	r3, r4, [r2]
	  /*Yaw*/
	  pszi2 += pszid2 * dt;
 800292c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8002930:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800293c:	f7fd fe30 	bl	80005a0 <__aeabi_dmul>
 8002940:	4603      	mov	r3, r0
 8002942:	460c      	mov	r4, r1
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 800294c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002950:	f7fd fc70 	bl	8000234 <__adddf3>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 800295c:	e9c2 3400 	strd	r3, r4, [r2]

	  /*Motor mechanical angles with respect to phase a*/
	  fim = fi - fi0 - fi2 + fi20;
 8002960:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f507 714e 	add.w	r1, r7, #824	; 0x338
 800296c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002970:	f7fd fc5e 	bl	8000230 <__aeabi_dsub>
 8002974:	4603      	mov	r3, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4618      	mov	r0, r3
 800297a:	4621      	mov	r1, r4
 800297c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fc54 	bl	8000230 <__aeabi_dsub>
 8002988:	4603      	mov	r3, r0
 800298a:	460c      	mov	r4, r1
 800298c:	f107 05f0 	add.w	r5, r7, #240	; 0xf0
 8002990:	461a      	mov	r2, r3
 8002992:	4623      	mov	r3, r4
 8002994:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800299c:	f7fd fc4a 	bl	8000234 <__adddf3>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	e9c5 3400 	strd	r3, r4, [r5]
	  thetam = theta - theta0 - theta2 + theta20;
 80029a8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f507 714c 	add.w	r1, r7, #816	; 0x330
 80029b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029b8:	f7fd fc3a 	bl	8000230 <__aeabi_dsub>
 80029bc:	4603      	mov	r3, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	4618      	mov	r0, r3
 80029c2:	4621      	mov	r1, r4
 80029c4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fc30 	bl	8000230 <__aeabi_dsub>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	f107 05e8 	add.w	r5, r7, #232	; 0xe8
 80029d8:	461a      	mov	r2, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	f507 7124 	add.w	r1, r7, #656	; 0x290
 80029e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e4:	f7fd fc26 	bl	8000234 <__adddf3>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	e9c5 3400 	strd	r3, r4, [r5]
	  pszim = pszi - pszi2;
 80029f0:	f107 05e0 	add.w	r5, r7, #224	; 0xe0
 80029f4:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80029f8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a04:	f7fd fc14 	bl	8000230 <__aeabi_dsub>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	e9c5 3400 	strd	r3, r4, [r5]


	  /*Pull YAW rotor to  a init position*/
	  fia = pszim * P;
 8002a10:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
 8002a14:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <main+0x197c>)
 8002a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a22:	f7fd fdbd 	bl	80005a0 <__aeabi_dmul>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	e9c5 3400 	strd	r3, r4, [r5]
	  fib = pszim * P - (2 * M_PI / 3);
 8002a2e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <main+0x197c>)
 8002a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a3c:	f7fd fdb0 	bl	80005a0 <__aeabi_dmul>
 8002a40:	4603      	mov	r3, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	4618      	mov	r0, r3
 8002a46:	4621      	mov	r1, r4
 8002a48:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8002a4c:	a332      	add	r3, pc, #200	; (adr r3, 8002b18 <main+0x1960>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fbed 	bl	8000230 <__aeabi_dsub>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	e9c5 3400 	strd	r3, r4, [r5]
	  fic = pszim * P - (4 * M_PI / 3);
 8002a5e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <main+0x197c>)
 8002a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a6c:	f7fd fd98 	bl	80005a0 <__aeabi_dmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	460c      	mov	r4, r1
 8002a74:	4618      	mov	r0, r3
 8002a76:	4621      	mov	r1, r4
 8002a78:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8002a7c:	a328      	add	r3, pc, #160	; (adr r3, 8002b20 <main+0x1968>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fbd5 	bl	8000230 <__aeabi_dsub>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	e9c5 3400 	strd	r3, r4, [r5]

	  epszi = psziref - pszi;
 8002a8e:	f507 75d0 	add.w	r5, r7, #416	; 0x1a0
 8002a92:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f507 711e 	add.w	r1, r7, #632	; 0x278
 8002a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aa2:	f7fd fbc5 	bl	8000230 <__aeabi_dsub>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	e9c5 3400 	strd	r3, r4, [r5]
	  a = P1 * epszi * (-1 * sinVal(fia) / 1.0);
 8002aae:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002ab2:	a31d      	add	r3, pc, #116	; (adr r3, 8002b28 <main+0x1970>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002abc:	f7fd fd70 	bl	80005a0 <__aeabi_dmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	4626      	mov	r6, r4
 8002ac8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad0:	f7fe fabe 	bl	8001050 <sinVal>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002adc:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ae4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002ae8:	4628      	mov	r0, r5
 8002aea:	4631      	mov	r1, r6
 8002aec:	e024      	b.n	8002b38 <main+0x1980>
 8002aee:	bf00      	nop
 8002af0:	1eb851ec 	.word	0x1eb851ec
 8002af4:	3fb1eb85 	.word	0x3fb1eb85
 8002af8:	54442d18 	.word	0x54442d18
 8002afc:	400921fb 	.word	0x400921fb
 8002b00:	eb851eb8 	.word	0xeb851eb8
 8002b04:	3f9eb851 	.word	0x3f9eb851
 8002b08:	e147ae14 	.word	0xe147ae14
 8002b0c:	3fee147a 	.word	0x3fee147a
 8002b10:	eb851eb8 	.word	0xeb851eb8
 8002b14:	3faeb851 	.word	0x3faeb851
 8002b18:	382d7365 	.word	0x382d7365
 8002b1c:	4000c152 	.word	0x4000c152
 8002b20:	382d7365 	.word	0x382d7365
 8002b24:	4010c152 	.word	0x4010c152
 8002b28:	66666666 	.word	0x66666666
 8002b2c:	40442666 	.word	0x40442666
 8002b30:	40668000 	.word	0x40668000
 8002b34:	401c0000 	.word	0x401c0000
 8002b38:	f7fd fd32 	bl	80005a0 <__aeabi_dmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	460c      	mov	r4, r1
 8002b40:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8002b44:	e9c2 3400 	strd	r3, r4, [r2]
	  b = P1 * epszi * (-1 * sinVal(fib) / 1.0);
 8002b48:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002b4c:	a3be      	add	r3, pc, #760	; (adr r3, 8002e48 <main+0x1c90>)
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b56:	f7fd fd23 	bl	80005a0 <__aeabi_dmul>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	461d      	mov	r5, r3
 8002b60:	4626      	mov	r6, r4
 8002b62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6a:	f7fe fa71 	bl	8001050 <sinVal>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460c      	mov	r4, r1
 8002b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b74:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002b78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b7a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002b7e:	4628      	mov	r0, r5
 8002b80:	4631      	mov	r1, r6
 8002b82:	f7fd fd0d 	bl	80005a0 <__aeabi_dmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002b8e:	e9c2 3400 	strd	r3, r4, [r2]
	  c = P1 * epszi * (-1 * sinVal(fic) / 1.0);
 8002b92:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002b96:	a3ac      	add	r3, pc, #688	; (adr r3, 8002e48 <main+0x1c90>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ba0:	f7fd fcfe 	bl	80005a0 <__aeabi_dmul>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	461d      	mov	r5, r3
 8002baa:	4626      	mov	r6, r4
 8002bac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb4:	f7fe fa4c 	bl	8001050 <sinVal>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	469a      	mov	sl, r3
 8002bbe:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8002bc2:	4652      	mov	r2, sl
 8002bc4:	465b      	mov	r3, fp
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	4631      	mov	r1, r6
 8002bca:	f7fd fce9 	bl	80005a0 <__aeabi_dmul>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002bd6:	e9c2 3400 	strd	r3, r4, [r2]
	  m1 = fmax(fabs(a), fmax(fabs(b),fabs(c)));
 8002bda:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002bde:	673b      	str	r3, [r7, #112]	; 0x70
 8002be0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be8:	677b      	str	r3, [r7, #116]	; 0x74
 8002bea:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bf0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bfa:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002c00:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002c04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c08:	667b      	str	r3, [r7, #100]	; 0x64
 8002c0a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c12:	f009 fc11 	bl	800c438 <fmax>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002c1e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c22:	f009 fc09 	bl	800c438 <fmax>
 8002c26:	e9c4 0100 	strd	r0, r1, [r4]
	  if(m1 > SAT1)
 8002c2a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	4b93      	ldr	r3, [pc, #588]	; (8002e80 <main+0x1cc8>)
 8002c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c38:	f7fd ff42 	bl	8000ac0 <__aeabi_dcmpgt>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03e      	beq.n	8002cc0 <main+0x1b08>
	  {
		  m1 = SAT1 / m1;
 8002c42:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8002c46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	498b      	ldr	r1, [pc, #556]	; (8002e80 <main+0x1cc8>)
 8002c54:	f7fd fdce 	bl	80007f4 <__aeabi_ddiv>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	e9c5 3400 	strd	r3, r4, [r5]
		  a = m1 * a;
 8002c60:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8002c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c70:	f7fd fc96 	bl	80005a0 <__aeabi_dmul>
 8002c74:	4603      	mov	r3, r0
 8002c76:	460c      	mov	r4, r1
 8002c78:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8002c7c:	e9c2 3400 	strd	r3, r4, [r2]
		  b = m1 * b;
 8002c80:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f507 7152 	add.w	r1, r7, #840	; 0x348
 8002c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c90:	f7fd fc86 	bl	80005a0 <__aeabi_dmul>
 8002c94:	4603      	mov	r3, r0
 8002c96:	460c      	mov	r4, r1
 8002c98:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002c9c:	e9c2 3400 	strd	r3, r4, [r2]
		  c = m1 * c;
 8002ca0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f507 7150 	add.w	r1, r7, #832	; 0x340
 8002cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cb0:	f7fd fc76 	bl	80005a0 <__aeabi_dmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002cbc:	e9c2 3400 	strd	r3, r4, [r2]
	  //TIM2->CCR2 = b > 0 ? (uint32_t)b : 0;
	 // TIM4->CCR4 = c > 0 ? (uint32_t)c : 0;
	  /*-----------------------------------*/

	  /*-----------PITCH-----------*/
	  fia = thetam * P;
 8002cc0:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
 8002cc4:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <main+0x1ccc>)
 8002cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd2:	f7fd fc65 	bl	80005a0 <__aeabi_dmul>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	e9c5 3400 	strd	r3, r4, [r5]
	  fib = thetam * P - (2 * M_PI / 3);
 8002cde:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <main+0x1ccc>)
 8002ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cec:	f7fd fc58 	bl	80005a0 <__aeabi_dmul>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8002cfc:	a354      	add	r3, pc, #336	; (adr r3, 8002e50 <main+0x1c98>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd fa95 	bl	8000230 <__aeabi_dsub>
 8002d06:	4603      	mov	r3, r0
 8002d08:	460c      	mov	r4, r1
 8002d0a:	e9c5 3400 	strd	r3, r4, [r5]
	  fic = thetam * P - (4 * M_PI / 3);
 8002d0e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <main+0x1ccc>)
 8002d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d1c:	f7fd fc40 	bl	80005a0 <__aeabi_dmul>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4618      	mov	r0, r3
 8002d26:	4621      	mov	r1, r4
 8002d28:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8002d2c:	a34a      	add	r3, pc, #296	; (adr r3, 8002e58 <main+0x1ca0>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fa7d 	bl	8000230 <__aeabi_dsub>
 8002d36:	4603      	mov	r3, r0
 8002d38:	460c      	mov	r4, r1
 8002d3a:	e9c5 3400 	strd	r3, r4, [r5]

	  etheta = thetaref - theta;
 8002d3e:	f507 75cc 	add.w	r5, r7, #408	; 0x198
 8002d42:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	f507 7120 	add.w	r1, r7, #640	; 0x280
 8002d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d52:	f7fd fa6d 	bl	8000230 <__aeabi_dsub>
 8002d56:	4603      	mov	r3, r0
 8002d58:	460c      	mov	r4, r1
 8002d5a:	e9c5 3400 	strd	r3, r4, [r5]
	  ek2 = etheta;
 8002d5e:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002d62:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002d66:	cb18      	ldmia	r3, {r3, r4}
 8002d68:	e9c2 3400 	strd	r3, r4, [r2]
	  dk2 = (1 / (TS + TDV2)) * (TD2 * ek2 - TD2 * ek12 + TDV2 * dk12);
 8002d6c:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8002d70:	a33b      	add	r3, pc, #236	; (adr r3, 8002e60 <main+0x1ca8>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d7a:	f7fd fc11 	bl	80005a0 <__aeabi_dmul>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	461d      	mov	r5, r3
 8002d84:	4626      	mov	r6, r4
 8002d86:	a336      	add	r3, pc, #216	; (adr r3, 8002e60 <main+0x1ca8>)
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f507 713e 	add.w	r1, r7, #760	; 0x2f8
 8002d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d94:	f7fd fc04 	bl	80005a0 <__aeabi_dmul>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4623      	mov	r3, r4
 8002da0:	4628      	mov	r0, r5
 8002da2:	4631      	mov	r1, r6
 8002da4:	f7fd fa44 	bl	8000230 <__aeabi_dsub>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	461d      	mov	r5, r3
 8002dae:	4626      	mov	r6, r4
 8002db0:	a32d      	add	r3, pc, #180	; (adr r3, 8002e68 <main+0x1cb0>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8002dba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dbe:	f7fd fbef 	bl	80005a0 <__aeabi_dmul>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4623      	mov	r3, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	4631      	mov	r1, r6
 8002dce:	f7fd fa31 	bl	8000234 <__adddf3>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4621      	mov	r1, r4
 8002dda:	f507 75f0 	add.w	r5, r7, #480	; 0x1e0
 8002dde:	a324      	add	r3, pc, #144	; (adr r3, 8002e70 <main+0x1cb8>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fbdc 	bl	80005a0 <__aeabi_dmul>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	e9c5 3400 	strd	r3, r4, [r5]
	  dk12 = dk2;
 8002df0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8002df4:	cb18      	ldmia	r3, {r3, r4}
 8002df6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8002dfa:	e9c2 3400 	strd	r3, r4, [r2]
	  if(!sat2)
 8002dfe:	f897 32ef 	ldrb.w	r3, [r7, #751]	; 0x2ef
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d140      	bne.n	8002e88 <main+0x1cd0>
	  {
		  ik2 = (TS / TI2) * ek2 + ik12;
 8002e06:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8002e0a:	a31b      	add	r3, pc, #108	; (adr r3, 8002e78 <main+0x1cc0>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e14:	f7fd fbc4 	bl	80005a0 <__aeabi_dmul>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	f507 75e8 	add.w	r5, r7, #464	; 0x1d0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	f507 7140 	add.w	r1, r7, #768	; 0x300
 8002e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e2c:	f7fd fa02 	bl	8000234 <__adddf3>
 8002e30:	4603      	mov	r3, r0
 8002e32:	460c      	mov	r4, r1
 8002e34:	e9c5 3400 	strd	r3, r4, [r5]
		  ik12 = ik2;
 8002e38:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002e3c:	cb18      	ldmia	r3, {r3, r4}
 8002e3e:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8002e42:	e9c2 3400 	strd	r3, r4, [r2]
 8002e46:	e01f      	b.n	8002e88 <main+0x1cd0>
 8002e48:	66666666 	.word	0x66666666
 8002e4c:	40442666 	.word	0x40442666
 8002e50:	382d7365 	.word	0x382d7365
 8002e54:	4000c152 	.word	0x4000c152
 8002e58:	382d7365 	.word	0x382d7365
 8002e5c:	4010c152 	.word	0x4010c152
 8002e60:	1fe01d18 	.word	0x1fe01d18
 8002e64:	3f909ba6 	.word	0x3f909ba6
 8002e68:	663361c0 	.word	0x663361c0
 8002e6c:	3f5a92a3 	.word	0x3f5a92a3
 8002e70:	8d856113 	.word	0x8d856113
 8002e74:	4077d680 	.word	0x4077d680
 8002e78:	af1002ae 	.word	0xaf1002ae
 8002e7c:	3efbedea 	.word	0x3efbedea
 8002e80:	4095e000 	.word	0x4095e000
 8002e84:	401c0000 	.word	0x401c0000
	  }
#ifdef PID
	  uk2 = ek2 * P2 + P2 * dk2 + P2 * ik2 ;

#else
	  uk2 = ek2 * P2 + P2 * dk2;
 8002e88:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8002e8c:	a39c      	add	r3, pc, #624	; (adr r3, 8003100 <main+0x1f48>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e96:	f7fd fb83 	bl	80005a0 <__aeabi_dmul>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	4698      	mov	r8, r3
 8002ea0:	46a1      	mov	r9, r4
 8002ea2:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8002ea6:	a396      	add	r3, pc, #600	; (adr r3, 8003100 <main+0x1f48>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eb0:	f7fd fb76 	bl	80005a0 <__aeabi_dmul>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	f507 75f4 	add.w	r5, r7, #488	; 0x1e8
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd f9b6 	bl	8000234 <__adddf3>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	e9c5 3400 	strd	r3, r4, [r5]
#endif
	  ek12 = ek2;
 8002ed0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002ed4:	cb18      	ldmia	r3, {r3, r4}
 8002ed6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8002eda:	e9c2 3400 	strd	r3, r4, [r2]

	  a = uk2 * (-1 * sinVal(fia) / 1.0);
 8002ede:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ee6:	f7fe f8b3 	bl	8001050 <sinVal>
 8002eea:	4603      	mov	r3, r0
 8002eec:	460c      	mov	r4, r1
 8002eee:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ef0:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ef6:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002efa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f02:	f7fd fb4d 	bl	80005a0 <__aeabi_dmul>
 8002f06:	4603      	mov	r3, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8002f0e:	e9c2 3400 	strd	r3, r4, [r2]
	  b = uk2 * (-1 * sinVal(fib) / 1.0);
 8002f12:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1a:	f7fe f899 	bl	8001050 <sinVal>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	460c      	mov	r4, r1
 8002f22:	653b      	str	r3, [r7, #80]	; 0x50
 8002f24:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002f28:	657b      	str	r3, [r7, #84]	; 0x54
 8002f2a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002f2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f36:	f7fd fb33 	bl	80005a0 <__aeabi_dmul>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8002f42:	e9c2 3400 	strd	r3, r4, [r2]
	  c = uk2 * (-1 * sinVal(fic) / 1.0);
 8002f46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4e:	f7fe f87f 	bl	8001050 <sinVal>
 8002f52:	4603      	mov	r3, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f58:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f5e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6a:	f7fd fb19 	bl	80005a0 <__aeabi_dmul>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8002f76:	e9c2 3400 	strd	r3, r4, [r2]
	  m1 = fmax(fabs(a), fmax(fabs(b),fabs(c)));
 8002f7a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f80:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8002f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8002f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f90:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8002f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f9a:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002fa0:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8002faa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002fb2:	f009 fa41 	bl	800c438 <fmax>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002fbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002fc2:	f009 fa39 	bl	800c438 <fmax>
 8002fc6:	e9c4 0100 	strd	r0, r1, [r4]
	  if(m1 > SAT2)
 8002fca:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8002fce:	a34e      	add	r3, pc, #312	; (adr r3, 8003108 <main+0x1f50>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fd8:	f7fd fd72 	bl	8000ac0 <__aeabi_dcmpgt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d042      	beq.n	8003068 <main+0x1eb0>
	  {
		  m1 = SAT2 / m1;
 8002fe2:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8002fe6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	a146      	add	r1, pc, #280	; (adr r1, 8003108 <main+0x1f50>)
 8002ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ff4:	f7fd fbfe 	bl	80007f4 <__aeabi_ddiv>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	e9c5 3400 	strd	r3, r4, [r5]
		  a = m1 * a;
 8003000:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f507 7154 	add.w	r1, r7, #848	; 0x350
 800300c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003010:	f7fd fac6 	bl	80005a0 <__aeabi_dmul>
 8003014:	4603      	mov	r3, r0
 8003016:	460c      	mov	r4, r1
 8003018:	f507 7254 	add.w	r2, r7, #848	; 0x350
 800301c:	e9c2 3400 	strd	r3, r4, [r2]
		  b = m1 * b;
 8003020:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f507 7152 	add.w	r1, r7, #840	; 0x348
 800302c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003030:	f7fd fab6 	bl	80005a0 <__aeabi_dmul>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	f507 7252 	add.w	r2, r7, #840	; 0x348
 800303c:	e9c2 3400 	strd	r3, r4, [r2]
		  c = m1 * c;
 8003040:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f507 7150 	add.w	r1, r7, #832	; 0x340
 800304c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003050:	f7fd faa6 	bl	80005a0 <__aeabi_dmul>
 8003054:	4603      	mov	r3, r0
 8003056:	460c      	mov	r4, r1
 8003058:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800305c:	e9c2 3400 	strd	r3, r4, [r2]
		  sat2 = 1u;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
 8003066:	e002      	b.n	800306e <main+0x1eb6>
	  }
	  else
	  {
		  sat2 = 0u;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
	  }

	  TIM2->CCR3 = a > 0 ? (uint32_t)a : 0;
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	f507 7154 	add.w	r1, r7, #848	; 0x350
 800307a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800307e:	f7fd fd1f 	bl	8000ac0 <__aeabi_dcmpgt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d007      	beq.n	8003098 <main+0x1ee0>
 8003088:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800308c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003090:	f7fd fd5e 	bl	8000b50 <__aeabi_d2uiz>
 8003094:	4602      	mov	r2, r0
 8003096:	e000      	b.n	800309a <main+0x1ee2>
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM2->CCR4 = b > 0 ? (uint32_t)b : 0;
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f507 7152 	add.w	r1, r7, #840	; 0x348
 80030ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030b0:	f7fd fd06 	bl	8000ac0 <__aeabi_dcmpgt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <main+0x1f12>
 80030ba:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80030be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c2:	f7fd fd45 	bl	8000b50 <__aeabi_d2uiz>
 80030c6:	4602      	mov	r2, r0
 80030c8:	e000      	b.n	80030cc <main+0x1f14>
 80030ca:	2200      	movs	r2, #0
 80030cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
	  TIM3->CCR1 = c > 0 ? (uint32_t)c : 0;
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f507 7150 	add.w	r1, r7, #832	; 0x340
 80030de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e2:	f7fd fced 	bl	8000ac0 <__aeabi_dcmpgt>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d011      	beq.n	8003110 <main+0x1f58>
 80030ec:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80030f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f4:	f7fd fd2c 	bl	8000b50 <__aeabi_d2uiz>
 80030f8:	4602      	mov	r2, r0
 80030fa:	e00a      	b.n	8003112 <main+0x1f5a>
 80030fc:	f3af 8000 	nop.w
 8003100:	b6ae7d56 	.word	0xb6ae7d56
 8003104:	40506762 	.word	0x40506762
 8003108:	00000000 	.word	0x00000000
 800310c:	40a06800 	.word	0x40a06800
 8003110:	2200      	movs	r2, #0
 8003112:	4bc3      	ldr	r3, [pc, #780]	; (8003420 <main+0x2268>)
 8003114:	635a      	str	r2, [r3, #52]	; 0x34
	  /*-------------------------------------*/


	  /*----------ROLL-------*/
	  fia = fim * P;
 8003116:	f107 05d8 	add.w	r5, r7, #216	; 0xd8
 800311a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	4bc0      	ldr	r3, [pc, #768]	; (8003424 <main+0x226c>)
 8003124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003128:	f7fd fa3a 	bl	80005a0 <__aeabi_dmul>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
 8003130:	e9c5 3400 	strd	r3, r4, [r5]
	  fib = fim * P - (2 * M_PI / 3);
 8003134:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	4bb9      	ldr	r3, [pc, #740]	; (8003424 <main+0x226c>)
 800313e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003142:	f7fd fa2d 	bl	80005a0 <__aeabi_dmul>
 8003146:	4603      	mov	r3, r0
 8003148:	460c      	mov	r4, r1
 800314a:	4618      	mov	r0, r3
 800314c:	4621      	mov	r1, r4
 800314e:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8003152:	a3a5      	add	r3, pc, #660	; (adr r3, 80033e8 <main+0x2230>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd f86a 	bl	8000230 <__aeabi_dsub>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	e9c5 3400 	strd	r3, r4, [r5]
	  fic = fim * P - (4 * M_PI / 3);
 8003164:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	4bad      	ldr	r3, [pc, #692]	; (8003424 <main+0x226c>)
 800316e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003172:	f7fd fa15 	bl	80005a0 <__aeabi_dmul>
 8003176:	4603      	mov	r3, r0
 8003178:	460c      	mov	r4, r1
 800317a:	4618      	mov	r0, r3
 800317c:	4621      	mov	r1, r4
 800317e:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
 8003182:	a39b      	add	r3, pc, #620	; (adr r3, 80033f0 <main+0x2238>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd f852 	bl	8000230 <__aeabi_dsub>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	e9c5 3400 	strd	r3, r4, [r5]

	  efi = firef - fi;
 8003194:	f507 75c8 	add.w	r5, r7, #400	; 0x190
 8003198:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f507 7122 	add.w	r1, r7, #648	; 0x288
 80031a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a8:	f7fd f842 	bl	8000230 <__aeabi_dsub>
 80031ac:	4603      	mov	r3, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	e9c5 3400 	strd	r3, r4, [r5]

	  ek3 = efi;
 80031b4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80031b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80031bc:	cb18      	ldmia	r3, {r3, r4}
 80031be:	e9c2 3400 	strd	r3, r4, [r2]
	  dk3 = (1 / (TS + TDV3)) * (TD3 * ek3 - TD3 * ek13 + TDV3 * dk13);
 80031c2:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80031c6:	a38c      	add	r3, pc, #560	; (adr r3, 80033f8 <main+0x2240>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031d0:	f7fd f9e6 	bl	80005a0 <__aeabi_dmul>
 80031d4:	4603      	mov	r3, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	461d      	mov	r5, r3
 80031da:	4626      	mov	r6, r4
 80031dc:	a386      	add	r3, pc, #536	; (adr r3, 80033f8 <main+0x2240>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 80031e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ea:	f7fd f9d9 	bl	80005a0 <__aeabi_dmul>
 80031ee:	4603      	mov	r3, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	461a      	mov	r2, r3
 80031f4:	4623      	mov	r3, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	4631      	mov	r1, r6
 80031fa:	f7fd f819 	bl	8000230 <__aeabi_dsub>
 80031fe:	4603      	mov	r3, r0
 8003200:	460c      	mov	r4, r1
 8003202:	461d      	mov	r5, r3
 8003204:	4626      	mov	r6, r4
 8003206:	a37e      	add	r3, pc, #504	; (adr r3, 8003400 <main+0x2248>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8003210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003214:	f7fd f9c4 	bl	80005a0 <__aeabi_dmul>
 8003218:	4603      	mov	r3, r0
 800321a:	460c      	mov	r4, r1
 800321c:	461a      	mov	r2, r3
 800321e:	4623      	mov	r3, r4
 8003220:	4628      	mov	r0, r5
 8003222:	4631      	mov	r1, r6
 8003224:	f7fd f806 	bl	8000234 <__adddf3>
 8003228:	4603      	mov	r3, r0
 800322a:	460c      	mov	r4, r1
 800322c:	4618      	mov	r0, r3
 800322e:	4621      	mov	r1, r4
 8003230:	f507 75e0 	add.w	r5, r7, #448	; 0x1c0
 8003234:	a374      	add	r3, pc, #464	; (adr r3, 8003408 <main+0x2250>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	f7fd f9b1 	bl	80005a0 <__aeabi_dmul>
 800323e:	4603      	mov	r3, r0
 8003240:	460c      	mov	r4, r1
 8003242:	e9c5 3400 	strd	r3, r4, [r5]
	  dk13 = dk3;
 8003246:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800324a:	cb18      	ldmia	r3, {r3, r4}
 800324c:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8003250:	e9c2 3400 	strd	r3, r4, [r2]
	  if(!sat3)
 8003254:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11f      	bne.n	800329c <main+0x20e4>
	  {
		  ik3 = (TS / TI3) * ek3 + ik13;
 800325c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003260:	a36b      	add	r3, pc, #428	; (adr r3, 8003410 <main+0x2258>)
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800326a:	f7fd f999 	bl	80005a0 <__aeabi_dmul>
 800326e:	4603      	mov	r3, r0
 8003270:	460c      	mov	r4, r1
 8003272:	f507 75d8 	add.w	r5, r7, #432	; 0x1b0
 8003276:	461a      	mov	r2, r3
 8003278:	4623      	mov	r3, r4
 800327a:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800327e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003282:	f7fc ffd7 	bl	8000234 <__adddf3>
 8003286:	4603      	mov	r3, r0
 8003288:	460c      	mov	r4, r1
 800328a:	e9c5 3400 	strd	r3, r4, [r5]
		  ik13 = ik3;
 800328e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003292:	cb18      	ldmia	r3, {r3, r4}
 8003294:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8003298:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#ifdef PID
	  uk3 = ek3 * P3 + P3 * dk3 + P3 * ik3 ;
#else
	  uk3 = ek3 * P3 + P3 * dk3;
 800329c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80032a0:	a35d      	add	r3, pc, #372	; (adr r3, 8003418 <main+0x2260>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032aa:	f7fd f979 	bl	80005a0 <__aeabi_dmul>
 80032ae:	4603      	mov	r3, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	4698      	mov	r8, r3
 80032b4:	46a1      	mov	r9, r4
 80032b6:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 80032ba:	a357      	add	r3, pc, #348	; (adr r3, 8003418 <main+0x2260>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032c4:	f7fd f96c 	bl	80005a0 <__aeabi_dmul>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	f507 75e4 	add.w	r5, r7, #456	; 0x1c8
 80032d0:	461a      	mov	r2, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	4640      	mov	r0, r8
 80032d6:	4649      	mov	r1, r9
 80032d8:	f7fc ffac 	bl	8000234 <__adddf3>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	e9c5 3400 	strd	r3, r4, [r5]
#endif
	  ek13 = ek3;
 80032e4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80032e8:	cb18      	ldmia	r3, {r3, r4}
 80032ea:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80032ee:	e9c2 3400 	strd	r3, r4, [r2]

	  a = uk3 * (-1 * sinVal(fia) / 1.0);
 80032f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80032f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032fa:	f7fd fea9 	bl	8001050 <sinVal>
 80032fe:	4603      	mov	r3, r0
 8003300:	460c      	mov	r4, r1
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
 8003304:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330a:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 800330e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003316:	f7fd f943 	bl	80005a0 <__aeabi_dmul>
 800331a:	4603      	mov	r3, r0
 800331c:	460c      	mov	r4, r1
 800331e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8003322:	e9c2 3400 	strd	r3, r4, [r2]
	  b = uk3 * (-1 * sinVal(fib) / 1.0);
 8003326:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800332a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800332e:	f7fd fe8f 	bl	8001050 <sinVal>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8003342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800334a:	f7fd f929 	bl	80005a0 <__aeabi_dmul>
 800334e:	4603      	mov	r3, r0
 8003350:	460c      	mov	r4, r1
 8003352:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8003356:	e9c2 3400 	strd	r3, r4, [r2]
	  c = uk3 * (-1 * sinVal(fic) / 1.0);
 800335a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800335e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003362:	f7fd fe75 	bl	8001050 <sinVal>
 8003366:	4603      	mov	r3, r0
 8003368:	460c      	mov	r4, r1
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8003376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800337e:	f7fd f90f 	bl	80005a0 <__aeabi_dmul>
 8003382:	4603      	mov	r3, r0
 8003384:	460c      	mov	r4, r1
 8003386:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800338a:	e9c2 3400 	strd	r3, r4, [r2]
	  m1 = fmax(fabs(a), fmax(fabs(b),fabs(c)));
 800338e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8003398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80033b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c6:	f009 f837 	bl	800c438 <fmax>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 80033d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033d6:	f009 f82f 	bl	800c438 <fmax>
 80033da:	e9c4 0100 	strd	r0, r1, [r4]
	  if(m1 > SAT3)
 80033de:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 80033e2:	e021      	b.n	8003428 <main+0x2270>
 80033e4:	f3af 8000 	nop.w
 80033e8:	382d7365 	.word	0x382d7365
 80033ec:	4000c152 	.word	0x4000c152
 80033f0:	382d7365 	.word	0x382d7365
 80033f4:	4010c152 	.word	0x4010c152
 80033f8:	f601899d 	.word	0xf601899d
 80033fc:	3f5899c0 	.word	0x3f5899c0
 8003400:	f8013ae4 	.word	0xf8013ae4
 8003404:	3f23ae33 	.word	0x3f23ae33
 8003408:	13624181 	.word	0x13624181
 800340c:	408b2b9d 	.word	0x408b2b9d
 8003410:	5f5d3e11 	.word	0x5f5d3e11
 8003414:	3f01519e 	.word	0x3f01519e
 8003418:	66666666 	.word	0x66666666
 800341c:	4040a666 	.word	0x4040a666
 8003420:	40000400 	.word	0x40000400
 8003424:	401c0000 	.word	0x401c0000
 8003428:	a34d      	add	r3, pc, #308	; (adr r3, 8003560 <main+0x23a8>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003432:	f7fd fb45 	bl	8000ac0 <__aeabi_dcmpgt>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d042      	beq.n	80034c2 <main+0x230a>
	  {
		  m1 = SAT3 / m1;
 800343c:	f107 05c0 	add.w	r5, r7, #192	; 0xc0
 8003440:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	a145      	add	r1, pc, #276	; (adr r1, 8003560 <main+0x23a8>)
 800344a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800344e:	f7fd f9d1 	bl	80007f4 <__aeabi_ddiv>
 8003452:	4603      	mov	r3, r0
 8003454:	460c      	mov	r4, r1
 8003456:	e9c5 3400 	strd	r3, r4, [r5]
		  a = m1 * a;
 800345a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f507 7154 	add.w	r1, r7, #848	; 0x350
 8003466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800346a:	f7fd f899 	bl	80005a0 <__aeabi_dmul>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8003476:	e9c2 3400 	strd	r3, r4, [r2]
		  b = m1 * b;
 800347a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f507 7152 	add.w	r1, r7, #840	; 0x348
 8003486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800348a:	f7fd f889 	bl	80005a0 <__aeabi_dmul>
 800348e:	4603      	mov	r3, r0
 8003490:	460c      	mov	r4, r1
 8003492:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8003496:	e9c2 3400 	strd	r3, r4, [r2]
		  c = m1 * c;
 800349a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f507 7150 	add.w	r1, r7, #832	; 0x340
 80034a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034aa:	f7fd f879 	bl	80005a0 <__aeabi_dmul>
 80034ae:	4603      	mov	r3, r0
 80034b0:	460c      	mov	r4, r1
 80034b2:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80034b6:	e9c2 3400 	strd	r3, r4, [r2]
		  sat3 = 1u;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
 80034c0:	e002      	b.n	80034c8 <main+0x2310>
	  }
	  else{
		  sat3 = 0u;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 32cf 	strb.w	r3, [r7, #719]	; 0x2cf
	  }
	  TIM3->CCR2 = a > 0 ? (uint32_t)a : 0;
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f507 7154 	add.w	r1, r7, #848	; 0x350
 80034d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034d8:	f7fd faf2 	bl	8000ac0 <__aeabi_dcmpgt>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <main+0x233a>
 80034e2:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80034e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ea:	f7fd fb31 	bl	8000b50 <__aeabi_d2uiz>
 80034ee:	4602      	mov	r2, r0
 80034f0:	e000      	b.n	80034f4 <main+0x233c>
 80034f2:	2200      	movs	r2, #0
 80034f4:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <main+0x23b0>)
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = b > 0 ? (uint32_t)b : 0;
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f507 7152 	add.w	r1, r7, #840	; 0x348
 8003504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003508:	f7fd fada 	bl	8000ac0 <__aeabi_dcmpgt>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <main+0x236a>
 8003512:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8003516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351a:	f7fd fb19 	bl	8000b50 <__aeabi_d2uiz>
 800351e:	4602      	mov	r2, r0
 8003520:	e000      	b.n	8003524 <main+0x236c>
 8003522:	2200      	movs	r2, #0
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <main+0x23b0>)
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = c > 0 ? (uint32_t)c : 0;
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f507 7150 	add.w	r1, r7, #832	; 0x340
 8003534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003538:	f7fd fac2 	bl	8000ac0 <__aeabi_dcmpgt>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <main+0x239a>
 8003542:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8003546:	e9d3 0100 	ldrd	r0, r1, [r3]
 800354a:	f7fd fb01 	bl	8000b50 <__aeabi_d2uiz>
 800354e:	4602      	mov	r2, r0
 8003550:	e000      	b.n	8003554 <main+0x239c>
 8003552:	2200      	movs	r2, #0
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <main+0x23b0>)
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_I2C_Mem_Read (&hi2c2,ADDRESS, 0x3B, 1, values, 6, 1000);
 8003558:	f7fe b940 	b.w	80017dc <main+0x624>
 800355c:	f3af 8000 	nop.w
 8003560:	00000000 	.word	0x00000000
 8003564:	409a9000 	.word	0x409a9000
 8003568:	40000400 	.word	0x40000400

0800356c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b096      	sub	sp, #88	; 0x58
 8003570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003572:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003576:	2228      	movs	r2, #40	; 0x28
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f008 fd8e 	bl	800c09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	611a      	str	r2, [r3, #16]
 800359e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ae:	2301      	movs	r3, #1
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035b2:	2302      	movs	r3, #2
 80035b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fbaa 	bl	8006d20 <HAL_RCC_OscConfig>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80035d2:	f000 fa1d 	bl	8003a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d6:	230f      	movs	r3, #15
 80035d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035da:	2302      	movs	r3, #2
 80035dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fe14 	bl	8007220 <HAL_RCC_ClockConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80035fe:	f000 fa07 	bl	8003a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003602:	2310      	movs	r3, #16
 8003604:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800360a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f003 ff8e 	bl	8007530 <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800361a:	f000 f9f9 	bl	8003a10 <Error_Handler>
  }
}
 800361e:	bf00      	nop
 8003620:	3758      	adds	r7, #88	; 0x58
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <MX_I2C1_Init+0x50>)
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <MX_I2C1_Init+0x54>)
 8003630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <MX_I2C1_Init+0x50>)
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <MX_I2C1_Init+0x58>)
 8003636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <MX_I2C1_Init+0x50>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <MX_I2C1_Init+0x50>)
 8003640:	2200      	movs	r2, #0
 8003642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_I2C1_Init+0x50>)
 8003646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <MX_I2C1_Init+0x50>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_I2C1_Init+0x50>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <MX_I2C1_Init+0x50>)
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_I2C1_Init+0x50>)
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_I2C1_Init+0x50>)
 8003666:	f000 febb 	bl	80043e0 <HAL_I2C_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003670:	f000 f9ce 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20001aec 	.word	0x20001aec
 800367c:	40005400 	.word	0x40005400
 8003680:	000186a0 	.word	0x000186a0

08003684 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <MX_I2C2_Init+0x50>)
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <MX_I2C2_Init+0x54>)
 800368c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_I2C2_Init+0x50>)
 8003690:	4a12      	ldr	r2, [pc, #72]	; (80036dc <MX_I2C2_Init+0x58>)
 8003692:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_I2C2_Init+0x50>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_I2C2_Init+0x50>)
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036bc:	2200      	movs	r2, #0
 80036be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80036c0:	4804      	ldr	r0, [pc, #16]	; (80036d4 <MX_I2C2_Init+0x50>)
 80036c2:	f000 fe8d 	bl	80043e0 <HAL_I2C_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80036cc:	f000 f9a0 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20001b40 	.word	0x20001b40
 80036d8:	40005800 	.word	0x40005800
 80036dc:	000186a0 	.word	0x000186a0

080036e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e6:	f107 0320 	add.w	r3, r7, #32
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	615a      	str	r2, [r3, #20]
 8003700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <MX_TIM2_Init+0xd8>)
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003710:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2249;
 8003716:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003718:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800371c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003720:	2200      	movs	r2, #0
 8003722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800372a:	4823      	ldr	r0, [pc, #140]	; (80037b8 <MX_TIM2_Init+0xd8>)
 800372c:	f003 ffb6 	bl	800769c <HAL_TIM_PWM_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003736:	f000 f96b 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003742:	f107 0320 	add.w	r3, r7, #32
 8003746:	4619      	mov	r1, r3
 8003748:	481b      	ldr	r0, [pc, #108]	; (80037b8 <MX_TIM2_Init+0xd8>)
 800374a:	f004 fbb9 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003754:	f000 f95c 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003758:	2360      	movs	r3, #96	; 0x60
 800375a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2204      	movs	r2, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4812      	ldr	r0, [pc, #72]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003770:	f004 f89e 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800377a:	f000 f949 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2208      	movs	r2, #8
 8003782:	4619      	mov	r1, r3
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <MX_TIM2_Init+0xd8>)
 8003786:	f004 f893 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003790:	f000 f93e 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	220c      	movs	r2, #12
 8003798:	4619      	mov	r1, r3
 800379a:	4807      	ldr	r0, [pc, #28]	; (80037b8 <MX_TIM2_Init+0xd8>)
 800379c:	f004 f888 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80037a6:	f000 f933 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80037aa:	4803      	ldr	r0, [pc, #12]	; (80037b8 <MX_TIM2_Init+0xd8>)
 80037ac:	f000 fa18 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 80037b0:	bf00      	nop
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20001bdc 	.word	0x20001bdc

080037bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c2:	f107 0320 	add.w	r3, r7, #32
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	611a      	str	r2, [r3, #16]
 80037da:	615a      	str	r2, [r3, #20]
 80037dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037de:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <MX_TIM3_Init+0xec>)
 80037e0:	4a32      	ldr	r2, [pc, #200]	; (80038ac <MX_TIM3_Init+0xf0>)
 80037e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <MX_TIM3_Init+0xec>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ea:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <MX_TIM3_Init+0xec>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2249;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <MX_TIM3_Init+0xec>)
 80037f2:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80037f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <MX_TIM3_Init+0xec>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <MX_TIM3_Init+0xec>)
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003804:	4828      	ldr	r0, [pc, #160]	; (80038a8 <MX_TIM3_Init+0xec>)
 8003806:	f003 ff49 	bl	800769c <HAL_TIM_PWM_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003810:	f000 f8fe 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003814:	2300      	movs	r3, #0
 8003816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800381c:	f107 0320 	add.w	r3, r7, #32
 8003820:	4619      	mov	r1, r3
 8003822:	4821      	ldr	r0, [pc, #132]	; (80038a8 <MX_TIM3_Init+0xec>)
 8003824:	f004 fb4c 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800382e:	f000 f8ef 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003832:	2360      	movs	r3, #96	; 0x60
 8003834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	2200      	movs	r2, #0
 8003846:	4619      	mov	r1, r3
 8003848:	4817      	ldr	r0, [pc, #92]	; (80038a8 <MX_TIM3_Init+0xec>)
 800384a:	f004 f831 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003854:	f000 f8dc 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	2204      	movs	r2, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4812      	ldr	r0, [pc, #72]	; (80038a8 <MX_TIM3_Init+0xec>)
 8003860:	f004 f826 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800386a:	f000 f8d1 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	2208      	movs	r2, #8
 8003872:	4619      	mov	r1, r3
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <MX_TIM3_Init+0xec>)
 8003876:	f004 f81b 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003880:	f000 f8c6 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	220c      	movs	r2, #12
 8003888:	4619      	mov	r1, r3
 800388a:	4807      	ldr	r0, [pc, #28]	; (80038a8 <MX_TIM3_Init+0xec>)
 800388c:	f004 f810 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003896:	f000 f8bb 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800389a:	4803      	ldr	r0, [pc, #12]	; (80038a8 <MX_TIM3_Init+0xec>)
 800389c:	f000 f9a0 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 80038a0:	bf00      	nop
 80038a2:	3728      	adds	r7, #40	; 0x28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20001b94 	.word	0x20001b94
 80038ac:	40000400 	.word	0x40000400

080038b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b6:	f107 0320 	add.w	r3, r7, #32
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	611a      	str	r2, [r3, #16]
 80038ce:	615a      	str	r2, [r3, #20]
 80038d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038d2:	4b27      	ldr	r3, [pc, #156]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038d4:	4a27      	ldr	r2, [pc, #156]	; (8003974 <MX_TIM4_Init+0xc4>)
 80038d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038da:	2200      	movs	r2, #0
 80038dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2249;
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038e6:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80038ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038f8:	481d      	ldr	r0, [pc, #116]	; (8003970 <MX_TIM4_Init+0xc0>)
 80038fa:	f003 fecf 	bl	800769c <HAL_TIM_PWM_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003904:	f000 f884 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003910:	f107 0320 	add.w	r3, r7, #32
 8003914:	4619      	mov	r1, r3
 8003916:	4816      	ldr	r0, [pc, #88]	; (8003970 <MX_TIM4_Init+0xc0>)
 8003918:	f004 fad2 	bl	8007ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003922:	f000 f875 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003926:	2360      	movs	r3, #96	; 0x60
 8003928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	2208      	movs	r2, #8
 800393a:	4619      	mov	r1, r3
 800393c:	480c      	ldr	r0, [pc, #48]	; (8003970 <MX_TIM4_Init+0xc0>)
 800393e:	f003 ffb7 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003948:	f000 f862 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	220c      	movs	r2, #12
 8003950:	4619      	mov	r1, r3
 8003952:	4807      	ldr	r0, [pc, #28]	; (8003970 <MX_TIM4_Init+0xc0>)
 8003954:	f003 ffac 	bl	80078b0 <HAL_TIM_PWM_ConfigChannel>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800395e:	f000 f857 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003962:	4803      	ldr	r0, [pc, #12]	; (8003970 <MX_TIM4_Init+0xc0>)
 8003964:	f000 f93c 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 8003968:	bf00      	nop
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001aa4 	.word	0x20001aa4
 8003974:	40000800 	.word	0x40000800

08003978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397e:	f107 0310 	add.w	r3, r7, #16
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <MX_GPIO_Init+0x90>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <MX_GPIO_Init+0x90>)
 8003992:	f043 0320 	orr.w	r3, r3, #32
 8003996:	6193      	str	r3, [r2, #24]
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <MX_GPIO_Init+0x90>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039aa:	f043 0304 	orr.w	r3, r3, #4
 80039ae:	6193      	str	r3, [r2, #24]
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039c2:	f043 0308 	orr.w	r3, r3, #8
 80039c6:	6193      	str	r3, [r2, #24]
 80039c8:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <MX_GPIO_Init+0x90>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80039d4:	2200      	movs	r2, #0
 80039d6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80039da:	480c      	ldr	r0, [pc, #48]	; (8003a0c <MX_GPIO_Init+0x94>)
 80039dc:	f000 fce8 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80039e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e6:	2301      	movs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f2:	f107 0310 	add.w	r3, r7, #16
 80039f6:	4619      	mov	r1, r3
 80039f8:	4804      	ldr	r0, [pc, #16]	; (8003a0c <MX_GPIO_Init+0x94>)
 80039fa:	f000 fb6f 	bl	80040dc <HAL_GPIO_Init>

}
 80039fe:	bf00      	nop
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40010c00 	.word	0x40010c00

08003a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6193      	str	r3, [r2, #24]
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a44:	61d3      	str	r3, [r2, #28]
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_MspInit+0x5c>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_MspInit+0x60>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_MspInit+0x60>)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40010000 	.word	0x40010000

08003a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0318 	add.w	r3, r7, #24
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2b      	ldr	r2, [pc, #172]	; (8003b48 <HAL_I2C_MspInit+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d124      	bne.n	8003aea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4a29      	ldr	r2, [pc, #164]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6193      	str	r3, [r2, #24]
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ab8:	23c0      	movs	r3, #192	; 0xc0
 8003aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003abc:	2312      	movs	r3, #18
 8003abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	f107 0318 	add.w	r3, r7, #24
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4821      	ldr	r0, [pc, #132]	; (8003b50 <HAL_I2C_MspInit+0xd0>)
 8003acc:	f000 fb06 	bl	80040dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ae8:	e029      	b.n	8003b3e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_I2C_MspInit+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d124      	bne.n	8003b3e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af4:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003afa:	f043 0308 	orr.w	r3, r3, #8
 8003afe:	6193      	str	r3, [r2, #24]
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b12:	2312      	movs	r3, #18
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b1a:	f107 0318 	add.w	r3, r7, #24
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <HAL_I2C_MspInit+0xd0>)
 8003b22:	f000 fadb 	bl	80040dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b30:	61d3      	str	r3, [r2, #28]
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_I2C_MspInit+0xcc>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
}
 8003b3e:	bf00      	nop
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40005400 	.word	0x40005400
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40005800 	.word	0x40005800

08003b58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d10c      	bne.n	8003b84 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	61d3      	str	r3, [r2, #28]
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b82:	e022      	b.n	8003bca <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <HAL_TIM_PWM_MspInit+0x80>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	61d3      	str	r3, [r2, #28]
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
}
 8003ba6:	e010      	b.n	8003bca <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_TIM_PWM_MspInit+0x84>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10b      	bne.n	8003bca <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	61d3      	str	r3, [r2, #28]
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_TIM_PWM_MspInit+0x7c>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800

08003be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0318 	add.w	r3, r7, #24
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d118      	bne.n	8003c32 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c00:	4b38      	ldr	r3, [pc, #224]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	4a37      	ldr	r2, [pc, #220]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	6193      	str	r3, [r2, #24]
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = M2IN2_Pin|M1IN1_Pin|M1IN2_Pin;
 8003c18:	230e      	movs	r3, #14
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2302      	movs	r3, #2
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c24:	f107 0318 	add.w	r3, r7, #24
 8003c28:	4619      	mov	r1, r3
 8003c2a:	482f      	ldr	r0, [pc, #188]	; (8003ce8 <HAL_TIM_MspPostInit+0x108>)
 8003c2c:	f000 fa56 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c30:	e053      	b.n	8003cda <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_TIM_MspPostInit+0x10c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d130      	bne.n	8003c9e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c42:	f043 0304 	orr.w	r3, r3, #4
 8003c46:	6193      	str	r3, [r2, #24]
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c54:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c5a:	f043 0308 	orr.w	r3, r3, #8
 8003c5e:	6193      	str	r3, [r2, #24]
 8003c60:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1IN3_Pin|M0IN1_Pin;
 8003c6c:	23c0      	movs	r3, #192	; 0xc0
 8003c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2302      	movs	r3, #2
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0318 	add.w	r3, r7, #24
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	481a      	ldr	r0, [pc, #104]	; (8003ce8 <HAL_TIM_MspPostInit+0x108>)
 8003c80:	f000 fa2c 	bl	80040dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M0IN2_Pin|M0IN3_Pin;
 8003c84:	2303      	movs	r3, #3
 8003c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c90:	f107 0318 	add.w	r3, r7, #24
 8003c94:	4619      	mov	r1, r3
 8003c96:	4816      	ldr	r0, [pc, #88]	; (8003cf0 <HAL_TIM_MspPostInit+0x110>)
 8003c98:	f000 fa20 	bl	80040dc <HAL_GPIO_Init>
}
 8003c9c:	e01d      	b.n	8003cda <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <HAL_TIM_MspPostInit+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d118      	bne.n	8003cda <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003cae:	f043 0308 	orr.w	r3, r3, #8
 8003cb2:	6193      	str	r3, [r2, #24]
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_TIM_MspPostInit+0x104>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2IN1_Pin|M2IN3_Pin;
 8003cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cca:	2302      	movs	r3, #2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	f107 0318 	add.w	r3, r7, #24
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <HAL_TIM_MspPostInit+0x110>)
 8003cd6:	f000 fa01 	bl	80040dc <HAL_GPIO_Init>
}
 8003cda:	bf00      	nop
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40010c00 	.word	0x40010c00
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <HardFault_Handler+0x4>

08003d0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d0e:	e7fe      	b.n	8003d0e <MemManage_Handler+0x4>

08003d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <BusFault_Handler+0x4>

08003d16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d1a:	e7fe      	b.n	8003d1a <UsageFault_Handler+0x4>

08003d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d44:	f000 f87e 	bl	8003e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d52:	f001 fd92 	bl	800587a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200028bc 	.word	0x200028bc

08003d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d6e:	e003      	b.n	8003d78 <LoopCopyDataInit>

08003d70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d76:	3104      	adds	r1, #4

08003d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d78:	480a      	ldr	r0, [pc, #40]	; (8003da4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d80:	d3f6      	bcc.n	8003d70 <CopyDataInit>
  ldr r2, =_sbss
 8003d82:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d84:	e002      	b.n	8003d8c <LoopFillZerobss>

08003d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d88:	f842 3b04 	str.w	r3, [r2], #4

08003d8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d8c:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d90:	d3f9      	bcc.n	8003d86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d92:	f7ff ffe5 	bl	8003d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d96:	f008 f95d 	bl	800c054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d9a:	f7fd fa0d 	bl	80011b8 <main>
  bx lr
 8003d9e:	4770      	bx	lr
  ldr r3, =_sidata
 8003da0:	0800ee40 	.word	0x0800ee40
  ldr r0, =_sdata
 8003da4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003da8:	20001864 	.word	0x20001864
  ldr r2, =_sbss
 8003dac:	20001864 	.word	0x20001864
  ldr r3, = _ebss
 8003db0:	20002ba8 	.word	0x20002ba8

08003db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003db4:	e7fe      	b.n	8003db4 <ADC1_2_IRQHandler>
	...

08003db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <HAL_Init+0x28>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <HAL_Init+0x28>)
 8003dc2:	f043 0310 	orr.w	r3, r3, #16
 8003dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc8:	2003      	movs	r0, #3
 8003dca:	f000 f945 	bl	8004058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f000 f808 	bl	8003de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd4:	f7ff fe22 	bl	8003a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000

08003de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dec:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_InitTick+0x54>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_InitTick+0x58>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f95d 	bl	80040c2 <HAL_SYSTICK_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00e      	b.n	8003e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d80a      	bhi.n	8003e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f000 f925 	bl	800406e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e24:	4a06      	ldr	r2, [pc, #24]	; (8003e40 <HAL_InitTick+0x5c>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20001680 	.word	0x20001680
 8003e3c:	20001688 	.word	0x20001688
 8003e40:	20001684 	.word	0x20001684

08003e44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_IncTick+0x1c>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <HAL_IncTick+0x20>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	4a03      	ldr	r2, [pc, #12]	; (8003e64 <HAL_IncTick+0x20>)
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	20001688 	.word	0x20001688
 8003e64:	20001c24 	.word	0x20001c24

08003e68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <HAL_GetTick+0x10>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	20001c24 	.word	0x20001c24

08003e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d005      	beq.n	8003ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_Delay+0x40>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ea2:	bf00      	nop
 8003ea4:	f7ff ffe0 	bl	8003e68 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d8f7      	bhi.n	8003ea4 <HAL_Delay+0x28>
  {
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20001688 	.word	0x20001688

08003ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003edc:	4013      	ands	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef2:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	60d3      	str	r3, [r2, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <__NVIC_GetPriorityGrouping+0x18>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f003 0307 	and.w	r3, r3, #7
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	db0b      	blt.n	8003f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	4906      	ldr	r1, [pc, #24]	; (8003f58 <__NVIC_EnableIRQ+0x34>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2001      	movs	r0, #1
 8003f46:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	e000e100 	.word	0xe000e100

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	; (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f1c3 0307 	rsb	r3, r3, #7
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf28      	it	cs
 8003fce:	2304      	movcs	r3, #4
 8003fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d902      	bls.n	8003fe0 <NVIC_EncodePriority+0x30>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3b03      	subs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <NVIC_EncodePriority+0x32>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43d9      	mvns	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	4313      	orrs	r3, r2
         );
}
 800400a:	4618      	mov	r0, r3
 800400c:	3724      	adds	r7, #36	; 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004024:	d301      	bcc.n	800402a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004026:	2301      	movs	r3, #1
 8004028:	e00f      	b.n	800404a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <SysTick_Config+0x40>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004032:	210f      	movs	r1, #15
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	f7ff ff90 	bl	8003f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <SysTick_Config+0x40>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <SysTick_Config+0x40>)
 8004044:	2207      	movs	r2, #7
 8004046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	e000e010 	.word	0xe000e010

08004058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff2d 	bl	8003ec0 <__NVIC_SetPriorityGrouping>
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004080:	f7ff ff42 	bl	8003f08 <__NVIC_GetPriorityGrouping>
 8004084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff90 	bl	8003fb0 <NVIC_EncodePriority>
 8004090:	4602      	mov	r2, r0
 8004092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004096:	4611      	mov	r1, r2
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff5f 	bl	8003f5c <__NVIC_SetPriority>
}
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	4603      	mov	r3, r0
 80040ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff35 	bl	8003f24 <__NVIC_EnableIRQ>
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ffa2 	bl	8004014 <SysTick_Config>
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b480      	push	{r7}
 80040de:	b08b      	sub	sp, #44	; 0x2c
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040ea:	2300      	movs	r3, #0
 80040ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ee:	e133      	b.n	8004358 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040f0:	2201      	movs	r2, #1
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	429a      	cmp	r2, r3
 800410a:	f040 8122 	bne.w	8004352 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b12      	cmp	r3, #18
 8004114:	d034      	beq.n	8004180 <HAL_GPIO_Init+0xa4>
 8004116:	2b12      	cmp	r3, #18
 8004118:	d80d      	bhi.n	8004136 <HAL_GPIO_Init+0x5a>
 800411a:	2b02      	cmp	r3, #2
 800411c:	d02b      	beq.n	8004176 <HAL_GPIO_Init+0x9a>
 800411e:	2b02      	cmp	r3, #2
 8004120:	d804      	bhi.n	800412c <HAL_GPIO_Init+0x50>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d031      	beq.n	800418a <HAL_GPIO_Init+0xae>
 8004126:	2b01      	cmp	r3, #1
 8004128:	d01c      	beq.n	8004164 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800412a:	e048      	b.n	80041be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800412c:	2b03      	cmp	r3, #3
 800412e:	d043      	beq.n	80041b8 <HAL_GPIO_Init+0xdc>
 8004130:	2b11      	cmp	r3, #17
 8004132:	d01b      	beq.n	800416c <HAL_GPIO_Init+0x90>
          break;
 8004134:	e043      	b.n	80041be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004136:	4a8f      	ldr	r2, [pc, #572]	; (8004374 <HAL_GPIO_Init+0x298>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d026      	beq.n	800418a <HAL_GPIO_Init+0xae>
 800413c:	4a8d      	ldr	r2, [pc, #564]	; (8004374 <HAL_GPIO_Init+0x298>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d806      	bhi.n	8004150 <HAL_GPIO_Init+0x74>
 8004142:	4a8d      	ldr	r2, [pc, #564]	; (8004378 <HAL_GPIO_Init+0x29c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d020      	beq.n	800418a <HAL_GPIO_Init+0xae>
 8004148:	4a8c      	ldr	r2, [pc, #560]	; (800437c <HAL_GPIO_Init+0x2a0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_GPIO_Init+0xae>
          break;
 800414e:	e036      	b.n	80041be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004150:	4a8b      	ldr	r2, [pc, #556]	; (8004380 <HAL_GPIO_Init+0x2a4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d019      	beq.n	800418a <HAL_GPIO_Init+0xae>
 8004156:	4a8b      	ldr	r2, [pc, #556]	; (8004384 <HAL_GPIO_Init+0x2a8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d016      	beq.n	800418a <HAL_GPIO_Init+0xae>
 800415c:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_GPIO_Init+0x2ac>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_GPIO_Init+0xae>
          break;
 8004162:	e02c      	b.n	80041be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	623b      	str	r3, [r7, #32]
          break;
 800416a:	e028      	b.n	80041be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	623b      	str	r3, [r7, #32]
          break;
 8004174:	e023      	b.n	80041be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	3308      	adds	r3, #8
 800417c:	623b      	str	r3, [r7, #32]
          break;
 800417e:	e01e      	b.n	80041be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	330c      	adds	r3, #12
 8004186:	623b      	str	r3, [r7, #32]
          break;
 8004188:	e019      	b.n	80041be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004192:	2304      	movs	r3, #4
 8004194:	623b      	str	r3, [r7, #32]
          break;
 8004196:	e012      	b.n	80041be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041a0:	2308      	movs	r3, #8
 80041a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	611a      	str	r2, [r3, #16]
          break;
 80041aa:	e008      	b.n	80041be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041ac:	2308      	movs	r3, #8
 80041ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	615a      	str	r2, [r3, #20]
          break;
 80041b6:	e002      	b.n	80041be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
          break;
 80041bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2bff      	cmp	r3, #255	; 0xff
 80041c2:	d801      	bhi.n	80041c8 <HAL_GPIO_Init+0xec>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	e001      	b.n	80041cc <HAL_GPIO_Init+0xf0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2bff      	cmp	r3, #255	; 0xff
 80041d2:	d802      	bhi.n	80041da <HAL_GPIO_Init+0xfe>
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	e002      	b.n	80041e0 <HAL_GPIO_Init+0x104>
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	3b08      	subs	r3, #8
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	210f      	movs	r1, #15
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	401a      	ands	r2, r3
 80041f2:	6a39      	ldr	r1, [r7, #32]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	431a      	orrs	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a2 	beq.w	8004352 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800420e:	4b5f      	ldr	r3, [pc, #380]	; (800438c <HAL_GPIO_Init+0x2b0>)
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4a5e      	ldr	r2, [pc, #376]	; (800438c <HAL_GPIO_Init+0x2b0>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6193      	str	r3, [r2, #24]
 800421a:	4b5c      	ldr	r3, [pc, #368]	; (800438c <HAL_GPIO_Init+0x2b0>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004226:	4a5a      	ldr	r2, [pc, #360]	; (8004390 <HAL_GPIO_Init+0x2b4>)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	3302      	adds	r3, #2
 800422e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004232:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	220f      	movs	r2, #15
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a51      	ldr	r2, [pc, #324]	; (8004394 <HAL_GPIO_Init+0x2b8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <HAL_GPIO_Init+0x1b6>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a50      	ldr	r2, [pc, #320]	; (8004398 <HAL_GPIO_Init+0x2bc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_GPIO_Init+0x1b2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a4f      	ldr	r2, [pc, #316]	; (800439c <HAL_GPIO_Init+0x2c0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_Init+0x1ae>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a4e      	ldr	r2, [pc, #312]	; (80043a0 <HAL_GPIO_Init+0x2c4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_Init+0x1aa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a4d      	ldr	r2, [pc, #308]	; (80043a4 <HAL_GPIO_Init+0x2c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x1a6>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a4c      	ldr	r2, [pc, #304]	; (80043a8 <HAL_GPIO_Init+0x2cc>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_Init+0x1a2>
 800427a:	2305      	movs	r3, #5
 800427c:	e00a      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 800427e:	2306      	movs	r3, #6
 8004280:	e008      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 8004282:	2304      	movs	r3, #4
 8004284:	e006      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 8004286:	2303      	movs	r3, #3
 8004288:	e004      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 800428a:	2302      	movs	r3, #2
 800428c:	e002      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x1b8>
 8004292:	2300      	movs	r3, #0
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	f002 0203 	and.w	r2, r2, #3
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	4093      	lsls	r3, r2
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042a4:	493a      	ldr	r1, [pc, #232]	; (8004390 <HAL_GPIO_Init+0x2b4>)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	3302      	adds	r3, #2
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042be:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	493a      	ldr	r1, [pc, #232]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
 80042ca:	e006      	b.n	80042da <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042cc:	4b37      	ldr	r3, [pc, #220]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	4935      	ldr	r1, [pc, #212]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4930      	ldr	r1, [pc, #192]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
 80042f2:	e006      	b.n	8004302 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	492b      	ldr	r1, [pc, #172]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	4926      	ldr	r1, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
 800431a:	e006      	b.n	800432a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	43db      	mvns	r3, r3
 8004324:	4921      	ldr	r1, [pc, #132]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004326:	4013      	ands	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	491c      	ldr	r1, [pc, #112]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	60cb      	str	r3, [r1, #12]
 8004342:	e006      	b.n	8004352 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	43db      	mvns	r3, r3
 800434c:	4917      	ldr	r1, [pc, #92]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800434e:	4013      	ands	r3, r2
 8004350:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	3301      	adds	r3, #1
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	f47f aec4 	bne.w	80040f0 <HAL_GPIO_Init+0x14>
  }
}
 8004368:	bf00      	nop
 800436a:	372c      	adds	r7, #44	; 0x2c
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	10210000 	.word	0x10210000
 8004378:	10110000 	.word	0x10110000
 800437c:	10120000 	.word	0x10120000
 8004380:	10310000 	.word	0x10310000
 8004384:	10320000 	.word	0x10320000
 8004388:	10220000 	.word	0x10220000
 800438c:	40021000 	.word	0x40021000
 8004390:	40010000 	.word	0x40010000
 8004394:	40010800 	.word	0x40010800
 8004398:	40010c00 	.word	0x40010c00
 800439c:	40011000 	.word	0x40011000
 80043a0:	40011400 	.word	0x40011400
 80043a4:	40011800 	.word	0x40011800
 80043a8:	40011c00 	.word	0x40011c00
 80043ac:	40010400 	.word	0x40010400

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	611a      	str	r2, [r3, #16]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e11f      	b.n	8004632 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fb3a 	bl	8003a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004444:	f003 f842 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 8004448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4a7b      	ldr	r2, [pc, #492]	; (800463c <HAL_I2C_Init+0x25c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d807      	bhi.n	8004464 <HAL_I2C_Init+0x84>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a7a      	ldr	r2, [pc, #488]	; (8004640 <HAL_I2C_Init+0x260>)
 8004458:	4293      	cmp	r3, r2
 800445a:	bf94      	ite	ls
 800445c:	2301      	movls	r3, #1
 800445e:	2300      	movhi	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e006      	b.n	8004472 <HAL_I2C_Init+0x92>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a77      	ldr	r2, [pc, #476]	; (8004644 <HAL_I2C_Init+0x264>)
 8004468:	4293      	cmp	r3, r2
 800446a:	bf94      	ite	ls
 800446c:	2301      	movls	r3, #1
 800446e:	2300      	movhi	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0db      	b.n	8004632 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a72      	ldr	r2, [pc, #456]	; (8004648 <HAL_I2C_Init+0x268>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0c9b      	lsrs	r3, r3, #18
 8004484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a64      	ldr	r2, [pc, #400]	; (800463c <HAL_I2C_Init+0x25c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d802      	bhi.n	80044b4 <HAL_I2C_Init+0xd4>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3301      	adds	r3, #1
 80044b2:	e009      	b.n	80044c8 <HAL_I2C_Init+0xe8>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	4a63      	ldr	r2, [pc, #396]	; (800464c <HAL_I2C_Init+0x26c>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	099b      	lsrs	r3, r3, #6
 80044c6:	3301      	adds	r3, #1
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4956      	ldr	r1, [pc, #344]	; (800463c <HAL_I2C_Init+0x25c>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	d80d      	bhi.n	8004504 <HAL_I2C_Init+0x124>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1e59      	subs	r1, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	bf38      	it	cc
 8004500:	2304      	movcc	r3, #4
 8004502:	e04f      	b.n	80045a4 <HAL_I2C_Init+0x1c4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d111      	bne.n	8004530 <HAL_I2C_Init+0x150>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1e58      	subs	r0, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6859      	ldr	r1, [r3, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e012      	b.n	8004556 <HAL_I2C_Init+0x176>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1e58      	subs	r0, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	0099      	lsls	r1, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	fbb0 f3f3 	udiv	r3, r0, r3
 8004546:	3301      	adds	r3, #1
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Init+0x17e>
 800455a:	2301      	movs	r3, #1
 800455c:	e022      	b.n	80045a4 <HAL_I2C_Init+0x1c4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10e      	bne.n	8004584 <HAL_I2C_Init+0x1a4>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e58      	subs	r0, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	440b      	add	r3, r1
 8004574:	fbb0 f3f3 	udiv	r3, r0, r3
 8004578:	3301      	adds	r3, #1
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_Init+0x1c4>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1e58      	subs	r0, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	0099      	lsls	r1, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	fbb0 f3f3 	udiv	r3, r0, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	6809      	ldr	r1, [r1, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6911      	ldr	r1, [r2, #16]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68d2      	ldr	r2, [r2, #12]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	000186a0 	.word	0x000186a0
 8004640:	001e847f 	.word	0x001e847f
 8004644:	003d08ff 	.word	0x003d08ff
 8004648:	431bde83 	.word	0x431bde83
 800464c:	10624dd3 	.word	0x10624dd3

08004650 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	817b      	strh	r3, [r7, #10]
 8004662:	460b      	mov	r3, r1
 8004664:	813b      	strh	r3, [r7, #8]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800466a:	f7ff fbfd 	bl	8003e68 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b20      	cmp	r3, #32
 800467a:	f040 80d9 	bne.w	8004830 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	2319      	movs	r3, #25
 8004684:	2201      	movs	r2, #1
 8004686:	496d      	ldr	r1, [pc, #436]	; (800483c <HAL_I2C_Mem_Write+0x1ec>)
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fde9 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
 8004696:	e0cc      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_Mem_Write+0x56>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e0c5      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d007      	beq.n	80046cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2221      	movs	r2, #33	; 0x21
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a4d      	ldr	r2, [pc, #308]	; (8004840 <HAL_I2C_Mem_Write+0x1f0>)
 800470c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800470e:	88f8      	ldrh	r0, [r7, #6]
 8004710:	893a      	ldrh	r2, [r7, #8]
 8004712:	8979      	ldrh	r1, [r7, #10]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4603      	mov	r3, r0
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fc20 	bl	8004f64 <I2C_RequestMemoryWrite>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d052      	beq.n	80047d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e081      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fe6a 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	2b04      	cmp	r3, #4
 8004744:	d107      	bne.n	8004756 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d11b      	bne.n	80047d0 <HAL_I2C_Mem_Write+0x180>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1aa      	bne.n	800472e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fe56 	bl	800548e <I2C_WaitOnBTFFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e016      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	00100002 	.word	0x00100002
 8004840:	ffff0000 	.word	0xffff0000

08004844 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	; 0x30
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4603      	mov	r3, r0
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	460b      	mov	r3, r1
 8004858:	813b      	strh	r3, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004862:	f7ff fb01 	bl	8003e68 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b20      	cmp	r3, #32
 8004872:	f040 823d 	bne.w	8004cf0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	2319      	movs	r3, #25
 800487c:	2201      	movs	r2, #1
 800487e:	4981      	ldr	r1, [pc, #516]	; (8004a84 <HAL_I2C_Mem_Read+0x240>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 fced 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	e230      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2C_Mem_Read+0x5a>
 800489a:	2302      	movs	r3, #2
 800489c:	e229      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d007      	beq.n	80048c4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2222      	movs	r2, #34	; 0x22
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2240      	movs	r2, #64	; 0x40
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a61      	ldr	r2, [pc, #388]	; (8004a88 <HAL_I2C_Mem_Read+0x244>)
 8004904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004906:	88f8      	ldrh	r0, [r7, #6]
 8004908:	893a      	ldrh	r2, [r7, #8]
 800490a:	8979      	ldrh	r1, [r7, #10]
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4603      	mov	r3, r0
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fbba 	bl	8005090 <I2C_RequestMemoryRead>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1e5      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d113      	bne.n	8004956 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e1b9      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	2b01      	cmp	r3, #1
 800495c:	d11d      	bne.n	800499a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800496e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004996:	b662      	cpsie	i
 8004998:	e197      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d11d      	bne.n	80049de <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80049da:	b662      	cpsie	i
 80049dc:	e175      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a04:	e161      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	f200 811a 	bhi.w	8004c44 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d123      	bne.n	8004a60 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fd77 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e162      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a5e:	e134      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d150      	bne.n	8004b0a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4906      	ldr	r1, [pc, #24]	; (8004a8c <HAL_I2C_Mem_Read+0x248>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fbf4 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e137      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
 8004a82:	bf00      	nop
 8004a84:	00100002 	.word	0x00100002
 8004a88:	ffff0000 	.word	0xffff0000
 8004a8c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004a90:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ad4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b08:	e0df      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2200      	movs	r2, #0
 8004b12:	497a      	ldr	r1, [pc, #488]	; (8004cfc <HAL_I2C_Mem_Read+0x4b8>)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fba3 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0e6      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b34:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b68:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <HAL_I2C_Mem_Read+0x4bc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	4a65      	ldr	r2, [pc, #404]	; (8004d04 <HAL_I2C_Mem_Read+0x4c0>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	0a1a      	lsrs	r2, r3, #8
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00da      	lsls	r2, r3, #3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d117      	bne.n	8004bbe <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004bb0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e099      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d1da      	bne.n	8004b82 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c42:	e042      	b.n	8004cca <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 fc61 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e04c      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d118      	bne.n	8004cca <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f47f ae99 	bne.w	8004a06 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	00010004 	.word	0x00010004
 8004d00:	20001680 	.word	0x20001680
 8004d04:	14f8b589 	.word	0x14f8b589

08004d08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	460b      	mov	r3, r1
 8004d16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d18:	f7ff f8a6 	bl	8003e68 <HAL_GetTick>
 8004d1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	f040 8111 	bne.w	8004f52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2319      	movs	r3, #25
 8004d36:	2201      	movs	r2, #1
 8004d38:	4988      	ldr	r1, [pc, #544]	; (8004f5c <HAL_I2C_IsDeviceReady+0x254>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa90 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
 8004d48:	e104      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_I2C_IsDeviceReady+0x50>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e0fd      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d007      	beq.n	8004d7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2224      	movs	r2, #36	; 0x24
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4a70      	ldr	r2, [pc, #448]	; (8004f60 <HAL_I2C_IsDeviceReady+0x258>)
 8004da0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa4e 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d103      	bne.n	8004de2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0b6      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004df6:	f7ff f837 	bl	8003e68 <HAL_GetTick>
 8004dfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e2a:	e025      	b.n	8004e78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7ff f81c 	bl	8003e68 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <HAL_I2C_IsDeviceReady+0x13a>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22a0      	movs	r2, #160	; 0xa0
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	bf0c      	ite	eq
 8004e58:	2301      	moveq	r3, #1
 8004e5a:	2300      	movne	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2ba0      	cmp	r3, #160	; 0xa0
 8004e82:	d005      	beq.n	8004e90 <HAL_I2C_IsDeviceReady+0x188>
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <HAL_I2C_IsDeviceReady+0x188>
 8004e8a:	7dbb      	ldrb	r3, [r7, #22]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0cd      	beq.n	8004e2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d129      	bne.n	8004efa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	2319      	movs	r3, #25
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4921      	ldr	r1, [pc, #132]	; (8004f5c <HAL_I2C_IsDeviceReady+0x254>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9c2 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e036      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e02c      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	490f      	ldr	r1, [pc, #60]	; (8004f5c <HAL_I2C_IsDeviceReady+0x254>)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f99e 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e012      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	f4ff af32 	bcc.w	8004da2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	00100002 	.word	0x00100002
 8004f60:	ffff0000 	.word	0xffff0000

08004f64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	461a      	mov	r2, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	817b      	strh	r3, [r7, #10]
 8004f76:	460b      	mov	r3, r1
 8004f78:	813b      	strh	r3, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f960 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb4:	d103      	bne.n	8004fbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e05f      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	492d      	ldr	r1, [pc, #180]	; (800508c <I2C_RequestMemoryWrite+0x128>)
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f998 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e04c      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	6a39      	ldr	r1, [r7, #32]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fa02 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b04      	cmp	r3, #4
 8005014:	d107      	bne.n	8005026 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e02b      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]
 800503a:	e021      	b.n	8005080 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800503c:	893b      	ldrh	r3, [r7, #8]
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	b29b      	uxth	r3, r3
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504c:	6a39      	ldr	r1, [r7, #32]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f9dc 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00d      	beq.n	8005076 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2b04      	cmp	r3, #4
 8005060:	d107      	bne.n	8005072 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e005      	b.n	8005082 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	00010002 	.word	0x00010002

08005090 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	460b      	mov	r3, r1
 80050a4:	813b      	strh	r3, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8c2 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f0:	d103      	bne.n	80050fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0aa      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800510c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	4952      	ldr	r1, [pc, #328]	; (800525c <I2C_RequestMemoryRead+0x1cc>)
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f8fa 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e097      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 f964 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2b04      	cmp	r3, #4
 8005150:	d107      	bne.n	8005162 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e076      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d105      	bne.n	8005178 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
 8005176:	e021      	b.n	80051bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b29b      	uxth	r3, r3
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	6a39      	ldr	r1, [r7, #32]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f93e 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00d      	beq.n	80051b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b04      	cmp	r3, #4
 800519c:	d107      	bne.n	80051ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e050      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b2:	893b      	ldrh	r3, [r7, #8]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	6a39      	ldr	r1, [r7, #32]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f923 	bl	800540c <I2C_WaitOnTXEFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d107      	bne.n	80051e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e035      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2200      	movs	r2, #0
 8005200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f82b 	bl	8005260 <I2C_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521e:	d103      	bne.n	8005228 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e013      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	4906      	ldr	r1, [pc, #24]	; (800525c <I2C_RequestMemoryRead+0x1cc>)
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f863 	bl	800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	00010002 	.word	0x00010002

08005260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005270:	e025      	b.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d021      	beq.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7fe fdf5 	bl	8003e68 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d302      	bcc.n	8005290 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e023      	b.n	8005306 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10d      	bne.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	43da      	mvns	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4013      	ands	r3, r2
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	e00c      	b.n	80052fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	43da      	mvns	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d0b6      	beq.n	8005272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800531c:	e051      	b.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	d123      	bne.n	8005376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005346:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e046      	b.n	8005404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d021      	beq.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fe fd73 	bl	8003e68 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0220 	orr.w	r2, r3, #32
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e020      	b.n	8005404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d10c      	bne.n	80053e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	e00b      	b.n	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	43da      	mvns	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d18d      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005418:	e02d      	b.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f8ce 	bl	80055bc <I2C_IsAcknowledgeFailed>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e02d      	b.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d021      	beq.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fe fd19 	bl	8003e68 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d116      	bne.n	8005476 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e007      	b.n	8005486 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d1ca      	bne.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800549a:	e02d      	b.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f88d 	bl	80055bc <I2C_IsAcknowledgeFailed>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e02d      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d021      	beq.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b4:	f7fe fcd8 	bl	8003e68 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d116      	bne.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e007      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d1ca      	bne.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800551c:	e042      	b.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d119      	bne.n	8005560 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0210 	mvn.w	r2, #16
 8005534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e029      	b.n	80055b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005560:	f7fe fc82 	bl	8003e68 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	d302      	bcc.n	8005576 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d116      	bne.n	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e007      	b.n	80055b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d1b5      	bne.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d2:	d11b      	bne.n	800560c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	f043 0204 	orr.w	r2, r3, #4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561a:	b08b      	sub	sp, #44	; 0x2c
 800561c:	af06      	add	r7, sp, #24
 800561e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0fd      	b.n	8005826 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f006 fa58 	bl	800baf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2203      	movs	r2, #3
 8005648:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f002 fcc7 	bl	8007fe4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	687e      	ldr	r6, [r7, #4]
 800565e:	466d      	mov	r5, sp
 8005660:	f106 0410 	add.w	r4, r6, #16
 8005664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	1d33      	adds	r3, r6, #4
 800566e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005670:	6838      	ldr	r0, [r7, #0]
 8005672:	f002 fc91 	bl	8007f98 <USB_CoreInit>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0ce      	b.n	8005826 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fcc2 	bl	8008018 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e04c      	b.n	8005734 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	440b      	add	r3, r1
 80056aa:	3301      	adds	r3, #1
 80056ac:	2201      	movs	r2, #1
 80056ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	b298      	uxth	r0, r3
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	440b      	add	r3, r1
 80056d6:	3336      	adds	r3, #54	; 0x36
 80056d8:	4602      	mov	r2, r0
 80056da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	440b      	add	r3, r1
 80056ec:	3303      	adds	r3, #3
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	440b      	add	r3, r1
 8005700:	3338      	adds	r3, #56	; 0x38
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	333c      	adds	r3, #60	; 0x3c
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	440b      	add	r3, r1
 8005728:	3340      	adds	r3, #64	; 0x40
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	3301      	adds	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d3ad      	bcc.n	800569a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	e044      	b.n	80057ce <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005770:	7bfa      	ldrb	r2, [r7, #15]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005786:	7bfa      	ldrb	r2, [r7, #15]
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057b2:	7bfa      	ldrb	r2, [r7, #15]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	3301      	adds	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
 80057ce:	7bfa      	ldrb	r2, [r7, #15]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d3b5      	bcc.n	8005744 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	687e      	ldr	r6, [r7, #4]
 80057e0:	466d      	mov	r5, sp
 80057e2:	f106 0410 	add.w	r4, r6, #16
 80057e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	1d33      	adds	r3, r6, #4
 80057f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057f2:	6838      	ldr	r0, [r7, #0]
 80057f4:	f002 fc1c 	bl	8008030 <USB_DevInit>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e00d      	b.n	8005826 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f004 fbb6 	bl	8009f90 <USB_DevDisconnect>

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800582e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b082      	sub	sp, #8
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_PCD_Start+0x16>
 8005840:	2302      	movs	r3, #2
 8005842:	e016      	b.n	8005872 <HAL_PCD_Start+0x44>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f002 fbb1 	bl	8007fb8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005856:	2101      	movs	r1, #1
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f006 fbbe 	bl	800bfda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f004 fb8a 	bl	8009f7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b088      	sub	sp, #32
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f004 fb8c 	bl	8009fa4 <USB_ReadInterrupts>
 800588c:	4603      	mov	r3, r0
 800588e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005896:	d102      	bne.n	800589e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb61 	bl	8005f60 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f004 fb7e 	bl	8009fa4 <USB_ReadInterrupts>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b2:	d112      	bne.n	80058da <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058bc:	b29a      	uxth	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	b292      	uxth	r2, r2
 80058c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f006 f98c 	bl	800bbea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80058d2:	2100      	movs	r1, #0
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f925 	bl	8005b24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f004 fb60 	bl	8009fa4 <USB_ReadInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ee:	d10b      	bne.n	8005908 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005902:	b292      	uxth	r2, r2
 8005904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f004 fb49 	bl	8009fa4 <USB_ReadInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591c:	d10b      	bne.n	8005936 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005926:	b29a      	uxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005930:	b292      	uxth	r2, r2
 8005932:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f004 fb32 	bl	8009fa4 <USB_ReadInterrupts>
 8005940:	4603      	mov	r3, r0
 8005942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594a:	d126      	bne.n	800599a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	b292      	uxth	r2, r2
 8005960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0208 	bic.w	r2, r2, #8
 8005976:	b292      	uxth	r2, r2
 8005978:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f006 f96d 	bl	800bc5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005994:	b292      	uxth	r2, r2
 8005996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f004 fb00 	bl	8009fa4 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	f040 8084 	bne.w	8005aba <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e011      	b.n	80059dc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	7ffb      	ldrb	r3, [r7, #31]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
 80059c6:	8812      	ldrh	r2, [r2, #0]
 80059c8:	b292      	uxth	r2, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	f107 0120 	add.w	r1, r7, #32
 80059d0:	440b      	add	r3, r1
 80059d2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80059d6:	7ffb      	ldrb	r3, [r7, #31]
 80059d8:	3301      	adds	r3, #1
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	2b07      	cmp	r3, #7
 80059e0:	d9ea      	bls.n	80059b8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0201 	orr.w	r2, r2, #1
 80059f4:	b292      	uxth	r2, r2
 80059f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005a12:	bf00      	nop
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f6      	beq.n	8005a14 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	b292      	uxth	r2, r2
 8005a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e010      	b.n	8005a66 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	7ffa      	ldrb	r2, [r7, #31]
 8005a4e:	0092      	lsls	r2, r2, #2
 8005a50:	440a      	add	r2, r1
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	f107 0120 	add.w	r1, r7, #32
 8005a58:	440b      	add	r3, r1
 8005a5a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005a5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	3301      	adds	r3, #1
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	7ffb      	ldrb	r3, [r7, #31]
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	d9eb      	bls.n	8005a44 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0208 	orr.w	r2, r2, #8
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a96:	b292      	uxth	r2, r2
 8005a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0204 	orr.w	r2, r2, #4
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f006 f8b7 	bl	800bc28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f004 fa70 	bl	8009fa4 <USB_ReadInterrupts>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d10e      	bne.n	8005aee <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f006 f870 	bl	800bbce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 fa56 	bl	8009fa4 <USB_ReadInterrupts>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d10b      	bne.n	8005b1c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b16:	b292      	uxth	r2, r2
 8005b18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_PCD_SetAddress+0x1a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e013      	b.n	8005b66 <HAL_PCD_SetAddress+0x42>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	78fa      	ldrb	r2, [r7, #3]
 8005b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	4611      	mov	r1, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 f9fd 	bl	8009f56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	70fb      	strb	r3, [r7, #3]
 8005b80:	460b      	mov	r3, r1
 8005b82:	803b      	strh	r3, [r7, #0]
 8005b84:	4613      	mov	r3, r2
 8005b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da0e      	bge.n	8005bb2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	705a      	strb	r2, [r3, #1]
 8005bb0:	e00e      	b.n	8005bd0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 0207 	and.w	r2, r3, #7
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bdc:	883a      	ldrh	r2, [r7, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	78ba      	ldrb	r2, [r7, #2]
 8005be6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bfa:	78bb      	ldrb	r3, [r7, #2]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d102      	bne.n	8005c06 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_PCD_EP_Open+0xa6>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e00e      	b.n	8005c32 <HAL_PCD_EP_Open+0xc4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f002 fa24 	bl	8008070 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da0e      	bge.n	8005c6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	705a      	strb	r2, [r3, #1]
 8005c6a:	e00e      	b.n	8005c8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	f003 0207 	and.w	r2, r3, #7
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_PCD_EP_Close+0x6a>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e00e      	b.n	8005cc2 <HAL_PCD_EP_Close+0x88>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68f9      	ldr	r1, [r7, #12]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 fd46 	bl	8008744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 0207 	and.w	r2, r3, #7
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2200      	movs	r2, #0
 8005d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d106      	bne.n	8005d2e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6979      	ldr	r1, [r7, #20]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f002 fef8 	bl	8008b1c <USB_EPStartXfer>
 8005d2c:	e005      	b.n	8005d3a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6979      	ldr	r1, [r7, #20]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 fef1 	bl	8008b1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	f003 0207 	and.w	r2, r3, #7
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	440b      	add	r3, r1
 8005d62:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005d66:	681b      	ldr	r3, [r3, #0]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	7afb      	ldrb	r3, [r7, #11]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2200      	movs	r2, #0
 8005db6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dca:	7afb      	ldrb	r3, [r7, #11]
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f002 fe9e 	bl	8008b1c <USB_EPStartXfer>
 8005de0:	e005      	b.n	8005dee <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f002 fe97 	bl	8008b1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 0207 	and.w	r2, r3, #7
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d901      	bls.n	8005e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e04c      	b.n	8005eb0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da0e      	bge.n	8005e3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4413      	add	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	705a      	strb	r2, [r3, #1]
 8005e3a:	e00c      	b.n	8005e56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_PCD_EP_SetStall+0x7e>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e01c      	b.n	8005eb0 <HAL_PCD_EP_SetStall+0xb8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f003 ff69 	bl	8009d5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f004 f88e 	bl	8009fc2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d901      	bls.n	8005ed6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e040      	b.n	8005f58 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da0e      	bge.n	8005efc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	705a      	strb	r2, [r3, #1]
 8005efa:	e00e      	b.n	8005f1a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 0207 	and.w	r2, r3, #7
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_PCD_EP_ClrStall+0x82>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e00e      	b.n	8005f58 <HAL_PCD_EP_ClrStall+0xa0>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f003 ff57 	bl	8009dfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08e      	sub	sp, #56	; 0x38
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f68:	e2df      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f72:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005f80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8158 	bne.w	800623a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d152      	bne.n	800603a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	81fb      	strh	r3, [r7, #14]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	89fb      	ldrh	r3, [r7, #14]
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3328      	adds	r3, #40	; 0x28
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f005 fdcd 	bl	800bb9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 828e 	beq.w	800652a <PCD_EP_ISR_Handler+0x5ca>
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f040 8289 	bne.w	800652a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006024:	b2da      	uxtb	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	b292      	uxth	r2, r2
 800602c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006038:	e277      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800604a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800604c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006050:	2b00      	cmp	r3, #0
 8006052:	d034      	beq.n	80060be <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	3306      	adds	r3, #6
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006092:	b29b      	uxth	r3, r3
 8006094:	f003 ffe4 	bl	800a060 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060a4:	4013      	ands	r3, r2
 80060a6:	823b      	strh	r3, [r7, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	8a3a      	ldrh	r2, [r7, #16]
 80060ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060b2:	b292      	uxth	r2, r2
 80060b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f005 fd42 	bl	800bb40 <HAL_PCD_SetupStageCallback>
 80060bc:	e235      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80060be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f280 8231 	bge.w	800652a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	881b      	ldrh	r3, [r3, #0]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060d4:	4013      	ands	r3, r2
 80060d6:	83bb      	strh	r3, [r7, #28]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	8bba      	ldrh	r2, [r7, #28]
 80060de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060e2:	b292      	uxth	r2, r2
 80060e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	3306      	adds	r3, #6
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d019      	beq.n	800614e <PCD_EP_ISR_Handler+0x1ee>
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d015      	beq.n	800614e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	6959      	ldr	r1, [r3, #20]
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006132:	b29b      	uxth	r3, r3
 8006134:	f003 ff94 	bl	800a060 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	695a      	ldr	r2, [r3, #20]
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	441a      	add	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006146:	2100      	movs	r1, #0
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f005 fd0b 	bl	800bb64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	4413      	add	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d112      	bne.n	800619c <PCD_EP_ISR_Handler+0x23c>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006180:	b29a      	uxth	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006194:	b29a      	uxth	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e02f      	b.n	80061fc <PCD_EP_ISR_Handler+0x29c>
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b3e      	cmp	r3, #62	; 0x3e
 80061a2:	d813      	bhi.n	80061cc <PCD_EP_ISR_Handler+0x26c>
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	085b      	lsrs	r3, r3, #1
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <PCD_EP_ISR_Handler+0x25e>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	3301      	adds	r3, #1
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	801a      	strh	r2, [r3, #0]
 80061ca:	e017      	b.n	80061fc <PCD_EP_ISR_Handler+0x29c>
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	633b      	str	r3, [r7, #48]	; 0x30
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <PCD_EP_ISR_Handler+0x286>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	3b01      	subs	r3, #1
 80061e4:	633b      	str	r3, [r7, #48]	; 0x30
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	029b      	lsls	r3, r3, #10
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	827b      	strh	r3, [r7, #18]
 800620e:	8a7b      	ldrh	r3, [r7, #18]
 8006210:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006214:	827b      	strh	r3, [r7, #18]
 8006216:	8a7b      	ldrh	r3, [r7, #18]
 8006218:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800621c:	827b      	strh	r3, [r7, #18]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	8a7b      	ldrh	r3, [r7, #18]
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
 8006238:	e177      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800624c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006250:	2b00      	cmp	r3, #0
 8006252:	f280 80ea 	bge.w	800642a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f640 738f 	movw	r3, #3983	; 0xf8f
 800626c:	4013      	ands	r3, r2
 800626e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006284:	b292      	uxth	r2, r2
 8006286:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006288:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	7b1b      	ldrb	r3, [r3, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d122      	bne.n	80062ec <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	3306      	adds	r3, #6
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ce:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80062d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8087 	beq.w	80063e6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	6959      	ldr	r1, [r3, #20]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	88da      	ldrh	r2, [r3, #6]
 80062e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062e6:	f003 febb 	bl	800a060 <USB_ReadPMA>
 80062ea:	e07c      	b.n	80063e6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	78db      	ldrb	r3, [r3, #3]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d108      	bne.n	8006306 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80062f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062f6:	461a      	mov	r2, r3
 80062f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f923 	bl	8006546 <HAL_PCD_EP_DB_Receive>
 8006300:	4603      	mov	r3, r0
 8006302:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006304:	e06f      	b.n	80063e6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	847b      	strh	r3, [r7, #34]	; 0x22
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	441a      	add	r2, r3
 8006330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006342:	b29b      	uxth	r3, r3
 8006344:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d021      	beq.n	80063a4 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006368:	b29b      	uxth	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	3302      	adds	r3, #2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006388:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800638a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02a      	beq.n	80063e6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	6959      	ldr	r1, [r3, #20]
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	891a      	ldrh	r2, [r3, #8]
 800639c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800639e:	f003 fe5f 	bl	800a060 <USB_ReadPMA>
 80063a2:	e020      	b.n	80063e6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4413      	add	r3, r2
 80063b8:	3306      	adds	r3, #6
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80063ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	6959      	ldr	r1, [r3, #20]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	895a      	ldrh	r2, [r3, #10]
 80063e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063e2:	f003 fe3d 	bl	800a060 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	69da      	ldr	r2, [r3, #28]
 80063ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063ec:	441a      	add	r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063f8:	441a      	add	r2, r3
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <PCD_EP_ISR_Handler+0x4b0>
 8006406:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	429a      	cmp	r2, r3
 800640e:	d206      	bcs.n	800641e <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f005 fba4 	bl	800bb64 <HAL_PCD_DataOutStageCallback>
 800641c:	e005      	b.n	800642a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006424:	4618      	mov	r0, r3
 8006426:	f002 fb79 	bl	8008b1c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800642a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800642c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006430:	2b00      	cmp	r3, #0
 8006432:	d07a      	beq.n	800652a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8006434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	843b      	strh	r3, [r7, #32]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	8c3b      	ldrh	r3, [r7, #32]
 8006474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647c:	b29b      	uxth	r3, r3
 800647e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d108      	bne.n	800649a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800648c:	2b02      	cmp	r3, #2
 800648e:	d146      	bne.n	800651e <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006490:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d141      	bne.n	800651e <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4413      	add	r3, r2
 80064ae:	3302      	adds	r3, #2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d906      	bls.n	80064dc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	8bfb      	ldrh	r3, [r7, #30]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	619a      	str	r2, [r3, #24]
 80064da:	e002      	b.n	80064e2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f005 fb52 	bl	800bb9a <HAL_PCD_DataInStageCallback>
 80064f6:	e018      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	8bfb      	ldrh	r3, [r7, #30]
 80064fe:	441a      	add	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	69da      	ldr	r2, [r3, #28]
 8006508:	8bfb      	ldrh	r3, [r7, #30]
 800650a:	441a      	add	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f002 fb00 	bl	8008b1c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800651c:	e005      	b.n	800652a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800651e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006520:	461a      	mov	r2, r3
 8006522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f91b 	bl	8006760 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006532:	b29b      	uxth	r3, r3
 8006534:	b21b      	sxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	f6ff ad17 	blt.w	8005f6a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3738      	adds	r7, #56	; 0x38
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b088      	sub	sp, #32
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	4613      	mov	r3, r2
 8006552:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d07e      	beq.n	800665c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	4413      	add	r3, r2
 8006572:	3302      	adds	r3, #2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006586:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	8b7b      	ldrh	r3, [r7, #26]
 800658e:	429a      	cmp	r2, r3
 8006590:	d306      	bcc.n	80065a0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	8b7b      	ldrh	r3, [r7, #26]
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	619a      	str	r2, [r3, #24]
 800659e:	e002      	b.n	80065a6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2200      	movs	r2, #0
 80065a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d123      	bne.n	80065f6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	833b      	strh	r3, [r7, #24]
 80065ca:	8b3b      	ldrh	r3, [r7, #24]
 80065cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d0:	833b      	strh	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	8b3b      	ldrh	r3, [r7, #24]
 80065e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01f      	beq.n	8006640 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	82fb      	strh	r3, [r7, #22]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	441a      	add	r2, r3
 800662a:	8afb      	ldrh	r3, [r7, #22]
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006640:	8b7b      	ldrh	r3, [r7, #26]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8087 	beq.w	8006756 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	6959      	ldr	r1, [r3, #20]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	891a      	ldrh	r2, [r3, #8]
 8006654:	8b7b      	ldrh	r3, [r7, #26]
 8006656:	f003 fd03 	bl	800a060 <USB_ReadPMA>
 800665a:	e07c      	b.n	8006756 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4413      	add	r3, r2
 8006670:	3306      	adds	r3, #6
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006684:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	8b7b      	ldrh	r3, [r7, #26]
 800668c:	429a      	cmp	r2, r3
 800668e:	d306      	bcc.n	800669e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	699a      	ldr	r2, [r3, #24]
 8006694:	8b7b      	ldrh	r3, [r7, #26]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	619a      	str	r2, [r3, #24]
 800669c:	e002      	b.n	80066a4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2200      	movs	r2, #0
 80066a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d123      	bne.n	80066f4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	83fb      	strh	r3, [r7, #30]
 80066c8:	8bfb      	ldrh	r3, [r7, #30]
 80066ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066ce:	83fb      	strh	r3, [r7, #30]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	8bfb      	ldrh	r3, [r7, #30]
 80066e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80066f4:	88fb      	ldrh	r3, [r7, #6]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d11f      	bne.n	800673e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006718:	83bb      	strh	r3, [r7, #28]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	8bbb      	ldrh	r3, [r7, #28]
 800672a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800673a:	b29b      	uxth	r3, r3
 800673c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800673e:	8b7b      	ldrh	r3, [r7, #26]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6959      	ldr	r1, [r3, #20]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	895a      	ldrh	r2, [r3, #10]
 8006750:	8b7b      	ldrh	r3, [r7, #26]
 8006752:	f003 fc85 	bl	800a060 <USB_ReadPMA>
    }
  }

  return count;
 8006756:	8b7b      	ldrh	r3, [r7, #26]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b092      	sub	sp, #72	; 0x48
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8132 	beq.w	80069de <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006782:	b29b      	uxth	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4413      	add	r3, r2
 800678e:	3302      	adds	r3, #2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d906      	bls.n	80067bc <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	619a      	str	r2, [r3, #24]
 80067ba:	e002      	b.n	80067c2 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d12c      	bne.n	8006824 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	4619      	mov	r1, r3
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f005 f9e2 	bl	800bb9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067d6:	88fb      	ldrh	r3, [r7, #6]
 80067d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 822f 	beq.w	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	827b      	strh	r3, [r7, #18]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	8a7b      	ldrh	r3, [r7, #18]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
 8006822:	e20d      	b.n	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01f      	beq.n	800686e <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006848:	84bb      	strh	r3, [r7, #36]	; 0x24
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006874:	2b01      	cmp	r3, #1
 8006876:	f040 81e3 	bne.w	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	695a      	ldr	r2, [r3, #20]
 800687e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006880:	441a      	add	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	69da      	ldr	r2, [r3, #28]
 800688a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800688c:	441a      	add	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6a1a      	ldr	r2, [r3, #32]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d309      	bcc.n	80068b2 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6a1a      	ldr	r2, [r3, #32]
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	621a      	str	r2, [r3, #32]
 80068b0:	e014      	b.n	80068dc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80068ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068c6:	e009      	b.n	80068dc <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d155      	bne.n	8006990 <HAL_PCD_EP_DB_Transmit+0x230>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4413      	add	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	011a      	lsls	r2, r3, #4
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	4413      	add	r3, r2
 8006906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d112      	bne.n	8006938 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800691c:	b29a      	uxth	r2, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e047      	b.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x268>
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	2b3e      	cmp	r3, #62	; 0x3e
 800693c:	d811      	bhi.n	8006962 <HAL_PCD_EP_DB_Transmit+0x202>
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <HAL_PCD_EP_DB_Transmit+0x1f4>
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	3301      	adds	r3, #1
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	b29b      	uxth	r3, r3
 8006958:	029b      	lsls	r3, r3, #10
 800695a:	b29a      	uxth	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	e032      	b.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x268>
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_PCD_EP_DB_Transmit+0x218>
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	3b01      	subs	r3, #1
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	b29b      	uxth	r3, r3
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29a      	uxth	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e01b      	b.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x268>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d117      	bne.n	80069c8 <HAL_PCD_EP_DB_Transmit+0x268>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	4413      	add	r3, r2
 80069ae:	623b      	str	r3, [r7, #32]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6818      	ldr	r0, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6959      	ldr	r1, [r3, #20]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	891a      	ldrh	r2, [r3, #8]
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f003 fafe 	bl	8009fd8 <USB_WritePMA>
 80069dc:	e130      	b.n	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4413      	add	r3, r2
 80069f2:	3306      	adds	r3, #6
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d306      	bcc.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a18:	1ad2      	subs	r2, r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	619a      	str	r2, [r3, #24]
 8006a1e:	e002      	b.n	8006a26 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2200      	movs	r2, #0
 8006a24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d12c      	bne.n	8006a88 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f005 f8b0 	bl	800bb9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 80fd 	bne.w	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
 8006a86:	e0db      	b.n	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a88:	88fb      	ldrh	r3, [r7, #6]
 8006a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11f      	bne.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	f040 80b1 	bne.w	8006c40 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ae4:	441a      	add	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006af0:	441a      	add	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d309      	bcc.n	8006b16 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	621a      	str	r2, [r3, #32]
 8006b14:	e014      	b.n	8006b40 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8006b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006b2a:	e009      	b.n	8006b40 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d155      	bne.n	8006bfa <HAL_PCD_EP_DB_Transmit+0x49a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b62:	4413      	add	r3, r2
 8006b64:	647b      	str	r3, [r7, #68]	; 0x44
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	011a      	lsls	r2, r3, #4
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b74:	643b      	str	r3, [r7, #64]	; 0x40
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d112      	bne.n	8006ba2 <HAL_PCD_EP_DB_Transmit+0x442>
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8a:	801a      	strh	r2, [r3, #0]
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	e044      	b.n	8006c2c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba6:	d811      	bhi.n	8006bcc <HAL_PCD_EP_DB_Transmit+0x46c>
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_PCD_EP_DB_Transmit+0x45e>
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	3301      	adds	r3, #1
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	029b      	lsls	r3, r3, #10
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	e02f      	b.n	8006c2c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x482>
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	3b01      	subs	r3, #1
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	029b      	lsls	r3, r3, #10
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e018      	b.n	8006c2c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d114      	bne.n	8006c2c <HAL_PCD_EP_DB_Transmit+0x4cc>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	4413      	add	r3, r2
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6959      	ldr	r1, [r3, #20]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	895a      	ldrh	r2, [r3, #10]
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f003 f9cc 	bl	8009fd8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5a:	823b      	strh	r3, [r7, #16]
 8006c5c:	8a3b      	ldrh	r3, [r7, #16]
 8006c5e:	f083 0310 	eor.w	r3, r3, #16
 8006c62:	823b      	strh	r3, [r7, #16]
 8006c64:	8a3b      	ldrh	r3, [r7, #16]
 8006c66:	f083 0320 	eor.w	r3, r3, #32
 8006c6a:	823b      	strh	r3, [r7, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	8a3b      	ldrh	r3, [r7, #16]
 8006c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3748      	adds	r7, #72	; 0x48
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	607b      	str	r3, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	817b      	strh	r3, [r7, #10]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006cac:	897b      	ldrh	r3, [r7, #10]
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cb8:	897b      	ldrh	r3, [r7, #10]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e009      	b.n	8006ce4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cd0:	897a      	ldrh	r2, [r7, #10]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006ce4:	893b      	ldrh	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d107      	bne.n	8006cfa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	80da      	strh	r2, [r3, #6]
 8006cf8:	e00b      	b.n	8006d12 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr
	...

08006d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e26c      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8087 	beq.w	8006e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d40:	4b92      	ldr	r3, [pc, #584]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d00c      	beq.n	8006d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d4c:	4b8f      	ldr	r3, [pc, #572]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d112      	bne.n	8006d7e <HAL_RCC_OscConfig+0x5e>
 8006d58:	4b8c      	ldr	r3, [pc, #560]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d10b      	bne.n	8006d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d66:	4b89      	ldr	r3, [pc, #548]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d06c      	beq.n	8006e4c <HAL_RCC_OscConfig+0x12c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d168      	bne.n	8006e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e246      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d86:	d106      	bne.n	8006d96 <HAL_RCC_OscConfig+0x76>
 8006d88:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a7f      	ldr	r2, [pc, #508]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e02e      	b.n	8006df4 <HAL_RCC_OscConfig+0xd4>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCC_OscConfig+0x98>
 8006d9e:	4b7b      	ldr	r3, [pc, #492]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a7a      	ldr	r2, [pc, #488]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4b78      	ldr	r3, [pc, #480]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a77      	ldr	r2, [pc, #476]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	e01d      	b.n	8006df4 <HAL_RCC_OscConfig+0xd4>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0xbc>
 8006dc2:	4b72      	ldr	r3, [pc, #456]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a71      	ldr	r2, [pc, #452]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b6f      	ldr	r3, [pc, #444]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a6e      	ldr	r2, [pc, #440]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0xd4>
 8006ddc:	4b6b      	ldr	r3, [pc, #428]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a6a      	ldr	r2, [pc, #424]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4b68      	ldr	r3, [pc, #416]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a67      	ldr	r2, [pc, #412]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfc:	f7fd f834 	bl	8003e68 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fd f830 	bl	8003e68 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	; 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e1fa      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b5d      	ldr	r3, [pc, #372]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f0      	beq.n	8006e04 <HAL_RCC_OscConfig+0xe4>
 8006e22:	e014      	b.n	8006e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fd f820 	bl	8003e68 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fd f81c 	bl	8003e68 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e1e6      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e3e:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x10c>
 8006e4a:	e000      	b.n	8006e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d063      	beq.n	8006f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e5a:	4b4c      	ldr	r3, [pc, #304]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e66:	4b49      	ldr	r3, [pc, #292]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d11c      	bne.n	8006eac <HAL_RCC_OscConfig+0x18c>
 8006e72:	4b46      	ldr	r3, [pc, #280]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d116      	bne.n	8006eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e7e:	4b43      	ldr	r3, [pc, #268]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <HAL_RCC_OscConfig+0x176>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e1ba      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e96:	4b3d      	ldr	r3, [pc, #244]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	4939      	ldr	r1, [pc, #228]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eaa:	e03a      	b.n	8006f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d020      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <HAL_RCC_OscConfig+0x270>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eba:	f7fc ffd5 	bl	8003e68 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ec2:	f7fc ffd1 	bl	8003e68 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e19b      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee0:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4927      	ldr	r1, [pc, #156]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
 8006ef4:	e015      	b.n	8006f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef6:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <HAL_RCC_OscConfig+0x270>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efc:	f7fc ffb4 	bl	8003e68 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fc ffb0 	bl	8003e68 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e17a      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d03a      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d019      	beq.n	8006f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b17      	ldr	r3, [pc, #92]	; (8006f94 <HAL_RCC_OscConfig+0x274>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f3c:	f7fc ff94 	bl	8003e68 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f44:	f7fc ff90 	bl	8003e68 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e15a      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <HAL_RCC_OscConfig+0x26c>)
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f0      	beq.n	8006f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f62:	2001      	movs	r0, #1
 8006f64:	f000 fac6 	bl	80074f4 <RCC_Delay>
 8006f68:	e01c      	b.n	8006fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_RCC_OscConfig+0x274>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f70:	f7fc ff7a 	bl	8003e68 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f76:	e00f      	b.n	8006f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f78:	f7fc ff76 	bl	8003e68 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d908      	bls.n	8006f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e140      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
 8006f8a:	bf00      	nop
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	42420000 	.word	0x42420000
 8006f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f98:	4b9e      	ldr	r3, [pc, #632]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e9      	bne.n	8006f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80a6 	beq.w	80070fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb6:	4b97      	ldr	r3, [pc, #604]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fc2:	4b94      	ldr	r3, [pc, #592]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	4a93      	ldr	r2, [pc, #588]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8006fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	61d3      	str	r3, [r2, #28]
 8006fce:	4b91      	ldr	r3, [pc, #580]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fde:	4b8e      	ldr	r3, [pc, #568]	; (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d118      	bne.n	800701c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fea:	4b8b      	ldr	r3, [pc, #556]	; (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a8a      	ldr	r2, [pc, #552]	; (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ff6:	f7fc ff37 	bl	8003e68 <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ffe:	f7fc ff33 	bl	8003e68 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b64      	cmp	r3, #100	; 0x64
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e0fd      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007010:	4b81      	ldr	r3, [pc, #516]	; (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d0f0      	beq.n	8006ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d106      	bne.n	8007032 <HAL_RCC_OscConfig+0x312>
 8007024:	4b7b      	ldr	r3, [pc, #492]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	4a7a      	ldr	r2, [pc, #488]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	6213      	str	r3, [r2, #32]
 8007030:	e02d      	b.n	800708e <HAL_RCC_OscConfig+0x36e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10c      	bne.n	8007054 <HAL_RCC_OscConfig+0x334>
 800703a:	4b76      	ldr	r3, [pc, #472]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	4a75      	ldr	r2, [pc, #468]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	6213      	str	r3, [r2, #32]
 8007046:	4b73      	ldr	r3, [pc, #460]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	4a72      	ldr	r2, [pc, #456]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800704c:	f023 0304 	bic.w	r3, r3, #4
 8007050:	6213      	str	r3, [r2, #32]
 8007052:	e01c      	b.n	800708e <HAL_RCC_OscConfig+0x36e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b05      	cmp	r3, #5
 800705a:	d10c      	bne.n	8007076 <HAL_RCC_OscConfig+0x356>
 800705c:	4b6d      	ldr	r3, [pc, #436]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	4a6c      	ldr	r2, [pc, #432]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007062:	f043 0304 	orr.w	r3, r3, #4
 8007066:	6213      	str	r3, [r2, #32]
 8007068:	4b6a      	ldr	r3, [pc, #424]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	4a69      	ldr	r2, [pc, #420]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	6213      	str	r3, [r2, #32]
 8007074:	e00b      	b.n	800708e <HAL_RCC_OscConfig+0x36e>
 8007076:	4b67      	ldr	r3, [pc, #412]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	4a66      	ldr	r2, [pc, #408]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	6213      	str	r3, [r2, #32]
 8007082:	4b64      	ldr	r3, [pc, #400]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4a63      	ldr	r2, [pc, #396]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007088:	f023 0304 	bic.w	r3, r3, #4
 800708c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007096:	f7fc fee7 	bl	8003e68 <HAL_GetTick>
 800709a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709c:	e00a      	b.n	80070b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800709e:	f7fc fee3 	bl	8003e68 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e0ab      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b4:	4b57      	ldr	r3, [pc, #348]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0ee      	beq.n	800709e <HAL_RCC_OscConfig+0x37e>
 80070c0:	e014      	b.n	80070ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c2:	f7fc fed1 	bl	8003e68 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c8:	e00a      	b.n	80070e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ca:	f7fc fecd 	bl	8003e68 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e095      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e0:	4b4c      	ldr	r3, [pc, #304]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1ee      	bne.n	80070ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d105      	bne.n	80070fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f2:	4b48      	ldr	r3, [pc, #288]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	4a47      	ldr	r2, [pc, #284]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80070f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8081 	beq.w	800720a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007108:	4b42      	ldr	r3, [pc, #264]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 030c 	and.w	r3, r3, #12
 8007110:	2b08      	cmp	r3, #8
 8007112:	d061      	beq.n	80071d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d146      	bne.n	80071aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800711c:	4b3f      	ldr	r3, [pc, #252]	; (800721c <HAL_RCC_OscConfig+0x4fc>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007122:	f7fc fea1 	bl	8003e68 <HAL_GetTick>
 8007126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800712a:	f7fc fe9d 	bl	8003e68 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e067      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800713c:	4b35      	ldr	r3, [pc, #212]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f0      	bne.n	800712a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007150:	d108      	bne.n	8007164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007152:	4b30      	ldr	r3, [pc, #192]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	492d      	ldr	r1, [pc, #180]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007164:	4b2b      	ldr	r3, [pc, #172]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a19      	ldr	r1, [r3, #32]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	430b      	orrs	r3, r1
 8007176:	4927      	ldr	r1, [pc, #156]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800717c:	4b27      	ldr	r3, [pc, #156]	; (800721c <HAL_RCC_OscConfig+0x4fc>)
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007182:	f7fc fe71 	bl	8003e68 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800718a:	f7fc fe6d 	bl	8003e68 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e037      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCC_OscConfig+0x46a>
 80071a8:	e02f      	b.n	800720a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071aa:	4b1c      	ldr	r3, [pc, #112]	; (800721c <HAL_RCC_OscConfig+0x4fc>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b0:	f7fc fe5a 	bl	8003e68 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b8:	f7fc fe56 	bl	8003e68 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e020      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ca:	4b12      	ldr	r3, [pc, #72]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x498>
 80071d6:	e018      	b.n	800720a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e013      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_OscConfig+0x4f4>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d106      	bne.n	8007206 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007202:	429a      	cmp	r2, r3
 8007204:	d001      	beq.n	800720a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40021000 	.word	0x40021000
 8007218:	40007000 	.word	0x40007000
 800721c:	42420060 	.word	0x42420060

08007220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e0d0      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007234:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d910      	bls.n	8007264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007242:	4b67      	ldr	r3, [pc, #412]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 0207 	bic.w	r2, r3, #7
 800724a:	4965      	ldr	r1, [pc, #404]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	4313      	orrs	r3, r2
 8007250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b63      	ldr	r3, [pc, #396]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e0b8      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d020      	beq.n	80072b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800727c:	4b59      	ldr	r3, [pc, #356]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a58      	ldr	r2, [pc, #352]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007294:	4b53      	ldr	r3, [pc, #332]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a52      	ldr	r2, [pc, #328]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800729e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072a0:	4b50      	ldr	r3, [pc, #320]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	494d      	ldr	r1, [pc, #308]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d040      	beq.n	8007340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d107      	bne.n	80072d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	4b47      	ldr	r3, [pc, #284]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d115      	bne.n	80072fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e07f      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d107      	bne.n	80072ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072de:	4b41      	ldr	r3, [pc, #260]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e073      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ee:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e06b      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072fe:	4b39      	ldr	r3, [pc, #228]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f023 0203 	bic.w	r2, r3, #3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4936      	ldr	r1, [pc, #216]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	4313      	orrs	r3, r2
 800730e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007310:	f7fc fdaa 	bl	8003e68 <HAL_GetTick>
 8007314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007316:	e00a      	b.n	800732e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007318:	f7fc fda6 	bl	8003e68 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f241 3288 	movw	r2, #5000	; 0x1388
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e053      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732e:	4b2d      	ldr	r3, [pc, #180]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f003 020c 	and.w	r2, r3, #12
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	429a      	cmp	r2, r3
 800733e:	d1eb      	bne.n	8007318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007340:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d210      	bcs.n	8007370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800734e:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f023 0207 	bic.w	r2, r3, #7
 8007356:	4922      	ldr	r1, [pc, #136]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	4313      	orrs	r3, r2
 800735c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e032      	b.n	80073d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4916      	ldr	r1, [pc, #88]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800738a:	4313      	orrs	r3, r2
 800738c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	490e      	ldr	r1, [pc, #56]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ae:	f000 f821 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80073b2:	4601      	mov	r1, r0
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <HAL_RCC_ClockConfig+0x1c4>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	4a0a      	ldr	r2, [pc, #40]	; (80073e8 <HAL_RCC_ClockConfig+0x1c8>)
 80073c0:	5cd3      	ldrb	r3, [r2, r3]
 80073c2:	fa21 f303 	lsr.w	r3, r1, r3
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <HAL_RCC_ClockConfig+0x1cc>)
 80073c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <HAL_RCC_ClockConfig+0x1d0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fc fd08 	bl	8003de4 <HAL_InitTick>

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	40022000 	.word	0x40022000
 80073e4:	40021000 	.word	0x40021000
 80073e8:	0800eba4 	.word	0x0800eba4
 80073ec:	20001680 	.word	0x20001680
 80073f0:	20001684 	.word	0x20001684

080073f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f4:	b490      	push	{r4, r7}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073fa:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80073fc:	1d3c      	adds	r4, r7, #4
 80073fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007404:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	2300      	movs	r3, #0
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800741e:	4b23      	ldr	r3, [pc, #140]	; (80074ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 030c 	and.w	r3, r3, #12
 800742a:	2b04      	cmp	r3, #4
 800742c:	d002      	beq.n	8007434 <HAL_RCC_GetSysClockFreq+0x40>
 800742e:	2b08      	cmp	r3, #8
 8007430:	d003      	beq.n	800743a <HAL_RCC_GetSysClockFreq+0x46>
 8007432:	e02d      	b.n	8007490 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007434:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007436:	623b      	str	r3, [r7, #32]
      break;
 8007438:	e02d      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	0c9b      	lsrs	r3, r3, #18
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007446:	4413      	add	r3, r2
 8007448:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800744c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d013      	beq.n	8007480 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007458:	4b14      	ldr	r3, [pc, #80]	; (80074ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	0c5b      	lsrs	r3, r3, #17
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007466:	4413      	add	r3, r2
 8007468:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800746c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007472:	fb02 f203 	mul.w	r2, r2, r3
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	fbb2 f3f3 	udiv	r3, r2, r3
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
 800747e:	e004      	b.n	800748a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007484:	fb02 f303 	mul.w	r3, r2, r3
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	623b      	str	r3, [r7, #32]
      break;
 800748e:	e002      	b.n	8007496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007492:	623b      	str	r3, [r7, #32]
      break;
 8007494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007496:	6a3b      	ldr	r3, [r7, #32]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bc90      	pop	{r4, r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	0800eb48 	.word	0x0800eb48
 80074a8:	0800eb58 	.word	0x0800eb58
 80074ac:	40021000 	.word	0x40021000
 80074b0:	007a1200 	.word	0x007a1200
 80074b4:	003d0900 	.word	0x003d0900

080074b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80074be:	681b      	ldr	r3, [r3, #0]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr
 80074c8:	20001680 	.word	0x20001680

080074cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074d0:	f7ff fff2 	bl	80074b8 <HAL_RCC_GetHCLKFreq>
 80074d4:	4601      	mov	r1, r0
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074e2:	5cd3      	ldrb	r3, [r2, r3]
 80074e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40021000 	.word	0x40021000
 80074f0:	0800ebb4 	.word	0x0800ebb4

080074f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <RCC_Delay+0x34>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <RCC_Delay+0x38>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	0a5b      	lsrs	r3, r3, #9
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	fb02 f303 	mul.w	r3, r2, r3
 800750e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007510:	bf00      	nop
  }
  while (Delay --);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1e5a      	subs	r2, r3, #1
 8007516:	60fa      	str	r2, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f9      	bne.n	8007510 <RCC_Delay+0x1c>
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20001680 	.word	0x20001680
 800752c:	10624dd3 	.word	0x10624dd3

08007530 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	d07d      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007550:	4b4f      	ldr	r3, [pc, #316]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800755c:	4b4c      	ldr	r3, [pc, #304]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	4a4b      	ldr	r2, [pc, #300]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007566:	61d3      	str	r3, [r2, #28]
 8007568:	4b49      	ldr	r3, [pc, #292]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007578:	4b46      	ldr	r3, [pc, #280]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d118      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007584:	4b43      	ldr	r3, [pc, #268]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a42      	ldr	r2, [pc, #264]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800758a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800758e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007590:	f7fc fc6a 	bl	8003e68 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007596:	e008      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007598:	f7fc fc66 	bl	8003e68 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	; 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e06d      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075aa:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075b6:	4b36      	ldr	r3, [pc, #216]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02e      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d027      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075d4:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075e4:	4b2c      	ldr	r3, [pc, #176]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075ea:	4a29      	ldr	r2, [pc, #164]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d014      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fa:	f7fc fc35 	bl	8003e68 <HAL_GetTick>
 80075fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007600:	e00a      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007602:	f7fc fc31 	bl	8003e68 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e036      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007618:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0ee      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4917      	ldr	r1, [pc, #92]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007632:	4313      	orrs	r3, r2
 8007634:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d105      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800763c:	4b14      	ldr	r3, [pc, #80]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	4a13      	ldr	r2, [pc, #76]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007654:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	490b      	ldr	r1, [pc, #44]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007662:	4313      	orrs	r3, r2
 8007664:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b00      	cmp	r3, #0
 8007670:	d008      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007672:	4b07      	ldr	r3, [pc, #28]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	4904      	ldr	r1, [pc, #16]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007680:	4313      	orrs	r3, r2
 8007682:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40021000 	.word	0x40021000
 8007694:	40007000 	.word	0x40007000
 8007698:	42420440 	.word	0x42420440

0800769c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e041      	b.n	8007732 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fc fa48 	bl	8003b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f000 f9a6 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <HAL_TIM_PWM_Start+0x24>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e022      	b.n	80077a6 <HAL_TIM_PWM_Start+0x6a>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d109      	bne.n	800777a <HAL_TIM_PWM_Start+0x3e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e015      	b.n	80077a6 <HAL_TIM_PWM_Start+0x6a>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start+0x58>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	bf14      	ite	ne
 800778c:	2301      	movne	r3, #1
 800778e:	2300      	moveq	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e008      	b.n	80077a6 <HAL_TIM_PWM_Start+0x6a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	bf14      	ite	ne
 80077a0:	2301      	movne	r3, #1
 80077a2:	2300      	moveq	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e072      	b.n	8007894 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d104      	bne.n	80077be <HAL_TIM_PWM_Start+0x82>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077bc:	e013      	b.n	80077e6 <HAL_TIM_PWM_Start+0xaa>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	d104      	bne.n	80077ce <HAL_TIM_PWM_Start+0x92>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077cc:	e00b      	b.n	80077e6 <HAL_TIM_PWM_Start+0xaa>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d104      	bne.n	80077de <HAL_TIM_PWM_Start+0xa2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077dc:	e003      	b.n	80077e6 <HAL_TIM_PWM_Start+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2201      	movs	r2, #1
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fb42 	bl	8007e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <HAL_TIM_PWM_Start+0x160>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d004      	beq.n	8007808 <HAL_TIM_PWM_Start+0xcc>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <HAL_TIM_PWM_Start+0x164>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d101      	bne.n	800780c <HAL_TIM_PWM_Start+0xd0>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_TIM_PWM_Start+0xd2>
 800780c:	2300      	movs	r3, #0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1d      	ldr	r2, [pc, #116]	; (800789c <HAL_TIM_PWM_Start+0x160>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d018      	beq.n	800785e <HAL_TIM_PWM_Start+0x122>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <HAL_TIM_PWM_Start+0x164>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIM_PWM_Start+0x122>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783e:	d00e      	beq.n	800785e <HAL_TIM_PWM_Start+0x122>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <HAL_TIM_PWM_Start+0x168>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIM_PWM_Start+0x122>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a16      	ldr	r2, [pc, #88]	; (80078a8 <HAL_TIM_PWM_Start+0x16c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_Start+0x122>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a14      	ldr	r2, [pc, #80]	; (80078ac <HAL_TIM_PWM_Start+0x170>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d111      	bne.n	8007882 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b06      	cmp	r3, #6
 800786e:	d010      	beq.n	8007892 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007880:	e007      	b.n	8007892 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40013400 	.word	0x40013400
 80078a4:	40000400 	.word	0x40000400
 80078a8:	40000800 	.word	0x40000800
 80078ac:	40000c00 	.word	0x40000c00

080078b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0ac      	b.n	8007a24 <HAL_TIM_PWM_ConfigChannel+0x174>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	f200 809f 	bhi.w	8007a18 <HAL_TIM_PWM_ConfigChannel+0x168>
 80078da:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007a19 	.word	0x08007a19
 80078e8:	08007a19 	.word	0x08007a19
 80078ec:	08007a19 	.word	0x08007a19
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007a19 	.word	0x08007a19
 80078f8:	08007a19 	.word	0x08007a19
 80078fc:	08007a19 	.word	0x08007a19
 8007900:	08007997 	.word	0x08007997
 8007904:	08007a19 	.word	0x08007a19
 8007908:	08007a19 	.word	0x08007a19
 800790c:	08007a19 	.word	0x08007a19
 8007910:	080079d7 	.word	0x080079d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f900 	bl	8007b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0208 	orr.w	r2, r2, #8
 800792e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0204 	bic.w	r2, r2, #4
 800793e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6999      	ldr	r1, [r3, #24]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	619a      	str	r2, [r3, #24]
      break;
 8007952:	e062      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f950 	bl	8007c00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800796e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800797e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6999      	ldr	r1, [r3, #24]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	619a      	str	r2, [r3, #24]
      break;
 8007994:	e041      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f9a3 	bl	8007ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0208 	orr.w	r2, r2, #8
 80079b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0204 	bic.w	r2, r2, #4
 80079c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69d9      	ldr	r1, [r3, #28]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	61da      	str	r2, [r3, #28]
      break;
 80079d4:	e021      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f9f7 	bl	8007dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	021a      	lsls	r2, r3, #8
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	61da      	str	r2, [r3, #28]
      break;
 8007a16:	e000      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <TIM_Base_SetConfig+0xe0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a32      	ldr	r2, [pc, #200]	; (8007b10 <TIM_Base_SetConfig+0xe4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00f      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a52:	d00b      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2f      	ldr	r2, [pc, #188]	; (8007b14 <TIM_Base_SetConfig+0xe8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2e      	ldr	r2, [pc, #184]	; (8007b18 <TIM_Base_SetConfig+0xec>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a2d      	ldr	r2, [pc, #180]	; (8007b1c <TIM_Base_SetConfig+0xf0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <TIM_Base_SetConfig+0xe0>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d013      	beq.n	8007aae <TIM_Base_SetConfig+0x82>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <TIM_Base_SetConfig+0xe4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00f      	beq.n	8007aae <TIM_Base_SetConfig+0x82>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a94:	d00b      	beq.n	8007aae <TIM_Base_SetConfig+0x82>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <TIM_Base_SetConfig+0xe8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d007      	beq.n	8007aae <TIM_Base_SetConfig+0x82>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <TIM_Base_SetConfig+0xec>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <TIM_Base_SetConfig+0x82>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <TIM_Base_SetConfig+0xf0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d108      	bne.n	8007ac0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <TIM_Base_SetConfig+0xe0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_Base_SetConfig+0xc8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <TIM_Base_SetConfig+0xe4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d103      	bne.n	8007afc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	615a      	str	r2, [r3, #20]
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40013400 	.word	0x40013400
 8007b14:	40000400 	.word	0x40000400
 8007b18:	40000800 	.word	0x40000800
 8007b1c:	40000c00 	.word	0x40000c00

08007b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 0302 	bic.w	r3, r3, #2
 8007b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a20      	ldr	r2, [pc, #128]	; (8007bf8 <TIM_OC1_SetConfig+0xd8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC1_SetConfig+0x64>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <TIM_OC1_SetConfig+0xdc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10c      	bne.n	8007b9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0308 	bic.w	r3, r3, #8
 8007b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f023 0304 	bic.w	r3, r3, #4
 8007b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC1_SetConfig+0xd8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC1_SetConfig+0x8e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a14      	ldr	r2, [pc, #80]	; (8007bfc <TIM_OC1_SetConfig+0xdc>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d111      	bne.n	8007bd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	621a      	str	r2, [r3, #32]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	40012c00 	.word	0x40012c00
 8007bfc:	40013400 	.word	0x40013400

08007c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f023 0210 	bic.w	r2, r3, #16
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0320 	bic.w	r3, r3, #32
 8007c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <TIM_OC2_SetConfig+0xe0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_OC2_SetConfig+0x68>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a20      	ldr	r2, [pc, #128]	; (8007ce4 <TIM_OC2_SetConfig+0xe4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10d      	bne.n	8007c84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <TIM_OC2_SetConfig+0xe0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0x94>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a15      	ldr	r2, [pc, #84]	; (8007ce4 <TIM_OC2_SetConfig+0xe4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d113      	bne.n	8007cbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400

08007ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a21      	ldr	r2, [pc, #132]	; (8007dc8 <TIM_OC3_SetConfig+0xe0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_OC3_SetConfig+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a20      	ldr	r2, [pc, #128]	; (8007dcc <TIM_OC3_SetConfig+0xe4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d10d      	bne.n	8007d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <TIM_OC3_SetConfig+0xe0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_OC3_SetConfig+0x92>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <TIM_OC3_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d113      	bne.n	8007da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40012c00 	.word	0x40012c00
 8007dcc:	40013400 	.word	0x40013400

08007dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	031b      	lsls	r3, r3, #12
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a11      	ldr	r2, [pc, #68]	; (8007e70 <TIM_OC4_SetConfig+0xa0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_OC4_SetConfig+0x68>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <TIM_OC4_SetConfig+0xa4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d109      	bne.n	8007e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40013400 	.word	0x40013400

08007e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f003 031f 	and.w	r3, r3, #31
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a1a      	ldr	r2, [r3, #32]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bc80      	pop	{r7}
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e050      	b.n	8007f7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a1b      	ldr	r2, [pc, #108]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d018      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a19      	ldr	r2, [pc, #100]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d013      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2e:	d00e      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a15      	ldr	r2, [pc, #84]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a14      	ldr	r2, [pc, #80]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a12      	ldr	r2, [pc, #72]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d10c      	bne.n	8007f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40013400 	.word	0x40013400
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00

08007f98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f98:	b084      	sub	sp, #16
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	f107 0014 	add.w	r0, r7, #20
 8007fa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	b004      	add	sp, #16
 8007fb6:	4770      	bx	lr

08007fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fc8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007fcc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007ff0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	b29b      	uxth	r3, r3
 8008002:	4013      	ands	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008030:	b084      	sub	sp, #16
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	f107 0014 	add.w	r0, r7, #20
 800803e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	b004      	add	sp, #16
 800806e:	4770      	bx	lr

08008070 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008070:	b480      	push	{r7}
 8008072:	b09b      	sub	sp, #108	; 0x6c
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d81f      	bhi.n	80080e2 <USB_ActivateEndpoint+0x72>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <USB_ActivateEndpoint+0x38>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080eb 	.word	0x080080eb
 80080b4:	080080c7 	.word	0x080080c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80080b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080c4:	e012      	b.n	80080ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80080c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80080ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080d2:	e00b      	b.n	80080ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80080d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080e0:	e004      	b.n	80080ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80080e8:	e000      	b.n	80080ec <USB_ActivateEndpoint+0x7c>
      break;
 80080ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	441a      	add	r2, r3
 80080f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810a:	b29b      	uxth	r3, r3
 800810c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008124:	b29a      	uxth	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008150:	b29b      	uxth	r3, r3
 8008152:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	7b1b      	ldrb	r3, [r3, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 8149 	bne.w	80083f0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8084 	beq.w	8008270 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	011a      	lsls	r2, r3, #4
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	88db      	ldrh	r3, [r3, #6]
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	81fb      	strh	r3, [r7, #14]
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01b      	beq.n	80081ec <USB_ActivateEndpoint+0x17c>
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	81bb      	strh	r3, [r7, #12]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	89bb      	ldrh	r3, [r7, #12]
 80081d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	78db      	ldrb	r3, [r3, #3]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d020      	beq.n	8008236 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820a:	813b      	strh	r3, [r7, #8]
 800820c:	893b      	ldrh	r3, [r7, #8]
 800820e:	f083 0320 	eor.w	r3, r3, #32
 8008212:	813b      	strh	r3, [r7, #8]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	893b      	ldrh	r3, [r7, #8]
 8008220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008230:	b29b      	uxth	r3, r3
 8008232:	8013      	strh	r3, [r2, #0]
 8008234:	e27f      	b.n	8008736 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	817b      	strh	r3, [r7, #10]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	897b      	ldrh	r3, [r7, #10]
 800825a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800825e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]
 800826e:	e262      	b.n	8008736 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	4413      	add	r3, r2
 8008282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	011a      	lsls	r2, r3, #4
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	4413      	add	r3, r2
 800828e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	4413      	add	r3, r2
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	011a      	lsls	r2, r3, #4
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	4413      	add	r3, r2
 80082c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082c6:	623b      	str	r3, [r7, #32]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d112      	bne.n	80082f6 <USB_ActivateEndpoint+0x286>
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082da:	b29a      	uxth	r2, r3
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e02f      	b.n	8008356 <USB_ActivateEndpoint+0x2e6>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b3e      	cmp	r3, #62	; 0x3e
 80082fc:	d813      	bhi.n	8008326 <USB_ActivateEndpoint+0x2b6>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	663b      	str	r3, [r7, #96]	; 0x60
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <USB_ActivateEndpoint+0x2a8>
 8008312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008314:	3301      	adds	r3, #1
 8008316:	663b      	str	r3, [r7, #96]	; 0x60
 8008318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800831a:	b29b      	uxth	r3, r3
 800831c:	029b      	lsls	r3, r3, #10
 800831e:	b29a      	uxth	r2, r3
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	801a      	strh	r2, [r3, #0]
 8008324:	e017      	b.n	8008356 <USB_ActivateEndpoint+0x2e6>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	663b      	str	r3, [r7, #96]	; 0x60
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <USB_ActivateEndpoint+0x2d0>
 800833a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800833c:	3b01      	subs	r3, #1
 800833e:	663b      	str	r3, [r7, #96]	; 0x60
 8008340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008342:	b29b      	uxth	r3, r3
 8008344:	029b      	lsls	r3, r3, #10
 8008346:	b29b      	uxth	r3, r3
 8008348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800834c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008350:	b29a      	uxth	r2, r3
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	83fb      	strh	r3, [r7, #30]
 8008364:	8bfb      	ldrh	r3, [r7, #30]
 8008366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01b      	beq.n	80083a6 <USB_ActivateEndpoint+0x336>
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008384:	83bb      	strh	r3, [r7, #28]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	8bbb      	ldrh	r3, [r7, #28]
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083bc:	837b      	strh	r3, [r7, #26]
 80083be:	8b7b      	ldrh	r3, [r7, #26]
 80083c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083c4:	837b      	strh	r3, [r7, #26]
 80083c6:	8b7b      	ldrh	r3, [r7, #26]
 80083c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083cc:	837b      	strh	r3, [r7, #26]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	441a      	add	r2, r3
 80083d8:	8b7b      	ldrh	r3, [r7, #26]
 80083da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8013      	strh	r3, [r2, #0]
 80083ee:	e1a2      	b.n	8008736 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008406:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008420:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008428:	b29b      	uxth	r3, r3
 800842a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008436:	b29b      	uxth	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800843c:	4413      	add	r3, r2
 800843e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	011a      	lsls	r2, r3, #4
 8008446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008448:	4413      	add	r3, r2
 800844a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800844e:	657b      	str	r3, [r7, #84]	; 0x54
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	891b      	ldrh	r3, [r3, #8]
 8008454:	085b      	lsrs	r3, r3, #1
 8008456:	b29b      	uxth	r3, r3
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800845e:	801a      	strh	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	653b      	str	r3, [r7, #80]	; 0x50
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846a:	b29b      	uxth	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008470:	4413      	add	r3, r2
 8008472:	653b      	str	r3, [r7, #80]	; 0x50
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	011a      	lsls	r2, r3, #4
 800847a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847c:	4413      	add	r3, r2
 800847e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	895b      	ldrh	r3, [r3, #10]
 8008488:	085b      	lsrs	r3, r3, #1
 800848a:	b29b      	uxth	r3, r3
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	b29a      	uxth	r2, r3
 8008490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008492:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8091 	bne.w	80085c0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80084ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d01b      	beq.n	80084ee <USB_ActivateEndpoint+0x47e>
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	441a      	add	r2, r3
 80084d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80084da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80084fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01b      	beq.n	800853e <USB_ActivateEndpoint+0x4ce>
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	441a      	add	r2, r3
 8008528:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800852a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800852e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800853a:	b29b      	uxth	r3, r3
 800853c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	b29b      	uxth	r3, r3
 800854c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008554:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008556:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800855c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800855e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008564:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	441a      	add	r2, r3
 8008570:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800859c:	867b      	strh	r3, [r7, #50]	; 0x32
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	441a      	add	r2, r3
 80085a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80085aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	8013      	strh	r3, [r2, #0]
 80085be:	e0ba      	b.n	8008736 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80085d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80085d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01d      	beq.n	8008618 <USB_ActivateEndpoint+0x5a8>
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	441a      	add	r2, r3
 8008600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008614:	b29b      	uxth	r3, r3
 8008616:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008628:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01d      	beq.n	8008670 <USB_ActivateEndpoint+0x600>
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	441a      	add	r2, r3
 8008658:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800865c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008668:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800866c:	b29b      	uxth	r3, r3
 800866e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	78db      	ldrb	r3, [r3, #3]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d024      	beq.n	80086c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008696:	f083 0320 	eor.w	r3, r3, #32
 800869a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]
 80086c0:	e01d      	b.n	80086fe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	441a      	add	r2, r3
 80086e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008714:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	441a      	add	r2, r3
 8008720:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008732:	b29b      	uxth	r3, r3
 8008734:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800873a:	4618      	mov	r0, r3
 800873c:	376c      	adds	r7, #108	; 0x6c
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr

08008744 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008744:	b480      	push	{r7}
 8008746:	b08d      	sub	sp, #52	; 0x34
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	7b1b      	ldrb	r3, [r3, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	f040 808e 	bne.w	8008874 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	785b      	ldrb	r3, [r3, #1]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d044      	beq.n	80087ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	81bb      	strh	r3, [r7, #12]
 800876e:	89bb      	ldrh	r3, [r7, #12]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <USB_DeactivateEndpoint+0x6c>
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878e:	817b      	strh	r3, [r7, #10]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	441a      	add	r2, r3
 800879a:	897b      	ldrh	r3, [r7, #10]
 800879c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c6:	813b      	strh	r3, [r7, #8]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	441a      	add	r2, r3
 80087d2:	893b      	ldrh	r3, [r7, #8]
 80087d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	8013      	strh	r3, [r2, #0]
 80087e8:	e192      	b.n	8008b10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	827b      	strh	r3, [r7, #18]
 80087f8:	8a7b      	ldrh	r3, [r7, #18]
 80087fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01b      	beq.n	800883a <USB_DeactivateEndpoint+0xf6>
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
 8008810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008818:	823b      	strh	r3, [r7, #16]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	8a3b      	ldrh	r3, [r7, #16]
 8008826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008836:	b29b      	uxth	r3, r3
 8008838:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008850:	81fb      	strh	r3, [r7, #14]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	441a      	add	r2, r3
 800885c:	89fb      	ldrh	r3, [r7, #14]
 800885e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800886a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886e:	b29b      	uxth	r3, r3
 8008870:	8013      	strh	r3, [r2, #0]
 8008872:	e14d      	b.n	8008b10 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f040 80a5 	bne.w	80089c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	843b      	strh	r3, [r7, #32]
 800888c:	8c3b      	ldrh	r3, [r7, #32]
 800888e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d01b      	beq.n	80088ce <USB_DeactivateEndpoint+0x18a>
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ac:	83fb      	strh	r3, [r7, #30]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	441a      	add	r2, r3
 80088b8:	8bfb      	ldrh	r3, [r7, #30]
 80088ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	83bb      	strh	r3, [r7, #28]
 80088dc:	8bbb      	ldrh	r3, [r7, #28]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d01b      	beq.n	800891e <USB_DeactivateEndpoint+0x1da>
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fc:	837b      	strh	r3, [r7, #26]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	441a      	add	r2, r3
 8008908:	8b7b      	ldrh	r3, [r7, #26]
 800890a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800890e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800891a:	b29b      	uxth	r3, r3
 800891c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008934:	833b      	strh	r3, [r7, #24]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	441a      	add	r2, r3
 8008940:	8b3b      	ldrh	r3, [r7, #24]
 8008942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008952:	b29b      	uxth	r3, r3
 8008954:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800896c:	82fb      	strh	r3, [r7, #22]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	441a      	add	r2, r3
 8008978:	8afb      	ldrh	r3, [r7, #22]
 800897a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800897e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898a:	b29b      	uxth	r3, r3
 800898c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a4:	82bb      	strh	r3, [r7, #20]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	441a      	add	r2, r3
 80089b0:	8abb      	ldrh	r3, [r7, #20]
 80089b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	8013      	strh	r3, [r2, #0]
 80089c6:	e0a3      	b.n	8008b10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <USB_DeactivateEndpoint+0x2d4>
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	441a      	add	r2, r3
 8008a02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01b      	beq.n	8008a68 <USB_DeactivateEndpoint+0x324>
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	441a      	add	r2, r3
 8008a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	441a      	add	r2, r3
 8008ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	847b      	strh	r3, [r7, #34]	; 0x22
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	441a      	add	r2, r3
 8008afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3734      	adds	r7, #52	; 0x34
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b0c4      	sub	sp, #272	; 0x110
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	6018      	str	r0, [r3, #0]
 8008b26:	463b      	mov	r3, r7
 8008b28:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	f040 8557 	bne.w	80095e4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b36:	463b      	mov	r3, r7
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d905      	bls.n	8008b52 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008b46:	463b      	mov	r3, r7
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b50:	e004      	b.n	8008b5c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008b52:	463b      	mov	r3, r7
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	7b1b      	ldrb	r3, [r3, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d12c      	bne.n	8008bc0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b66:	463b      	mov	r3, r7
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6959      	ldr	r1, [r3, #20]
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	88da      	ldrh	r2, [r3, #6]
 8008b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	1d38      	adds	r0, r7, #4
 8008b7a:	6800      	ldr	r0, [r0, #0]
 8008b7c:	f001 fa2c 	bl	8009fd8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b80:	1d3b      	adds	r3, r7, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	1d3b      	adds	r3, r7, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	461a      	mov	r2, r3
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	4413      	add	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	463b      	mov	r3, r7
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	011a      	lsls	r2, r3, #4
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	f107 0310 	add.w	r3, r7, #16
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	f000 bcdd 	b.w	800957a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	78db      	ldrb	r3, [r3, #3]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	f040 8347 	bne.w	800925a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008bcc:	463b      	mov	r3, r7
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a1a      	ldr	r2, [r3, #32]
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	f240 82eb 	bls.w	80091b4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008bde:	1d3b      	adds	r3, r7, #4
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	463b      	mov	r3, r7
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	441a      	add	r2, r3
 8008c0a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c16:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c22:	463b      	mov	r3, r7
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6a1a      	ldr	r2, [r3, #32]
 8008c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c2c:	1ad2      	subs	r2, r2, r3
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c34:	1d3b      	adds	r3, r7, #4
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	463b      	mov	r3, r7
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8159 	beq.w	8008f02 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	637b      	str	r3, [r7, #52]	; 0x34
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d164      	bne.n	8008d2a <USB_EPStartXfer+0x20e>
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	4413      	add	r3, r2
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c78:	463b      	mov	r3, r7
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	011a      	lsls	r2, r3, #4
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	4413      	add	r3, r2
 8008c84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d112      	bne.n	8008cb8 <USB_EPStartXfer+0x19c>
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	801a      	strh	r2, [r3, #0]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	801a      	strh	r2, [r3, #0]
 8008cb6:	e054      	b.n	8008d62 <USB_EPStartXfer+0x246>
 8008cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cbc:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbe:	d817      	bhi.n	8008cf0 <USB_EPStartXfer+0x1d4>
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cc4:	085b      	lsrs	r3, r3, #1
 8008cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d004      	beq.n	8008ce0 <USB_EPStartXfer+0x1c4>
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cda:	3301      	adds	r3, #1
 8008cdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	029b      	lsls	r3, r3, #10
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e038      	b.n	8008d62 <USB_EPStartXfer+0x246>
 8008cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <USB_EPStartXfer+0x1f4>
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	029b      	lsls	r3, r3, #10
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	e01b      	b.n	8008d62 <USB_EPStartXfer+0x246>
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d116      	bne.n	8008d62 <USB_EPStartXfer+0x246>
 8008d34:	1d3b      	adds	r3, r7, #4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d42:	4413      	add	r3, r2
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
 8008d46:	463b      	mov	r3, r7
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	011a      	lsls	r2, r3, #4
 8008d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d50:	4413      	add	r3, r2
 8008d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d56:	633b      	str	r3, [r7, #48]	; 0x30
 8008d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d62:	463b      	mov	r3, r7
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	895b      	ldrh	r3, [r3, #10]
 8008d68:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6959      	ldr	r1, [r3, #20]
 8008d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008d7c:	1d38      	adds	r0, r7, #4
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	f001 f92a 	bl	8009fd8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d84:	463b      	mov	r3, r7
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695a      	ldr	r2, [r3, #20]
 8008d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d8e:	441a      	add	r2, r3
 8008d90:	463b      	mov	r3, r7
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d96:	463b      	mov	r3, r7
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6a1a      	ldr	r2, [r3, #32]
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d909      	bls.n	8008dba <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8008da6:	463b      	mov	r3, r7
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008db0:	1ad2      	subs	r2, r2, r3
 8008db2:	463b      	mov	r3, r7
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	621a      	str	r2, [r3, #32]
 8008db8:	e008      	b.n	8008dcc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dcc:	463b      	mov	r3, r7
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d164      	bne.n	8008ea0 <USB_EPStartXfer+0x384>
 8008dd6:	1d3b      	adds	r3, r7, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	61fb      	str	r3, [r7, #28]
 8008ddc:	1d3b      	adds	r3, r7, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	461a      	mov	r2, r3
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	4413      	add	r3, r2
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	463b      	mov	r3, r7
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	011a      	lsls	r2, r3, #4
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dfe:	61bb      	str	r3, [r7, #24]
 8008e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d112      	bne.n	8008e2e <USB_EPStartXfer+0x312>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	801a      	strh	r2, [r3, #0]
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	801a      	strh	r2, [r3, #0]
 8008e2c:	e057      	b.n	8008ede <USB_EPStartXfer+0x3c2>
 8008e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e32:	2b3e      	cmp	r3, #62	; 0x3e
 8008e34:	d817      	bhi.n	8008e66 <USB_EPStartXfer+0x34a>
 8008e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <USB_EPStartXfer+0x33a>
 8008e4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e50:	3301      	adds	r3, #1
 8008e52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	e03b      	b.n	8008ede <USB_EPStartXfer+0x3c2>
 8008e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e6a:	095b      	lsrs	r3, r3, #5
 8008e6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d104      	bne.n	8008e86 <USB_EPStartXfer+0x36a>
 8008e7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e80:	3b01      	subs	r3, #1
 8008e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008e86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	029b      	lsls	r3, r3, #10
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	801a      	strh	r2, [r3, #0]
 8008e9e:	e01e      	b.n	8008ede <USB_EPStartXfer+0x3c2>
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d119      	bne.n	8008ede <USB_EPStartXfer+0x3c2>
 8008eaa:	1d3b      	adds	r3, r7, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb0:	1d3b      	adds	r3, r7, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	4413      	add	r3, r2
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	011a      	lsls	r2, r3, #4
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	4413      	add	r3, r2
 8008ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ed2:	623b      	str	r3, [r7, #32]
 8008ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ede:	463b      	mov	r3, r7
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	891b      	ldrh	r3, [r3, #8]
 8008ee4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ee8:	463b      	mov	r3, r7
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6959      	ldr	r1, [r3, #20]
 8008eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008ef8:	1d38      	adds	r0, r7, #4
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	f001 f86c 	bl	8009fd8 <USB_WritePMA>
 8008f00:	e33b      	b.n	800957a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f02:	463b      	mov	r3, r7
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d164      	bne.n	8008fd6 <USB_EPStartXfer+0x4ba>
 8008f0c:	1d3b      	adds	r3, r7, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f20:	4413      	add	r3, r2
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f24:	463b      	mov	r3, r7
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	011a      	lsls	r2, r3, #4
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d112      	bne.n	8008f64 <USB_EPStartXfer+0x448>
 8008f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4c:	801a      	strh	r2, [r3, #0]
 8008f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e057      	b.n	8009014 <USB_EPStartXfer+0x4f8>
 8008f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f68:	2b3e      	cmp	r3, #62	; 0x3e
 8008f6a:	d817      	bhi.n	8008f9c <USB_EPStartXfer+0x480>
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d004      	beq.n	8008f8c <USB_EPStartXfer+0x470>
 8008f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f86:	3301      	adds	r3, #1
 8008f88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	029b      	lsls	r3, r3, #10
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e03b      	b.n	8009014 <USB_EPStartXfer+0x4f8>
 8008f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <USB_EPStartXfer+0x4a0>
 8008fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	029b      	lsls	r3, r3, #10
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e01e      	b.n	8009014 <USB_EPStartXfer+0x4f8>
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d119      	bne.n	8009014 <USB_EPStartXfer+0x4f8>
 8008fe0:	1d3b      	adds	r3, r7, #4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8008fe6:	1d3b      	adds	r3, r7, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff4:	4413      	add	r3, r2
 8008ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	011a      	lsls	r2, r3, #4
 8009000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009002:	4413      	add	r3, r2
 8009004:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009008:	653b      	str	r3, [r7, #80]	; 0x50
 800900a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800900e:	b29a      	uxth	r2, r3
 8009010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009012:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009014:	463b      	mov	r3, r7
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	891b      	ldrh	r3, [r3, #8]
 800901a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800901e:	463b      	mov	r3, r7
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6959      	ldr	r1, [r3, #20]
 8009024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009028:	b29b      	uxth	r3, r3
 800902a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800902e:	1d38      	adds	r0, r7, #4
 8009030:	6800      	ldr	r0, [r0, #0]
 8009032:	f000 ffd1 	bl	8009fd8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009036:	463b      	mov	r3, r7
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695a      	ldr	r2, [r3, #20]
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009040:	441a      	add	r2, r3
 8009042:	463b      	mov	r3, r7
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009048:	463b      	mov	r3, r7
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6a1a      	ldr	r2, [r3, #32]
 800904e:	463b      	mov	r3, r7
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	429a      	cmp	r2, r3
 8009056:	d909      	bls.n	800906c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8009058:	463b      	mov	r3, r7
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6a1a      	ldr	r2, [r3, #32]
 800905e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	463b      	mov	r3, r7
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	621a      	str	r2, [r3, #32]
 800906a:	e008      	b.n	800907e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800906c:	463b      	mov	r3, r7
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800907e:	1d3b      	adds	r3, r7, #4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	647b      	str	r3, [r7, #68]	; 0x44
 8009084:	463b      	mov	r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d164      	bne.n	8009158 <USB_EPStartXfer+0x63c>
 800908e:	1d3b      	adds	r3, r7, #4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800909c:	b29b      	uxth	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a2:	4413      	add	r3, r2
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	011a      	lsls	r2, r3, #4
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80090b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d112      	bne.n	80090e6 <USB_EPStartXfer+0x5ca>
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090de:	b29a      	uxth	r2, r3
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	801a      	strh	r2, [r3, #0]
 80090e4:	e054      	b.n	8009190 <USB_EPStartXfer+0x674>
 80090e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ea:	2b3e      	cmp	r3, #62	; 0x3e
 80090ec:	d817      	bhi.n	800911e <USB_EPStartXfer+0x602>
 80090ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <USB_EPStartXfer+0x5f2>
 8009104:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009108:	3301      	adds	r3, #1
 800910a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800910e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009112:	b29b      	uxth	r3, r3
 8009114:	029b      	lsls	r3, r3, #10
 8009116:	b29a      	uxth	r2, r3
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e038      	b.n	8009190 <USB_EPStartXfer+0x674>
 800911e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009122:	095b      	lsrs	r3, r3, #5
 8009124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800912c:	f003 031f 	and.w	r3, r3, #31
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <USB_EPStartXfer+0x622>
 8009134:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009138:	3b01      	subs	r3, #1
 800913a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800913e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009142:	b29b      	uxth	r3, r3
 8009144:	029b      	lsls	r3, r3, #10
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009150:	b29a      	uxth	r2, r3
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	e01b      	b.n	8009190 <USB_EPStartXfer+0x674>
 8009158:	463b      	mov	r3, r7
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d116      	bne.n	8009190 <USB_EPStartXfer+0x674>
 8009162:	1d3b      	adds	r3, r7, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800916a:	b29b      	uxth	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009170:	4413      	add	r3, r2
 8009172:	647b      	str	r3, [r7, #68]	; 0x44
 8009174:	463b      	mov	r3, r7
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	011a      	lsls	r2, r3, #4
 800917c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917e:	4413      	add	r3, r2
 8009180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009184:	643b      	str	r3, [r7, #64]	; 0x40
 8009186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918a:	b29a      	uxth	r2, r3
 800918c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	895b      	ldrh	r3, [r3, #10]
 8009196:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800919a:	463b      	mov	r3, r7
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6959      	ldr	r1, [r3, #20]
 80091a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80091aa:	1d38      	adds	r0, r7, #4
 80091ac:	6800      	ldr	r0, [r0, #0]
 80091ae:	f000 ff13 	bl	8009fd8 <USB_WritePMA>
 80091b2:	e1e2      	b.n	800957a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80091b4:	463b      	mov	r3, r7
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80091be:	1d3b      	adds	r3, r7, #4
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	463b      	mov	r3, r7
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80091dc:	1d3b      	adds	r3, r7, #4
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	463b      	mov	r3, r7
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	441a      	add	r2, r3
 80091ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009202:	1d3b      	adds	r3, r7, #4
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	663b      	str	r3, [r7, #96]	; 0x60
 8009208:	1d3b      	adds	r3, r7, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009210:	b29b      	uxth	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009216:	4413      	add	r3, r2
 8009218:	663b      	str	r3, [r7, #96]	; 0x60
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	011a      	lsls	r2, r3, #4
 8009222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009224:	4413      	add	r3, r2
 8009226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800922a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800922c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009230:	b29a      	uxth	r2, r3
 8009232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009234:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009236:	463b      	mov	r3, r7
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	891b      	ldrh	r3, [r3, #8]
 800923c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009240:	463b      	mov	r3, r7
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6959      	ldr	r1, [r3, #20]
 8009246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800924a:	b29b      	uxth	r3, r3
 800924c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009250:	1d38      	adds	r0, r7, #4
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	f000 fec0 	bl	8009fd8 <USB_WritePMA>
 8009258:	e18f      	b.n	800957a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800925a:	1d3b      	adds	r3, r7, #4
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	463b      	mov	r3, r7
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 808f 	beq.w	8009394 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009276:	1d3b      	adds	r3, r7, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	67bb      	str	r3, [r7, #120]	; 0x78
 800927c:	463b      	mov	r3, r7
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	785b      	ldrb	r3, [r3, #1]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d164      	bne.n	8009350 <USB_EPStartXfer+0x834>
 8009286:	1d3b      	adds	r3, r7, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	673b      	str	r3, [r7, #112]	; 0x70
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009294:	b29b      	uxth	r3, r3
 8009296:	461a      	mov	r2, r3
 8009298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800929a:	4413      	add	r3, r2
 800929c:	673b      	str	r3, [r7, #112]	; 0x70
 800929e:	463b      	mov	r3, r7
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	011a      	lsls	r2, r3, #4
 80092a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092a8:	4413      	add	r3, r2
 80092aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d112      	bne.n	80092de <USB_EPStartXfer+0x7c2>
 80092b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092da:	801a      	strh	r2, [r3, #0]
 80092dc:	e054      	b.n	8009388 <USB_EPStartXfer+0x86c>
 80092de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e2:	2b3e      	cmp	r3, #62	; 0x3e
 80092e4:	d817      	bhi.n	8009316 <USB_EPStartXfer+0x7fa>
 80092e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USB_EPStartXfer+0x7ea>
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009300:	3301      	adds	r3, #1
 8009302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930a:	b29b      	uxth	r3, r3
 800930c:	029b      	lsls	r3, r3, #10
 800930e:	b29a      	uxth	r2, r3
 8009310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	e038      	b.n	8009388 <USB_EPStartXfer+0x86c>
 8009316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800931a:	095b      	lsrs	r3, r3, #5
 800931c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009324:	f003 031f 	and.w	r3, r3, #31
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <USB_EPStartXfer+0x81a>
 800932c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009330:	3b01      	subs	r3, #1
 8009332:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29b      	uxth	r3, r3
 8009340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009348:	b29a      	uxth	r2, r3
 800934a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800934c:	801a      	strh	r2, [r3, #0]
 800934e:	e01b      	b.n	8009388 <USB_EPStartXfer+0x86c>
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d116      	bne.n	8009388 <USB_EPStartXfer+0x86c>
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009362:	b29b      	uxth	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009368:	4413      	add	r3, r2
 800936a:	67bb      	str	r3, [r7, #120]	; 0x78
 800936c:	463b      	mov	r3, r7
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	011a      	lsls	r2, r3, #4
 8009374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009376:	4413      	add	r3, r2
 8009378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800937c:	677b      	str	r3, [r7, #116]	; 0x74
 800937e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009382:	b29a      	uxth	r2, r3
 8009384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009386:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009388:	463b      	mov	r3, r7
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	895b      	ldrh	r3, [r3, #10]
 800938e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009392:	e097      	b.n	80094c4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009394:	463b      	mov	r3, r7
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d168      	bne.n	8009470 <USB_EPStartXfer+0x954>
 800939e:	1d3b      	adds	r3, r7, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093b6:	4413      	add	r3, r2
 80093b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093bc:	463b      	mov	r3, r7
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	011a      	lsls	r2, r3, #4
 80093c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093c8:	4413      	add	r3, r2
 80093ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d112      	bne.n	80093fe <USB_EPStartXfer+0x8e2>
 80093d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	e05d      	b.n	80094ba <USB_EPStartXfer+0x99e>
 80093fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009402:	2b3e      	cmp	r3, #62	; 0x3e
 8009404:	d817      	bhi.n	8009436 <USB_EPStartXfer+0x91a>
 8009406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800940a:	085b      	lsrs	r3, r3, #1
 800940c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <USB_EPStartXfer+0x90a>
 800941c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009420:	3301      	adds	r3, #1
 8009422:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800942a:	b29b      	uxth	r3, r3
 800942c:	029b      	lsls	r3, r3, #10
 800942e:	b29a      	uxth	r2, r3
 8009430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	e041      	b.n	80094ba <USB_EPStartXfer+0x99e>
 8009436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800943a:	095b      	lsrs	r3, r3, #5
 800943c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009444:	f003 031f 	and.w	r3, r3, #31
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <USB_EPStartXfer+0x93a>
 800944c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009450:	3b01      	subs	r3, #1
 8009452:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800945a:	b29b      	uxth	r3, r3
 800945c:	029b      	lsls	r3, r3, #10
 800945e:	b29b      	uxth	r3, r3
 8009460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009468:	b29a      	uxth	r2, r3
 800946a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800946c:	801a      	strh	r2, [r3, #0]
 800946e:	e024      	b.n	80094ba <USB_EPStartXfer+0x99e>
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d11f      	bne.n	80094ba <USB_EPStartXfer+0x99e>
 800947a:	1d3b      	adds	r3, r7, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800948a:	b29b      	uxth	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009492:	4413      	add	r3, r2
 8009494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009498:	463b      	mov	r3, r7
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	011a      	lsls	r2, r3, #4
 80094a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094a4:	4413      	add	r3, r2
 80094a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094ba:	463b      	mov	r3, r7
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	891b      	ldrh	r3, [r3, #8]
 80094c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094c4:	463b      	mov	r3, r7
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6959      	ldr	r1, [r3, #20]
 80094ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80094d4:	1d38      	adds	r0, r7, #4
 80094d6:	6800      	ldr	r0, [r0, #0]
 80094d8:	f000 fd7e 	bl	8009fd8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80094dc:	463b      	mov	r3, r7
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d122      	bne.n	800952c <USB_EPStartXfer+0xa10>
 80094e6:	1d3b      	adds	r3, r7, #4
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	463b      	mov	r3, r7
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009500:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009504:	1d3b      	adds	r3, r7, #4
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	463b      	mov	r3, r7
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	441a      	add	r2, r3
 8009512:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800951a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800951e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009526:	b29b      	uxth	r3, r3
 8009528:	8013      	strh	r3, [r2, #0]
 800952a:	e026      	b.n	800957a <USB_EPStartXfer+0xa5e>
 800952c:	463b      	mov	r3, r7
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d121      	bne.n	800957a <USB_EPStartXfer+0xa5e>
 8009536:	1d3b      	adds	r3, r7, #4
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	463b      	mov	r3, r7
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	b29b      	uxth	r3, r3
 8009548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800954c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009550:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009554:	1d3b      	adds	r3, r7, #4
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	463b      	mov	r3, r7
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	441a      	add	r2, r3
 8009562:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800956a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009576:	b29b      	uxth	r3, r3
 8009578:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	463b      	mov	r3, r7
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	f107 020e 	add.w	r2, r7, #14
 8009590:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009598:	8013      	strh	r3, [r2, #0]
 800959a:	f107 030e 	add.w	r3, r7, #14
 800959e:	f107 020e 	add.w	r2, r7, #14
 80095a2:	8812      	ldrh	r2, [r2, #0]
 80095a4:	f082 0210 	eor.w	r2, r2, #16
 80095a8:	801a      	strh	r2, [r3, #0]
 80095aa:	f107 030e 	add.w	r3, r7, #14
 80095ae:	f107 020e 	add.w	r2, r7, #14
 80095b2:	8812      	ldrh	r2, [r2, #0]
 80095b4:	f082 0220 	eor.w	r2, r2, #32
 80095b8:	801a      	strh	r2, [r3, #0]
 80095ba:	1d3b      	adds	r3, r7, #4
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	463b      	mov	r3, r7
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	441a      	add	r2, r3
 80095c8:	f107 030e 	add.w	r3, r7, #14
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095de:	b29b      	uxth	r3, r3
 80095e0:	8013      	strh	r3, [r2, #0]
 80095e2:	e3b5      	b.n	8009d50 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095e4:	463b      	mov	r3, r7
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	7b1b      	ldrb	r3, [r3, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f040 8090 	bne.w	8009710 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095f0:	463b      	mov	r3, r7
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	463b      	mov	r3, r7
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d90e      	bls.n	800961e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009600:	463b      	mov	r3, r7
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800960a:	463b      	mov	r3, r7
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009614:	1ad2      	subs	r2, r2, r3
 8009616:	463b      	mov	r3, r7
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	619a      	str	r2, [r3, #24]
 800961c:	e008      	b.n	8009630 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800961e:	463b      	mov	r3, r7
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8009628:	463b      	mov	r3, r7
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2200      	movs	r2, #0
 800962e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009630:	1d3b      	adds	r3, r7, #4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009638:	1d3b      	adds	r3, r7, #4
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009648:	4413      	add	r3, r2
 800964a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800964e:	463b      	mov	r3, r7
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	011a      	lsls	r2, r3, #4
 8009656:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800965a:	4413      	add	r3, r2
 800965c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d116      	bne.n	800969a <USB_EPStartXfer+0xb7e>
 800966c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009678:	b29a      	uxth	r2, r3
 800967a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800967e:	801a      	strh	r2, [r3, #0]
 8009680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	b29b      	uxth	r3, r3
 8009688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009690:	b29a      	uxth	r2, r3
 8009692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	e32c      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
 800969a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800969e:	2b3e      	cmp	r3, #62	; 0x3e
 80096a0:	d818      	bhi.n	80096d4 <USB_EPStartXfer+0xbb8>
 80096a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096a6:	085b      	lsrs	r3, r3, #1
 80096a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d004      	beq.n	80096c2 <USB_EPStartXfer+0xba6>
 80096b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096bc:	3301      	adds	r3, #1
 80096be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	029b      	lsls	r3, r3, #10
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	e30f      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
 80096d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096d8:	095b      	lsrs	r3, r3, #5
 80096da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <USB_EPStartXfer+0xbd8>
 80096ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096ee:	3b01      	subs	r3, #1
 80096f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80096f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	029b      	lsls	r3, r3, #10
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009706:	b29a      	uxth	r2, r3
 8009708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800970c:	801a      	strh	r2, [r3, #0]
 800970e:	e2f1      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009710:	463b      	mov	r3, r7
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	78db      	ldrb	r3, [r3, #3]
 8009716:	2b02      	cmp	r3, #2
 8009718:	f040 818f 	bne.w	8009a3a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800971c:	463b      	mov	r3, r7
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d175      	bne.n	8009812 <USB_EPStartXfer+0xcf6>
 8009726:	1d3b      	adds	r3, r7, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800972e:	1d3b      	adds	r3, r7, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009736:	b29b      	uxth	r3, r3
 8009738:	461a      	mov	r2, r3
 800973a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800973e:	4413      	add	r3, r2
 8009740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009744:	463b      	mov	r3, r7
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	011a      	lsls	r2, r3, #4
 800974c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009750:	4413      	add	r3, r2
 8009752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800975a:	463b      	mov	r3, r7
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d116      	bne.n	8009792 <USB_EPStartXfer+0xc76>
 8009764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009788:	b29a      	uxth	r2, r3
 800978a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e065      	b.n	800985e <USB_EPStartXfer+0xd42>
 8009792:	463b      	mov	r3, r7
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b3e      	cmp	r3, #62	; 0x3e
 800979a:	d81a      	bhi.n	80097d2 <USB_EPStartXfer+0xcb6>
 800979c:	463b      	mov	r3, r7
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	085b      	lsrs	r3, r3, #1
 80097a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097a8:	463b      	mov	r3, r7
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <USB_EPStartXfer+0xca4>
 80097b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097ba:	3301      	adds	r3, #1
 80097bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	029b      	lsls	r3, r3, #10
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e045      	b.n	800985e <USB_EPStartXfer+0xd42>
 80097d2:	463b      	mov	r3, r7
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097de:	463b      	mov	r3, r7
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 031f 	and.w	r3, r3, #31
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USB_EPStartXfer+0xcda>
 80097ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	029b      	lsls	r3, r3, #10
 80097fe:	b29b      	uxth	r3, r3
 8009800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	e025      	b.n	800985e <USB_EPStartXfer+0xd42>
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d120      	bne.n	800985e <USB_EPStartXfer+0xd42>
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009824:	1d3b      	adds	r3, r7, #4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800982c:	b29b      	uxth	r3, r3
 800982e:	461a      	mov	r2, r3
 8009830:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009834:	4413      	add	r3, r2
 8009836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800983a:	463b      	mov	r3, r7
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	011a      	lsls	r2, r3, #4
 8009842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009846:	4413      	add	r3, r2
 8009848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800984c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009850:	463b      	mov	r3, r7
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	b29a      	uxth	r2, r3
 8009858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	1d3b      	adds	r3, r7, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009866:	463b      	mov	r3, r7
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d175      	bne.n	800995c <USB_EPStartXfer+0xe40>
 8009870:	1d3b      	adds	r3, r7, #4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009878:	1d3b      	adds	r3, r7, #4
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009880:	b29b      	uxth	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009888:	4413      	add	r3, r2
 800988a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800988e:	463b      	mov	r3, r7
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	011a      	lsls	r2, r3, #4
 8009896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800989a:	4413      	add	r3, r2
 800989c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098a4:	463b      	mov	r3, r7
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d116      	bne.n	80098dc <USB_EPStartXfer+0xdc0>
 80098ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c0:	801a      	strh	r2, [r3, #0]
 80098c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d8:	801a      	strh	r2, [r3, #0]
 80098da:	e061      	b.n	80099a0 <USB_EPStartXfer+0xe84>
 80098dc:	463b      	mov	r3, r7
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b3e      	cmp	r3, #62	; 0x3e
 80098e4:	d81a      	bhi.n	800991c <USB_EPStartXfer+0xe00>
 80098e6:	463b      	mov	r3, r7
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	085b      	lsrs	r3, r3, #1
 80098ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098f2:	463b      	mov	r3, r7
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <USB_EPStartXfer+0xdee>
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009904:	3301      	adds	r3, #1
 8009906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	b29b      	uxth	r3, r3
 8009910:	029b      	lsls	r3, r3, #10
 8009912:	b29a      	uxth	r2, r3
 8009914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	e041      	b.n	80099a0 <USB_EPStartXfer+0xe84>
 800991c:	463b      	mov	r3, r7
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009928:	463b      	mov	r3, r7
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f003 031f 	and.w	r3, r3, #31
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <USB_EPStartXfer+0xe24>
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993a:	3b01      	subs	r3, #1
 800993c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009944:	b29b      	uxth	r3, r3
 8009946:	029b      	lsls	r3, r3, #10
 8009948:	b29b      	uxth	r3, r3
 800994a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009952:	b29a      	uxth	r2, r3
 8009954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e021      	b.n	80099a0 <USB_EPStartXfer+0xe84>
 800995c:	463b      	mov	r3, r7
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d11c      	bne.n	80099a0 <USB_EPStartXfer+0xe84>
 8009966:	1d3b      	adds	r3, r7, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996e:	b29b      	uxth	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009976:	4413      	add	r3, r2
 8009978:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800997c:	463b      	mov	r3, r7
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	011a      	lsls	r2, r3, #4
 8009984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009988:	4413      	add	r3, r2
 800998a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800998e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009992:	463b      	mov	r3, r7
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	b29a      	uxth	r2, r3
 800999a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800999e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80099a0:	463b      	mov	r3, r7
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 81a4 	beq.w	8009cf4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80099ac:	1d3b      	adds	r3, r7, #4
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	463b      	mov	r3, r7
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80099c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <USB_EPStartXfer+0xebc>
 80099cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10d      	bne.n	80099f4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80099dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 8187 	bne.w	8009cf4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80099e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f040 8180 	bne.w	8009cf4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80099f4:	1d3b      	adds	r3, r7, #4
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	463b      	mov	r3, r7
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	463b      	mov	r3, r7
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	441a      	add	r2, r3
 8009a20:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
 8009a38:	e15c      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	78db      	ldrb	r3, [r3, #3]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	f040 8155 	bne.w	8009cf0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a46:	463b      	mov	r3, r7
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	699a      	ldr	r2, [r3, #24]
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d90e      	bls.n	8009a74 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009a56:	463b      	mov	r3, r7
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009a60:	463b      	mov	r3, r7
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	619a      	str	r2, [r3, #24]
 8009a72:	e008      	b.n	8009a86 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8009a74:	463b      	mov	r3, r7
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009a7e:	463b      	mov	r3, r7
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a86:	463b      	mov	r3, r7
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d16f      	bne.n	8009b70 <USB_EPStartXfer+0x1054>
 8009a90:	1d3b      	adds	r3, r7, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a98:	1d3b      	adds	r3, r7, #4
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009aae:	463b      	mov	r3, r7
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	011a      	lsls	r2, r3, #4
 8009ab6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009aba:	4413      	add	r3, r2
 8009abc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d116      	bne.n	8009afa <USB_EPStartXfer+0xfde>
 8009acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ade:	801a      	strh	r2, [r3, #0]
 8009ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009af6:	801a      	strh	r2, [r3, #0]
 8009af8:	e05f      	b.n	8009bba <USB_EPStartXfer+0x109e>
 8009afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009afe:	2b3e      	cmp	r3, #62	; 0x3e
 8009b00:	d818      	bhi.n	8009b34 <USB_EPStartXfer+0x1018>
 8009b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <USB_EPStartXfer+0x1006>
 8009b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	029b      	lsls	r3, r3, #10
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	e042      	b.n	8009bba <USB_EPStartXfer+0x109e>
 8009b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b42:	f003 031f 	and.w	r3, r3, #31
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d104      	bne.n	8009b54 <USB_EPStartXfer+0x1038>
 8009b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	029b      	lsls	r3, r3, #10
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	e024      	b.n	8009bba <USB_EPStartXfer+0x109e>
 8009b70:	463b      	mov	r3, r7
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d11f      	bne.n	8009bba <USB_EPStartXfer+0x109e>
 8009b7a:	1d3b      	adds	r3, r7, #4
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b82:	1d3b      	adds	r3, r7, #4
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b92:	4413      	add	r3, r2
 8009b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b98:	463b      	mov	r3, r7
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	011a      	lsls	r2, r3, #4
 8009ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bb8:	801a      	strh	r2, [r3, #0]
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d16f      	bne.n	8009cac <USB_EPStartXfer+0x1190>
 8009bcc:	1d3b      	adds	r3, r7, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bd4:	1d3b      	adds	r3, r7, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009be4:	4413      	add	r3, r2
 8009be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bea:	463b      	mov	r3, r7
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	011a      	lsls	r2, r3, #4
 8009bf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d116      	bne.n	8009c36 <USB_EPStartXfer+0x111a>
 8009c08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	e05e      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
 8009c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c3c:	d818      	bhi.n	8009c70 <USB_EPStartXfer+0x1154>
 8009c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c4c:	f003 0301 	and.w	r3, r3, #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d004      	beq.n	8009c5e <USB_EPStartXfer+0x1142>
 8009c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	029b      	lsls	r3, r3, #10
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	e041      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
 8009c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c74:	095b      	lsrs	r3, r3, #5
 8009c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009c7e:	f003 031f 	and.w	r3, r3, #31
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <USB_EPStartXfer+0x1174>
 8009c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	029b      	lsls	r3, r3, #10
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	e023      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
 8009cac:	463b      	mov	r3, r7
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	785b      	ldrb	r3, [r3, #1]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d11e      	bne.n	8009cf4 <USB_EPStartXfer+0x11d8>
 8009cb6:	1d3b      	adds	r3, r7, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ccc:	463b      	mov	r3, r7
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	011a      	lsls	r2, r3, #4
 8009cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cd8:	4413      	add	r3, r2
 8009cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	e001      	b.n	8009cf4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e02e      	b.n	8009d52 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cf4:	1d3b      	adds	r3, r7, #4
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	463b      	mov	r3, r7
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009d12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009d16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009d1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009d22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d26:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009d2a:	1d3b      	adds	r3, r7, #4
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	463b      	mov	r3, r7
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	441a      	add	r2, r3
 8009d38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d020      	beq.n	8009db0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	4413      	add	r3, r2
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d84:	81bb      	strh	r3, [r7, #12]
 8009d86:	89bb      	ldrh	r3, [r7, #12]
 8009d88:	f083 0310 	eor.w	r3, r3, #16
 8009d8c:	81bb      	strh	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	441a      	add	r2, r3
 8009d98:	89bb      	ldrh	r3, [r7, #12]
 8009d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	8013      	strh	r3, [r2, #0]
 8009dae:	e01f      	b.n	8009df0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc6:	81fb      	strh	r3, [r7, #14]
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
 8009dca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009dce:	81fb      	strh	r3, [r7, #14]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	441a      	add	r2, r3
 8009dda:	89fb      	ldrh	r3, [r7, #14]
 8009ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr

08009dfc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	7b1b      	ldrb	r3, [r3, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f040 809d 	bne.w	8009f4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d04c      	beq.n	8009eb2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	823b      	strh	r3, [r7, #16]
 8009e26:	8a3b      	ldrh	r3, [r7, #16]
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01b      	beq.n	8009e68 <USB_EPClearStall+0x6c>
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	881b      	ldrh	r3, [r3, #0]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e46:	81fb      	strh	r3, [r7, #14]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	441a      	add	r2, r3
 8009e52:	89fb      	ldrh	r3, [r7, #14]
 8009e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	78db      	ldrb	r3, [r3, #3]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d06c      	beq.n	8009f4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e86:	81bb      	strh	r3, [r7, #12]
 8009e88:	89bb      	ldrh	r3, [r7, #12]
 8009e8a:	f083 0320 	eor.w	r3, r3, #32
 8009e8e:	81bb      	strh	r3, [r7, #12]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	441a      	add	r2, r3
 8009e9a:	89bb      	ldrh	r3, [r7, #12]
 8009e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	8013      	strh	r3, [r2, #0]
 8009eb0:	e04b      	b.n	8009f4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	82fb      	strh	r3, [r7, #22]
 8009ec0:	8afb      	ldrh	r3, [r7, #22]
 8009ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01b      	beq.n	8009f02 <USB_EPClearStall+0x106>
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee0:	82bb      	strh	r3, [r7, #20]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	441a      	add	r2, r3
 8009eec:	8abb      	ldrh	r3, [r7, #20]
 8009eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f18:	827b      	strh	r3, [r7, #18]
 8009f1a:	8a7b      	ldrh	r3, [r7, #18]
 8009f1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f20:	827b      	strh	r3, [r7, #18]
 8009f22:	8a7b      	ldrh	r3, [r7, #18]
 8009f24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f28:	827b      	strh	r3, [r7, #18]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	441a      	add	r2, r3
 8009f34:	8a7b      	ldrh	r3, [r7, #18]
 8009f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	371c      	adds	r7, #28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr

08009f56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b083      	sub	sp, #12
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d103      	bne.n	8009f70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2280      	movs	r2, #128	; 0x80
 8009f6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bc80      	pop	{r7}
 8009f7a:	4770      	bx	lr

08009f7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr

08009f90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bc80      	pop	{r7}
 8009fa2:	4770      	bx	lr

08009fa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr

08009fc2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b08d      	sub	sp, #52	; 0x34
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	80fb      	strh	r3, [r7, #6]
 8009fea:	4613      	mov	r3, r2
 8009fec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009fee:	88bb      	ldrh	r3, [r7, #4]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	005a      	lsls	r2, r3, #1
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	4413      	add	r3, r2
 800a006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a00a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a010:	e01e      	b.n	800a050 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	3301      	adds	r3, #1
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	b29b      	uxth	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	b29a      	uxth	r2, r3
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	3302      	adds	r3, #2
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	3302      	adds	r3, #2
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	3301      	adds	r3, #1
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	3b01      	subs	r3, #1
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1dd      	bne.n	800a012 <USB_WritePMA+0x3a>
  }
}
 800a056:	bf00      	nop
 800a058:	3734      	adds	r7, #52	; 0x34
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bc80      	pop	{r7}
 800a05e:	4770      	bx	lr

0800a060 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a060:	b480      	push	{r7}
 800a062:	b08b      	sub	sp, #44	; 0x2c
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	460b      	mov	r3, r1
 800a070:	80fb      	strh	r3, [r7, #6]
 800a072:	4613      	mov	r3, r2
 800a074:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a076:	88bb      	ldrh	r3, [r7, #4]
 800a078:	085b      	lsrs	r3, r3, #1
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	005a      	lsls	r2, r3, #1
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a092:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
 800a098:	e01b      	b.n	800a0d2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e0      	bne.n	800a09a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a0d8:	88bb      	ldrh	r3, [r7, #4]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	701a      	strb	r2, [r3, #0]
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	372c      	adds	r7, #44	; 0x2c
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr

0800a0fe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7c1b      	ldrb	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d115      	bne.n	800a142 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a11a:	2202      	movs	r2, #2
 800a11c:	2181      	movs	r1, #129	; 0x81
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 fe1f 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a12e:	2202      	movs	r2, #2
 800a130:	2101      	movs	r1, #1
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 fe15 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a140:	e012      	b.n	800a168 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a142:	2340      	movs	r3, #64	; 0x40
 800a144:	2202      	movs	r2, #2
 800a146:	2181      	movs	r1, #129	; 0x81
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f001 fe0a 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	2202      	movs	r2, #2
 800a158:	2101      	movs	r1, #1
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fe01 	bl	800bd62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a168:	2308      	movs	r3, #8
 800a16a:	2203      	movs	r2, #3
 800a16c:	2182      	movs	r1, #130	; 0x82
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fdf7 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a17a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a17e:	f001 ff17 	bl	800bfb0 <USBD_static_malloc>
 800a182:	4602      	mov	r2, r0
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
 800a198:	e026      	b.n	800a1e8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7c1b      	ldrb	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d109      	bne.n	800a1d8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 feb7 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a1d6:	e007      	b.n	800a1e8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 feae 	bl	800bf44 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a202:	2181      	movs	r1, #129	; 0x81
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f001 fdd2 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a210:	2101      	movs	r1, #1
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 fdcb 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a220:	2182      	movs	r1, #130	; 0x82
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 fdc3 	bl	800bdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00e      	beq.n	800a256 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 febd 	bl	800bfc8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a256:	7bfb      	ldrb	r3, [r7, #15]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a270:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a286:	2b00      	cmp	r3, #0
 800a288:	d039      	beq.n	800a2fe <USBD_CDC_Setup+0x9e>
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d17c      	bne.n	800a388 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	88db      	ldrh	r3, [r3, #6]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d029      	beq.n	800a2ea <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	da11      	bge.n	800a2c4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a2ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	88d2      	ldrh	r2, [r2, #6]
 800a2b2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2b4:	6939      	ldr	r1, [r7, #16]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 f9c9 	bl	800b654 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a2c2:	e068      	b.n	800a396 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	785a      	ldrb	r2, [r3, #1]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88db      	ldrh	r3, [r3, #6]
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a2da:	6939      	ldr	r1, [r7, #16]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 f9e4 	bl	800b6b0 <USBD_CtlPrepareRx>
      break;
 800a2e8:	e055      	b.n	800a396 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	7850      	ldrb	r0, [r2, #1]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	6839      	ldr	r1, [r7, #0]
 800a2fa:	4798      	blx	r3
      break;
 800a2fc:	e04b      	b.n	800a396 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	785b      	ldrb	r3, [r3, #1]
 800a302:	2b0a      	cmp	r3, #10
 800a304:	d017      	beq.n	800a336 <USBD_CDC_Setup+0xd6>
 800a306:	2b0b      	cmp	r3, #11
 800a308:	d029      	beq.n	800a35e <USBD_CDC_Setup+0xfe>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d133      	bne.n	800a376 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a314:	2b03      	cmp	r3, #3
 800a316:	d107      	bne.n	800a328 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a318:	f107 030c 	add.w	r3, r7, #12
 800a31c:	2202      	movs	r2, #2
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f997 	bl	800b654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a326:	e02e      	b.n	800a386 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f001 f928 	bl	800b580 <USBD_CtlError>
            ret = USBD_FAIL;
 800a330:	2302      	movs	r3, #2
 800a332:	75fb      	strb	r3, [r7, #23]
          break;
 800a334:	e027      	b.n	800a386 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d107      	bne.n	800a350 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a340:	f107 030f 	add.w	r3, r7, #15
 800a344:	2201      	movs	r2, #1
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f001 f983 	bl	800b654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a34e:	e01a      	b.n	800a386 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 f914 	bl	800b580 <USBD_CtlError>
            ret = USBD_FAIL;
 800a358:	2302      	movs	r3, #2
 800a35a:	75fb      	strb	r3, [r7, #23]
          break;
 800a35c:	e013      	b.n	800a386 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a364:	2b03      	cmp	r3, #3
 800a366:	d00d      	beq.n	800a384 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f908 	bl	800b580 <USBD_CtlError>
            ret = USBD_FAIL;
 800a370:	2302      	movs	r3, #2
 800a372:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a374:	e006      	b.n	800a384 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 f901 	bl	800b580 <USBD_CtlError>
          ret = USBD_FAIL;
 800a37e:	2302      	movs	r3, #2
 800a380:	75fb      	strb	r3, [r7, #23]
          break;
 800a382:	e000      	b.n	800a386 <USBD_CDC_Setup+0x126>
          break;
 800a384:	bf00      	nop
      }
      break;
 800a386:	e006      	b.n	800a396 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 f8f8 	bl	800b580 <USBD_CtlError>
      ret = USBD_FAIL;
 800a390:	2302      	movs	r3, #2
 800a392:	75fb      	strb	r3, [r7, #23]
      break;
 800a394:	bf00      	nop
  }

  return ret;
 800a396:	7dfb      	ldrb	r3, [r7, #23]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3ba:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d03a      	beq.n	800a43c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	331c      	adds	r3, #28
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d029      	beq.n	800a430 <USBD_CDC_DataIn+0x90>
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	440b      	add	r3, r1
 800a3ea:	331c      	adds	r3, #28
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	78f9      	ldrb	r1, [r7, #3]
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	4403      	add	r3, r0
 800a3fc:	3338      	adds	r3, #56	; 0x38
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	fbb2 f1f3 	udiv	r1, r2, r3
 800a404:	fb03 f301 	mul.w	r3, r3, r1
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d110      	bne.n	800a430 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	331c      	adds	r3, #28
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a422:	78f9      	ldrb	r1, [r7, #3]
 800a424:	2300      	movs	r3, #0
 800a426:	2200      	movs	r2, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 fd68 	bl	800befe <USBD_LL_Transmit>
 800a42e:	e003      	b.n	800a438 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	460b      	mov	r3, r1
 800a450:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a45a:	78fb      	ldrb	r3, [r7, #3]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 fd93 	bl	800bf8a <USBD_LL_GetRxDataSize>
 800a464:	4602      	mov	r2, r0
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00d      	beq.n	800a492 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a48a:	4611      	mov	r1, r2
 800a48c:	4798      	blx	r3

    return USBD_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	e000      	b.n	800a494 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a492:	2302      	movs	r3, #2
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d015      	beq.n	800a4e2 <USBD_CDC_EP0_RxReady+0x46>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4bc:	2bff      	cmp	r3, #255	; 0xff
 800a4be:	d010      	beq.n	800a4e2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a4ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a4d6:	b292      	uxth	r2, r2
 800a4d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2243      	movs	r2, #67	; 0x43
 800a4f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a4fa:	4b03      	ldr	r3, [pc, #12]	; (800a508 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	20001714 	.word	0x20001714

0800a50c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2243      	movs	r2, #67	; 0x43
 800a518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a51a:	4b03      	ldr	r3, [pc, #12]	; (800a528 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	bc80      	pop	{r7}
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	200016d0 	.word	0x200016d0

0800a52c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2243      	movs	r2, #67	; 0x43
 800a538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a53a:	4b03      	ldr	r3, [pc, #12]	; (800a548 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	bc80      	pop	{r7}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	20001758 	.word	0x20001758

0800a54c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	220a      	movs	r2, #10
 800a558:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a55a:	4b03      	ldr	r3, [pc, #12]	; (800a568 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	bc80      	pop	{r7}
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	2000168c 	.word	0x2000168c

0800a56c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a576:	2302      	movs	r3, #2
 800a578:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	bc80      	pop	{r7}
 800a596:	4770      	bx	lr

0800a598 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a5b6:	88fa      	ldrh	r2, [r7, #6]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr

0800a5ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bc80      	pop	{r7}
 800a5ee:	4770      	bx	lr

0800a5f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d017      	beq.n	800a63a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7c1b      	ldrb	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d109      	bne.n	800a626 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a61c:	2101      	movs	r1, #1
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fc90 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a624:	e007      	b.n	800a636 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a62c:	2340      	movs	r3, #64	; 0x40
 800a62e:	2101      	movs	r1, #1
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 fc87 	bl	800bf44 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	e000      	b.n	800a63c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a63a:	2302      	movs	r3, #2
  }
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a658:	2302      	movs	r3, #2
 800a65a:	e01a      	b.n	800a692 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d003      	beq.n	800a67c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	79fa      	ldrb	r2, [r7, #7]
 800a688:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f001 faf4 	bl	800bc78 <USBD_LL_Init>

  return USBD_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b085      	sub	sp, #20
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d006      	beq.n	800a6bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
 800a6ba:	e001      	b.n	800a6c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bc80      	pop	{r7}
 800a6ca:	4770      	bx	lr

0800a6cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 fb29 	bl	800bd2c <USBD_LL_Start>

  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	370c      	adds	r7, #12
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bc80      	pop	{r7}
 800a6f6:	4770      	bx	lr

0800a6f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a704:	2302      	movs	r3, #2
 800a706:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00c      	beq.n	800a72c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	78fa      	ldrb	r2, [r7, #3]
 800a71c:	4611      	mov	r1, r2
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	4798      	blx	r3
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b082      	sub	sp, #8
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	4611      	mov	r1, r2
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3

  return USBD_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 feca 	bl	800b508 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a782:	461a      	mov	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	2b01      	cmp	r3, #1
 800a796:	d00c      	beq.n	800a7b2 <USBD_LL_SetupStage+0x56>
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d302      	bcc.n	800a7a2 <USBD_LL_SetupStage+0x46>
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d010      	beq.n	800a7c2 <USBD_LL_SetupStage+0x66>
 800a7a0:	e017      	b.n	800a7d2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f9ca 	bl	800ab44 <USBD_StdDevReq>
      break;
 800a7b0:	e01a      	b.n	800a7e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fa2c 	bl	800ac18 <USBD_StdItfReq>
      break;
 800a7c0:	e012      	b.n	800a7e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa6a 	bl	800aca4 <USBD_StdEPReq>
      break;
 800a7d0:	e00a      	b.n	800a7e8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a7d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	4619      	mov	r1, r3
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fb03 	bl	800bdec <USBD_LL_StallEP>
      break;
 800a7e6:	bf00      	nop
  }

  return USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d14b      	bne.n	800a89e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a80c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a814:	2b03      	cmp	r3, #3
 800a816:	d134      	bne.n	800a882 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	68da      	ldr	r2, [r3, #12]
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	429a      	cmp	r2, r3
 800a822:	d919      	bls.n	800a858 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	1ad2      	subs	r2, r2, r3
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d203      	bcs.n	800a846 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a842:	b29b      	uxth	r3, r3
 800a844:	e002      	b.n	800a84c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	6879      	ldr	r1, [r7, #4]
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 ff4b 	bl	800b6ec <USBD_CtlContinueRx>
 800a856:	e038      	b.n	800a8ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00a      	beq.n	800a87a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d105      	bne.n	800a87a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 ff48 	bl	800b710 <USBD_CtlSendStatus>
 800a880:	e023      	b.n	800a8ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a888:	2b05      	cmp	r3, #5
 800a88a:	d11e      	bne.n	800a8ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a894:	2100      	movs	r1, #0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 faa8 	bl	800bdec <USBD_LL_StallEP>
 800a89c:	e015      	b.n	800a8ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00d      	beq.n	800a8c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d108      	bne.n	800a8c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	7afa      	ldrb	r2, [r7, #11]
 800a8be:	4611      	mov	r1, r2
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	4798      	blx	r3
 800a8c4:	e001      	b.n	800a8ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e000      	b.n	800a8cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d17f      	bne.n	800a9e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3314      	adds	r3, #20
 800a8ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d15c      	bne.n	800a9b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	68da      	ldr	r2, [r3, #12]
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	429a      	cmp	r2, r3
 800a902:	d915      	bls.n	800a930 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	1ad2      	subs	r2, r2, r3
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 feb5 	bl	800b68c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a922:	2300      	movs	r3, #0
 800a924:	2200      	movs	r2, #0
 800a926:	2100      	movs	r1, #0
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f001 fb0b 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a92e:	e04e      	b.n	800a9ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	6912      	ldr	r2, [r2, #16]
 800a938:	fbb3 f1f2 	udiv	r1, r3, r2
 800a93c:	fb02 f201 	mul.w	r2, r2, r1
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d11c      	bne.n	800a980 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	689a      	ldr	r2, [r3, #8]
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a94e:	429a      	cmp	r2, r3
 800a950:	d316      	bcc.n	800a980 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d20f      	bcs.n	800a980 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a960:	2200      	movs	r2, #0
 800a962:	2100      	movs	r1, #0
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fe91 	bl	800b68c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a972:	2300      	movs	r3, #0
 800a974:	2200      	movs	r2, #0
 800a976:	2100      	movs	r1, #0
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f001 fae3 	bl	800bf44 <USBD_LL_PrepareReceive>
 800a97e:	e026      	b.n	800a9ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00a      	beq.n	800a9a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a992:	2b03      	cmp	r3, #3
 800a994:	d105      	bne.n	800a9a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a9a2:	2180      	movs	r1, #128	; 0x80
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f001 fa21 	bl	800bdec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f000 fec3 	bl	800b736 <USBD_CtlReceiveStatus>
 800a9b0:	e00d      	b.n	800a9ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9b8:	2b04      	cmp	r3, #4
 800a9ba:	d004      	beq.n	800a9c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d103      	bne.n	800a9ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a9c6:	2180      	movs	r1, #128	; 0x80
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f001 fa0f 	bl	800bdec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d11d      	bne.n	800aa14 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff fe83 	bl	800a6e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a9e6:	e015      	b.n	800aa14 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00d      	beq.n	800aa10 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d108      	bne.n	800aa10 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	7afa      	ldrb	r2, [r7, #11]
 800aa08:	4611      	mov	r1, r2
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	4798      	blx	r3
 800aa0e:	e001      	b.n	800aa14 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aa10:	2302      	movs	r3, #2
 800aa12:	e000      	b.n	800aa16 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa26:	2340      	movs	r3, #64	; 0x40
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 f998 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2240      	movs	r2, #64	; 0x40
 800aa3e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa42:	2340      	movs	r3, #64	; 0x40
 800aa44:	2200      	movs	r2, #0
 800aa46:	2180      	movs	r1, #128	; 0x80
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f98a 	bl	800bd62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2240      	movs	r2, #64	; 0x40
 800aa58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6852      	ldr	r2, [r2, #4]
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	4611      	mov	r1, r2
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
  }

  return USBD_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	78fa      	ldrb	r2, [r7, #3]
 800aab0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2204      	movs	r2, #4
 800aad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bc80      	pop	{r7}
 800aae4:	4770      	bx	lr

0800aae6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d105      	bne.n	800ab04 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bc80      	pop	{r7}
 800ab0e:	4770      	bx	lr

0800ab10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d10b      	bne.n	800ab3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d004      	beq.n	800ab68 <USBD_StdDevReq+0x24>
 800ab5e:	2b40      	cmp	r3, #64	; 0x40
 800ab60:	d002      	beq.n	800ab68 <USBD_StdDevReq+0x24>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d008      	beq.n	800ab78 <USBD_StdDevReq+0x34>
 800ab66:	e04c      	b.n	800ac02 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
      break;
 800ab76:	e049      	b.n	800ac0c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	785b      	ldrb	r3, [r3, #1]
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d83a      	bhi.n	800abf6 <USBD_StdDevReq+0xb2>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <USBD_StdDevReq+0x44>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800abd9 	.word	0x0800abd9
 800ab8c:	0800abed 	.word	0x0800abed
 800ab90:	0800abf7 	.word	0x0800abf7
 800ab94:	0800abe3 	.word	0x0800abe3
 800ab98:	0800abf7 	.word	0x0800abf7
 800ab9c:	0800abbb 	.word	0x0800abbb
 800aba0:	0800abb1 	.word	0x0800abb1
 800aba4:	0800abf7 	.word	0x0800abf7
 800aba8:	0800abcf 	.word	0x0800abcf
 800abac:	0800abc5 	.word	0x0800abc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f9d4 	bl	800af60 <USBD_GetDescriptor>
          break;
 800abb8:	e022      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fb37 	bl	800b230 <USBD_SetAddress>
          break;
 800abc2:	e01d      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb74 	bl	800b2b4 <USBD_SetConfig>
          break;
 800abcc:	e018      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fbfd 	bl	800b3d0 <USBD_GetConfig>
          break;
 800abd6:	e013      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fc2c 	bl	800b438 <USBD_GetStatus>
          break;
 800abe0:	e00e      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fc5a 	bl	800b49e <USBD_SetFeature>
          break;
 800abea:	e009      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fc69 	bl	800b4c6 <USBD_ClrFeature>
          break;
 800abf4:	e004      	b.n	800ac00 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fcc1 	bl	800b580 <USBD_CtlError>
          break;
 800abfe:	bf00      	nop
      }
      break;
 800ac00:	e004      	b.n	800ac0c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fcbb 	bl	800b580 <USBD_CtlError>
      break;
 800ac0a:	bf00      	nop
  }

  return ret;
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop

0800ac18 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac2e:	2b20      	cmp	r3, #32
 800ac30:	d003      	beq.n	800ac3a <USBD_StdItfReq+0x22>
 800ac32:	2b40      	cmp	r3, #64	; 0x40
 800ac34:	d001      	beq.n	800ac3a <USBD_StdItfReq+0x22>
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d12a      	bne.n	800ac90 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac40:	3b01      	subs	r3, #1
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d81d      	bhi.n	800ac82 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	889b      	ldrh	r3, [r3, #4]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d813      	bhi.n	800ac78 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	88db      	ldrh	r3, [r3, #6]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d110      	bne.n	800ac8c <USBD_StdItfReq+0x74>
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10d      	bne.n	800ac8c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fd4d 	bl	800b710 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac76:	e009      	b.n	800ac8c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fc80 	bl	800b580 <USBD_CtlError>
          break;
 800ac80:	e004      	b.n	800ac8c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fc7b 	bl	800b580 <USBD_CtlError>
          break;
 800ac8a:	e000      	b.n	800ac8e <USBD_StdItfReq+0x76>
          break;
 800ac8c:	bf00      	nop
      }
      break;
 800ac8e:	e004      	b.n	800ac9a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fc74 	bl	800b580 <USBD_CtlError>
      break;
 800ac98:	bf00      	nop
  }

  return USBD_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	889b      	ldrh	r3, [r3, #4]
 800acb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d004      	beq.n	800acce <USBD_StdEPReq+0x2a>
 800acc4:	2b40      	cmp	r3, #64	; 0x40
 800acc6:	d002      	beq.n	800acce <USBD_StdEPReq+0x2a>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d008      	beq.n	800acde <USBD_StdEPReq+0x3a>
 800accc:	e13d      	b.n	800af4a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	4798      	blx	r3
      break;
 800acdc:	e13a      	b.n	800af54 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d10a      	bne.n	800ad00 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

        return ret;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	e12a      	b.n	800af56 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	785b      	ldrb	r3, [r3, #1]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d03e      	beq.n	800ad86 <USBD_StdEPReq+0xe2>
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d002      	beq.n	800ad12 <USBD_StdEPReq+0x6e>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d070      	beq.n	800adf2 <USBD_StdEPReq+0x14e>
 800ad10:	e115      	b.n	800af3e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d002      	beq.n	800ad22 <USBD_StdEPReq+0x7e>
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d015      	beq.n	800ad4c <USBD_StdEPReq+0xa8>
 800ad20:	e02b      	b.n	800ad7a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00c      	beq.n	800ad42 <USBD_StdEPReq+0x9e>
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b80      	cmp	r3, #128	; 0x80
 800ad2c:	d009      	beq.n	800ad42 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 f85a 	bl	800bdec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ad38:	2180      	movs	r1, #128	; 0x80
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f001 f856 	bl	800bdec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad40:	e020      	b.n	800ad84 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc1b 	bl	800b580 <USBD_CtlError>
              break;
 800ad4a:	e01b      	b.n	800ad84 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	885b      	ldrh	r3, [r3, #2]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10e      	bne.n	800ad72 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <USBD_StdEPReq+0xce>
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d008      	beq.n	800ad72 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	88db      	ldrh	r3, [r3, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f001 f83d 	bl	800bdec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fccc 	bl	800b710 <USBD_CtlSendStatus>

              break;
 800ad78:	e004      	b.n	800ad84 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fbff 	bl	800b580 <USBD_CtlError>
              break;
 800ad82:	bf00      	nop
          }
          break;
 800ad84:	e0e0      	b.n	800af48 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d002      	beq.n	800ad96 <USBD_StdEPReq+0xf2>
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	d015      	beq.n	800adc0 <USBD_StdEPReq+0x11c>
 800ad94:	e026      	b.n	800ade4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00c      	beq.n	800adb6 <USBD_StdEPReq+0x112>
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
 800ad9e:	2b80      	cmp	r3, #128	; 0x80
 800ada0:	d009      	beq.n	800adb6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f820 	bl	800bdec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800adac:	2180      	movs	r1, #128	; 0x80
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 f81c 	bl	800bdec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800adb4:	e01c      	b.n	800adf0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800adb6:	6839      	ldr	r1, [r7, #0]
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fbe1 	bl	800b580 <USBD_CtlError>
              break;
 800adbe:	e017      	b.n	800adf0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	885b      	ldrh	r3, [r3, #2]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d112      	bne.n	800adee <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 f827 	bl	800be2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fc97 	bl	800b710 <USBD_CtlSendStatus>
              }
              break;
 800ade2:	e004      	b.n	800adee <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fbca 	bl	800b580 <USBD_CtlError>
              break;
 800adec:	e000      	b.n	800adf0 <USBD_StdEPReq+0x14c>
              break;
 800adee:	bf00      	nop
          }
          break;
 800adf0:	e0aa      	b.n	800af48 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d002      	beq.n	800ae02 <USBD_StdEPReq+0x15e>
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d032      	beq.n	800ae66 <USBD_StdEPReq+0x1c2>
 800ae00:	e097      	b.n	800af32 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d007      	beq.n	800ae18 <USBD_StdEPReq+0x174>
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	2b80      	cmp	r3, #128	; 0x80
 800ae0c:	d004      	beq.n	800ae18 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fbb5 	bl	800b580 <USBD_CtlError>
                break;
 800ae16:	e091      	b.n	800af3c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da0b      	bge.n	800ae38 <USBD_StdEPReq+0x194>
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	3310      	adds	r3, #16
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	4413      	add	r3, r2
 800ae34:	3304      	adds	r3, #4
 800ae36:	e00b      	b.n	800ae50 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae3e:	4613      	mov	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	3304      	adds	r3, #4
 800ae50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fbf8 	bl	800b654 <USBD_CtlSendData>
              break;
 800ae64:	e06a      	b.n	800af3c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	da11      	bge.n	800ae92 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	f003 020f 	and.w	r2, r3, #15
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	4613      	mov	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	440b      	add	r3, r1
 800ae80:	3318      	adds	r3, #24
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d117      	bne.n	800aeb8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fb78 	bl	800b580 <USBD_CtlError>
                  break;
 800ae90:	e054      	b.n	800af3c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	f003 020f 	and.w	r2, r3, #15
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	440b      	add	r3, r1
 800aea4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d104      	bne.n	800aeb8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 fb65 	bl	800b580 <USBD_CtlError>
                  break;
 800aeb6:	e041      	b.n	800af3c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	da0b      	bge.n	800aed8 <USBD_StdEPReq+0x234>
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	3310      	adds	r3, #16
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	4413      	add	r3, r2
 800aed4:	3304      	adds	r3, #4
 800aed6:	e00b      	b.n	800aef0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	4413      	add	r3, r2
 800aeee:	3304      	adds	r3, #4
 800aef0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aef2:	7bbb      	ldrb	r3, [r7, #14]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <USBD_StdEPReq+0x25a>
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	2b80      	cmp	r3, #128	; 0x80
 800aefc:	d103      	bne.n	800af06 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e00e      	b.n	800af24 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 ffac 	bl	800be68 <USBD_LL_IsStallEP>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2201      	movs	r2, #1
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	e002      	b.n	800af24 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2202      	movs	r2, #2
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb92 	bl	800b654 <USBD_CtlSendData>
              break;
 800af30:	e004      	b.n	800af3c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fb23 	bl	800b580 <USBD_CtlError>
              break;
 800af3a:	bf00      	nop
          }
          break;
 800af3c:	e004      	b.n	800af48 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fb1d 	bl	800b580 <USBD_CtlError>
          break;
 800af46:	bf00      	nop
      }
      break;
 800af48:	e004      	b.n	800af54 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fb17 	bl	800b580 <USBD_CtlError>
      break;
 800af52:	bf00      	nop
  }

  return ret;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
	...

0800af60 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	0a1b      	lsrs	r3, r3, #8
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	2b06      	cmp	r3, #6
 800af82:	f200 8128 	bhi.w	800b1d6 <USBD_GetDescriptor+0x276>
 800af86:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <USBD_GetDescriptor+0x2c>)
 800af88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8c:	0800afa9 	.word	0x0800afa9
 800af90:	0800afc1 	.word	0x0800afc1
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b1d7 	.word	0x0800b1d7
 800af9c:	0800b1d7 	.word	0x0800b1d7
 800afa0:	0800b177 	.word	0x0800b177
 800afa4:	0800b1a3 	.word	0x0800b1a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	7c12      	ldrb	r2, [r2, #16]
 800afb4:	f107 0108 	add.w	r1, r7, #8
 800afb8:	4610      	mov	r0, r2
 800afba:	4798      	blx	r3
 800afbc:	60f8      	str	r0, [r7, #12]
      break;
 800afbe:	e112      	b.n	800b1e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	7c1b      	ldrb	r3, [r3, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d10d      	bne.n	800afe4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	f107 0208 	add.w	r2, r7, #8
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3301      	adds	r3, #1
 800afde:	2202      	movs	r2, #2
 800afe0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800afe2:	e100      	b.n	800b1e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afec:	f107 0208 	add.w	r2, r7, #8
 800aff0:	4610      	mov	r0, r2
 800aff2:	4798      	blx	r3
 800aff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	2202      	movs	r2, #2
 800affc:	701a      	strb	r2, [r3, #0]
      break;
 800affe:	e0f2      	b.n	800b1e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	885b      	ldrh	r3, [r3, #2]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b05      	cmp	r3, #5
 800b008:	f200 80ac 	bhi.w	800b164 <USBD_GetDescriptor+0x204>
 800b00c:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <USBD_GetDescriptor+0xb4>)
 800b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b012:	bf00      	nop
 800b014:	0800b02d 	.word	0x0800b02d
 800b018:	0800b061 	.word	0x0800b061
 800b01c:	0800b095 	.word	0x0800b095
 800b020:	0800b0c9 	.word	0x0800b0c9
 800b024:	0800b0fd 	.word	0x0800b0fd
 800b028:	0800b131 	.word	0x0800b131
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	7c12      	ldrb	r2, [r2, #16]
 800b044:	f107 0108 	add.w	r1, r7, #8
 800b048:	4610      	mov	r0, r2
 800b04a:	4798      	blx	r3
 800b04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04e:	e091      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa94 	bl	800b580 <USBD_CtlError>
            err++;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	3301      	adds	r3, #1
 800b05c:	72fb      	strb	r3, [r7, #11]
          break;
 800b05e:	e089      	b.n	800b174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7c12      	ldrb	r2, [r2, #16]
 800b078:	f107 0108 	add.w	r1, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b082:	e077      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fa7a 	bl	800b580 <USBD_CtlError>
            err++;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	3301      	adds	r3, #1
 800b090:	72fb      	strb	r3, [r7, #11]
          break;
 800b092:	e06f      	b.n	800b174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	7c12      	ldrb	r2, [r2, #16]
 800b0ac:	f107 0108 	add.w	r1, r7, #8
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	4798      	blx	r3
 800b0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0b6:	e05d      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa60 	bl	800b580 <USBD_CtlError>
            err++;
 800b0c0:	7afb      	ldrb	r3, [r7, #11]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0c6:	e055      	b.n	800b174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	7c12      	ldrb	r2, [r2, #16]
 800b0e0:	f107 0108 	add.w	r1, r7, #8
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ea:	e043      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fa46 	bl	800b580 <USBD_CtlError>
            err++;
 800b0f4:	7afb      	ldrb	r3, [r7, #11]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0fa:	e03b      	b.n	800b174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00b      	beq.n	800b120 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	7c12      	ldrb	r2, [r2, #16]
 800b114:	f107 0108 	add.w	r1, r7, #8
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
 800b11c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b11e:	e029      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa2c 	bl	800b580 <USBD_CtlError>
            err++;
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	3301      	adds	r3, #1
 800b12c:	72fb      	strb	r3, [r7, #11]
          break;
 800b12e:	e021      	b.n	800b174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	7c12      	ldrb	r2, [r2, #16]
 800b148:	f107 0108 	add.w	r1, r7, #8
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b152:	e00f      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fa12 	bl	800b580 <USBD_CtlError>
            err++;
 800b15c:	7afb      	ldrb	r3, [r7, #11]
 800b15e:	3301      	adds	r3, #1
 800b160:	72fb      	strb	r3, [r7, #11]
          break;
 800b162:	e007      	b.n	800b174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa0a 	bl	800b580 <USBD_CtlError>
          err++;
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	3301      	adds	r3, #1
 800b170:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b172:	e038      	b.n	800b1e6 <USBD_GetDescriptor+0x286>
 800b174:	e037      	b.n	800b1e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7c1b      	ldrb	r3, [r3, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b186:	f107 0208 	add.w	r2, r7, #8
 800b18a:	4610      	mov	r0, r2
 800b18c:	4798      	blx	r3
 800b18e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b190:	e029      	b.n	800b1e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f9f3 	bl	800b580 <USBD_CtlError>
        err++;
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	3301      	adds	r3, #1
 800b19e:	72fb      	strb	r3, [r7, #11]
      break;
 800b1a0:	e021      	b.n	800b1e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7c1b      	ldrb	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10d      	bne.n	800b1c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b2:	f107 0208 	add.w	r2, r7, #8
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	4798      	blx	r3
 800b1ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	2207      	movs	r2, #7
 800b1c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1c4:	e00f      	b.n	800b1e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9d9 	bl	800b580 <USBD_CtlError>
        err++;
 800b1ce:	7afb      	ldrb	r3, [r7, #11]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	72fb      	strb	r3, [r7, #11]
      break;
 800b1d4:	e007      	b.n	800b1e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f9d1 	bl	800b580 <USBD_CtlError>
      err++;
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b1e4:	bf00      	nop
  }

  if (err != 0U)
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d11c      	bne.n	800b226 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b1ec:	893b      	ldrh	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d011      	beq.n	800b216 <USBD_GetDescriptor+0x2b6>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	88db      	ldrh	r3, [r3, #6]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00d      	beq.n	800b216 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88da      	ldrh	r2, [r3, #6]
 800b1fe:	893b      	ldrh	r3, [r7, #8]
 800b200:	4293      	cmp	r3, r2
 800b202:	bf28      	it	cs
 800b204:	4613      	movcs	r3, r2
 800b206:	b29b      	uxth	r3, r3
 800b208:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b20a:	893b      	ldrh	r3, [r7, #8]
 800b20c:	461a      	mov	r2, r3
 800b20e:	68f9      	ldr	r1, [r7, #12]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fa1f 	bl	800b654 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	88db      	ldrh	r3, [r3, #6]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d104      	bne.n	800b228 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa76 	bl	800b710 <USBD_CtlSendStatus>
 800b224:	e000      	b.n	800b228 <USBD_GetDescriptor+0x2c8>
    return;
 800b226:	bf00      	nop
    }
  }
}
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop

0800b230 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	889b      	ldrh	r3, [r3, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d130      	bne.n	800b2a4 <USBD_SetAddress+0x74>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	88db      	ldrh	r3, [r3, #6]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d12c      	bne.n	800b2a4 <USBD_SetAddress+0x74>
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	885b      	ldrh	r3, [r3, #2]
 800b24e:	2b7f      	cmp	r3, #127	; 0x7f
 800b250:	d828      	bhi.n	800b2a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b264:	2b03      	cmp	r3, #3
 800b266:	d104      	bne.n	800b272 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f988 	bl	800b580 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b270:	e01c      	b.n	800b2ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7bfa      	ldrb	r2, [r7, #15]
 800b276:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fe1e 	bl	800bec0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa43 	bl	800b710 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b298:	e008      	b.n	800b2ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a2:	e003      	b.n	800b2ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f96a 	bl	800b580 <USBD_CtlError>
  }
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	885b      	ldrh	r3, [r3, #2]
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	4b41      	ldr	r3, [pc, #260]	; (800b3cc <USBD_SetConfig+0x118>)
 800b2c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2c8:	4b40      	ldr	r3, [pc, #256]	; (800b3cc <USBD_SetConfig+0x118>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d904      	bls.n	800b2da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 f954 	bl	800b580 <USBD_CtlError>
 800b2d8:	e075      	b.n	800b3c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d002      	beq.n	800b2ea <USBD_SetConfig+0x36>
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d023      	beq.n	800b330 <USBD_SetConfig+0x7c>
 800b2e8:	e062      	b.n	800b3b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b2ea:	4b38      	ldr	r3, [pc, #224]	; (800b3cc <USBD_SetConfig+0x118>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d01a      	beq.n	800b328 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b2f2:	4b36      	ldr	r3, [pc, #216]	; (800b3cc <USBD_SetConfig+0x118>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2203      	movs	r2, #3
 800b300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b304:	4b31      	ldr	r3, [pc, #196]	; (800b3cc <USBD_SetConfig+0x118>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff f9f4 	bl	800a6f8 <USBD_SetClassConfig>
 800b310:	4603      	mov	r3, r0
 800b312:	2b02      	cmp	r3, #2
 800b314:	d104      	bne.n	800b320 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f931 	bl	800b580 <USBD_CtlError>
            return;
 800b31e:	e052      	b.n	800b3c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f9f5 	bl	800b710 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b326:	e04e      	b.n	800b3c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f9f1 	bl	800b710 <USBD_CtlSendStatus>
        break;
 800b32e:	e04a      	b.n	800b3c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b330:	4b26      	ldr	r3, [pc, #152]	; (800b3cc <USBD_SetConfig+0x118>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d112      	bne.n	800b35e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b340:	4b22      	ldr	r3, [pc, #136]	; (800b3cc <USBD_SetConfig+0x118>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	461a      	mov	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b34a:	4b20      	ldr	r3, [pc, #128]	; (800b3cc <USBD_SetConfig+0x118>)
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff f9f0 	bl	800a736 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f9da 	bl	800b710 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b35c:	e033      	b.n	800b3c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b35e:	4b1b      	ldr	r3, [pc, #108]	; (800b3cc <USBD_SetConfig+0x118>)
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d01d      	beq.n	800b3a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7ff f9de 	bl	800a736 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <USBD_SetConfig+0x118>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b384:	4b11      	ldr	r3, [pc, #68]	; (800b3cc <USBD_SetConfig+0x118>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff f9b4 	bl	800a6f8 <USBD_SetClassConfig>
 800b390:	4603      	mov	r3, r0
 800b392:	2b02      	cmp	r3, #2
 800b394:	d104      	bne.n	800b3a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f8f1 	bl	800b580 <USBD_CtlError>
            return;
 800b39e:	e012      	b.n	800b3c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f9b5 	bl	800b710 <USBD_CtlSendStatus>
        break;
 800b3a6:	e00e      	b.n	800b3c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f9b1 	bl	800b710 <USBD_CtlSendStatus>
        break;
 800b3ae:	e00a      	b.n	800b3c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f8e4 	bl	800b580 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b3b8:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <USBD_SetConfig+0x118>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff f9b9 	bl	800a736 <USBD_ClrClassConfig>
        break;
 800b3c4:	bf00      	nop
    }
  }
}
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	20001880 	.word	0x20001880

0800b3d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	88db      	ldrh	r3, [r3, #6]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d004      	beq.n	800b3ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f8cb 	bl	800b580 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3ea:	e021      	b.n	800b430 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	db17      	blt.n	800b426 <USBD_GetConfig+0x56>
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	dd02      	ble.n	800b400 <USBD_GetConfig+0x30>
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d00b      	beq.n	800b416 <USBD_GetConfig+0x46>
 800b3fe:	e012      	b.n	800b426 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3308      	adds	r3, #8
 800b40a:	2201      	movs	r2, #1
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f920 	bl	800b654 <USBD_CtlSendData>
        break;
 800b414:	e00c      	b.n	800b430 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3304      	adds	r3, #4
 800b41a:	2201      	movs	r2, #1
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f918 	bl	800b654 <USBD_CtlSendData>
        break;
 800b424:	e004      	b.n	800b430 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f8a9 	bl	800b580 <USBD_CtlError>
        break;
 800b42e:	bf00      	nop
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b448:	3b01      	subs	r3, #1
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d81e      	bhi.n	800b48c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	88db      	ldrh	r3, [r3, #6]
 800b452:	2b02      	cmp	r3, #2
 800b454:	d004      	beq.n	800b460 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f891 	bl	800b580 <USBD_CtlError>
        break;
 800b45e:	e01a      	b.n	800b496 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	f043 0202 	orr.w	r2, r3, #2
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	330c      	adds	r3, #12
 800b480:	2202      	movs	r2, #2
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f8e5 	bl	800b654 <USBD_CtlSendData>
      break;
 800b48a:	e004      	b.n	800b496 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f876 	bl	800b580 <USBD_CtlError>
      break;
 800b494:	bf00      	nop
  }
}
 800b496:	bf00      	nop
 800b498:	3708      	adds	r7, #8
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d106      	bne.n	800b4be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f929 	bl	800b710 <USBD_CtlSendStatus>
  }
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d80b      	bhi.n	800b4f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d10c      	bne.n	800b4fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f90f 	bl	800b710 <USBD_CtlSendStatus>
      }
      break;
 800b4f2:	e004      	b.n	800b4fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f842 	bl	800b580 <USBD_CtlError>
      break;
 800b4fc:	e000      	b.n	800b500 <USBD_ClrFeature+0x3a>
      break;
 800b4fe:	bf00      	nop
  }
}
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781a      	ldrb	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	785a      	ldrb	r2, [r3, #1]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	3302      	adds	r3, #2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b29a      	uxth	r2, r3
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	3303      	adds	r3, #3
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	b29b      	uxth	r3, r3
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	b29b      	uxth	r3, r3
 800b536:	4413      	add	r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	3304      	adds	r3, #4
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	b29a      	uxth	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	3305      	adds	r3, #5
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	b29b      	uxth	r3, r3
 800b552:	4413      	add	r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	3306      	adds	r3, #6
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b29a      	uxth	r2, r3
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3307      	adds	r3, #7
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4413      	add	r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	80da      	strh	r2, [r3, #6]

}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bc80      	pop	{r7}
 800b57e:	4770      	bx	lr

0800b580 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b58a:	2180      	movs	r1, #128	; 0x80
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc2d 	bl	800bdec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b592:	2100      	movs	r1, #0
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fc29 	bl	800bdec <USBD_LL_StallEP>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b086      	sub	sp, #24
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d032      	beq.n	800b61e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 f834 	bl	800b626 <USBD_GetLen>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	75fa      	strb	r2, [r7, #23]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b5de:	7dfb      	ldrb	r3, [r7, #23]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	75fa      	strb	r2, [r7, #23]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	2203      	movs	r2, #3
 800b5ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b5ee:	e012      	b.n	800b616 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	60fa      	str	r2, [r7, #12]
 800b5f6:	7dfa      	ldrb	r2, [r7, #23]
 800b5f8:	1c51      	adds	r1, r2, #1
 800b5fa:	75f9      	strb	r1, [r7, #23]
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	440a      	add	r2, r1
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	75fa      	strb	r2, [r7, #23]
 800b60c:	461a      	mov	r2, r3
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	4413      	add	r3, r2
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e8      	bne.n	800b5f0 <USBD_GetString+0x4e>
    }
  }
}
 800b61e:	bf00      	nop
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b626:	b480      	push	{r7}
 800b628:	b085      	sub	sp, #20
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b632:	e005      	b.n	800b640 <USBD_GetLen+0x1a>
  {
    len++;
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	3301      	adds	r3, #1
 800b638:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3301      	adds	r3, #1
 800b63e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1f5      	bne.n	800b634 <USBD_GetLen+0xe>
  }

  return len;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	bc80      	pop	{r7}
 800b652:	4770      	bx	lr

0800b654 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	4613      	mov	r3, r2
 800b660:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2202      	movs	r2, #2
 800b666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b66a:	88fa      	ldrh	r2, [r7, #6]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b670:	88fa      	ldrh	r2, [r7, #6]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b676:	88fb      	ldrh	r3, [r7, #6]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	2100      	movs	r1, #0
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 fc3e 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	4613      	mov	r3, r2
 800b698:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	2100      	movs	r1, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fc2c 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2203      	movs	r2, #3
 800b6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b6c6:	88fa      	ldrh	r2, [r7, #6]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b6ce:	88fa      	ldrh	r2, [r7, #6]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6d6:	88fb      	ldrh	r3, [r7, #6]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	2100      	movs	r1, #0
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 fc31 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6fa:	88fb      	ldrh	r3, [r7, #6]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	2100      	movs	r1, #0
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fc1f 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2204      	movs	r2, #4
 800b71c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b720:	2300      	movs	r3, #0
 800b722:	2200      	movs	r2, #0
 800b724:	2100      	movs	r1, #0
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fbe9 	bl	800befe <USBD_LL_Transmit>

  return USBD_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2205      	movs	r2, #5
 800b742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b746:	2300      	movs	r3, #0
 800b748:	2200      	movs	r2, #0
 800b74a:	2100      	movs	r1, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fbf9 	bl	800bf44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b760:	2200      	movs	r2, #0
 800b762:	4912      	ldr	r1, [pc, #72]	; (800b7ac <MX_USB_DEVICE_Init+0x50>)
 800b764:	4812      	ldr	r0, [pc, #72]	; (800b7b0 <MX_USB_DEVICE_Init+0x54>)
 800b766:	f7fe ff6d 	bl	800a644 <USBD_Init>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b770:	f7f8 f94e 	bl	8003a10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b774:	490f      	ldr	r1, [pc, #60]	; (800b7b4 <MX_USB_DEVICE_Init+0x58>)
 800b776:	480e      	ldr	r0, [pc, #56]	; (800b7b0 <MX_USB_DEVICE_Init+0x54>)
 800b778:	f7fe ff8f 	bl	800a69a <USBD_RegisterClass>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b782:	f7f8 f945 	bl	8003a10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b786:	490c      	ldr	r1, [pc, #48]	; (800b7b8 <MX_USB_DEVICE_Init+0x5c>)
 800b788:	4809      	ldr	r0, [pc, #36]	; (800b7b0 <MX_USB_DEVICE_Init+0x54>)
 800b78a:	f7fe feef 	bl	800a56c <USBD_CDC_RegisterInterface>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b794:	f7f8 f93c 	bl	8003a10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b798:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <MX_USB_DEVICE_Init+0x54>)
 800b79a:	f7fe ff97 	bl	800a6cc <USBD_Start>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7a4:	f7f8 f934 	bl	8003a10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7a8:	bf00      	nop
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200017ac 	.word	0x200017ac
 800b7b0:	20001c28 	.word	0x20001c28
 800b7b4:	20001698 	.word	0x20001698
 800b7b8:	2000179c 	.word	0x2000179c

0800b7bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	4905      	ldr	r1, [pc, #20]	; (800b7d8 <CDC_Init_FS+0x1c>)
 800b7c4:	4805      	ldr	r0, [pc, #20]	; (800b7dc <CDC_Init_FS+0x20>)
 800b7c6:	f7fe fee7 	bl	800a598 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7ca:	4905      	ldr	r1, [pc, #20]	; (800b7e0 <CDC_Init_FS+0x24>)
 800b7cc:	4803      	ldr	r0, [pc, #12]	; (800b7dc <CDC_Init_FS+0x20>)
 800b7ce:	f7fe fefc 	bl	800a5ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200022d4 	.word	0x200022d4
 800b7dc:	20001c28 	.word	0x20001c28
 800b7e0:	20001eec 	.word	0x20001eec

0800b7e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bc80      	pop	{r7}
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	6039      	str	r1, [r7, #0]
 800b7fe:	71fb      	strb	r3, [r7, #7]
 800b800:	4613      	mov	r3, r2
 800b802:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b23      	cmp	r3, #35	; 0x23
 800b808:	d84a      	bhi.n	800b8a0 <CDC_Control_FS+0xac>
 800b80a:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <CDC_Control_FS+0x1c>)
 800b80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b810:	0800b8a1 	.word	0x0800b8a1
 800b814:	0800b8a1 	.word	0x0800b8a1
 800b818:	0800b8a1 	.word	0x0800b8a1
 800b81c:	0800b8a1 	.word	0x0800b8a1
 800b820:	0800b8a1 	.word	0x0800b8a1
 800b824:	0800b8a1 	.word	0x0800b8a1
 800b828:	0800b8a1 	.word	0x0800b8a1
 800b82c:	0800b8a1 	.word	0x0800b8a1
 800b830:	0800b8a1 	.word	0x0800b8a1
 800b834:	0800b8a1 	.word	0x0800b8a1
 800b838:	0800b8a1 	.word	0x0800b8a1
 800b83c:	0800b8a1 	.word	0x0800b8a1
 800b840:	0800b8a1 	.word	0x0800b8a1
 800b844:	0800b8a1 	.word	0x0800b8a1
 800b848:	0800b8a1 	.word	0x0800b8a1
 800b84c:	0800b8a1 	.word	0x0800b8a1
 800b850:	0800b8a1 	.word	0x0800b8a1
 800b854:	0800b8a1 	.word	0x0800b8a1
 800b858:	0800b8a1 	.word	0x0800b8a1
 800b85c:	0800b8a1 	.word	0x0800b8a1
 800b860:	0800b8a1 	.word	0x0800b8a1
 800b864:	0800b8a1 	.word	0x0800b8a1
 800b868:	0800b8a1 	.word	0x0800b8a1
 800b86c:	0800b8a1 	.word	0x0800b8a1
 800b870:	0800b8a1 	.word	0x0800b8a1
 800b874:	0800b8a1 	.word	0x0800b8a1
 800b878:	0800b8a1 	.word	0x0800b8a1
 800b87c:	0800b8a1 	.word	0x0800b8a1
 800b880:	0800b8a1 	.word	0x0800b8a1
 800b884:	0800b8a1 	.word	0x0800b8a1
 800b888:	0800b8a1 	.word	0x0800b8a1
 800b88c:	0800b8a1 	.word	0x0800b8a1
 800b890:	0800b8a1 	.word	0x0800b8a1
 800b894:	0800b8a1 	.word	0x0800b8a1
 800b898:	0800b8a1 	.word	0x0800b8a1
 800b89c:	0800b8a1 	.word	0x0800b8a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8a0:	bf00      	nop
  }

  return (USBD_OK);
 800b8a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bc80      	pop	{r7}
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop

0800b8b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4805      	ldr	r0, [pc, #20]	; (800b8d4 <CDC_Receive_FS+0x24>)
 800b8be:	f7fe fe84 	bl	800a5ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8c2:	4804      	ldr	r0, [pc, #16]	; (800b8d4 <CDC_Receive_FS+0x24>)
 800b8c4:	f7fe fe94 	bl	800a5f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b8c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20001c28 	.word	0x20001c28

0800b8d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	4603      	mov	r3, r0
 800b8e0:	6039      	str	r1, [r7, #0]
 800b8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2212      	movs	r2, #18
 800b8e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8ea:	4b03      	ldr	r3, [pc, #12]	; (800b8f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bc80      	pop	{r7}
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	200017c8 	.word	0x200017c8

0800b8fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	4603      	mov	r3, r0
 800b904:	6039      	str	r1, [r7, #0]
 800b906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2204      	movs	r2, #4
 800b90c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b90e:	4b03      	ldr	r3, [pc, #12]	; (800b91c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	bc80      	pop	{r7}
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	200017dc 	.word	0x200017dc

0800b920 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	6039      	str	r1, [r7, #0]
 800b92a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d105      	bne.n	800b93e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	4907      	ldr	r1, [pc, #28]	; (800b954 <USBD_FS_ProductStrDescriptor+0x34>)
 800b936:	4808      	ldr	r0, [pc, #32]	; (800b958 <USBD_FS_ProductStrDescriptor+0x38>)
 800b938:	f7ff fe33 	bl	800b5a2 <USBD_GetString>
 800b93c:	e004      	b.n	800b948 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b93e:	683a      	ldr	r2, [r7, #0]
 800b940:	4904      	ldr	r1, [pc, #16]	; (800b954 <USBD_FS_ProductStrDescriptor+0x34>)
 800b942:	4805      	ldr	r0, [pc, #20]	; (800b958 <USBD_FS_ProductStrDescriptor+0x38>)
 800b944:	f7ff fe2d 	bl	800b5a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b948:	4b02      	ldr	r3, [pc, #8]	; (800b954 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	200026bc 	.word	0x200026bc
 800b958:	0800eb5c 	.word	0x0800eb5c

0800b95c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	6039      	str	r1, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	4904      	ldr	r1, [pc, #16]	; (800b97c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b96c:	4804      	ldr	r0, [pc, #16]	; (800b980 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b96e:	f7ff fe18 	bl	800b5a2 <USBD_GetString>
  return USBD_StrDesc;
 800b972:	4b02      	ldr	r3, [pc, #8]	; (800b97c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	200026bc 	.word	0x200026bc
 800b980:	0800eb74 	.word	0x0800eb74

0800b984 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	6039      	str	r1, [r7, #0]
 800b98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	221a      	movs	r2, #26
 800b994:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b996:	f000 f843 	bl	800ba20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b99a:	4b02      	ldr	r3, [pc, #8]	; (800b9a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	200017e0 	.word	0x200017e0

0800b9a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d105      	bne.n	800b9c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4907      	ldr	r1, [pc, #28]	; (800b9dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9be:	4808      	ldr	r0, [pc, #32]	; (800b9e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9c0:	f7ff fdef 	bl	800b5a2 <USBD_GetString>
 800b9c4:	e004      	b.n	800b9d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	4904      	ldr	r1, [pc, #16]	; (800b9dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9ca:	4805      	ldr	r0, [pc, #20]	; (800b9e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9cc:	f7ff fde9 	bl	800b5a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	200026bc 	.word	0x200026bc
 800b9e0:	0800eb88 	.word	0x0800eb88

0800b9e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	6039      	str	r1, [r7, #0]
 800b9ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d105      	bne.n	800ba02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	4907      	ldr	r1, [pc, #28]	; (800ba18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9fa:	4808      	ldr	r0, [pc, #32]	; (800ba1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9fc:	f7ff fdd1 	bl	800b5a2 <USBD_GetString>
 800ba00:	e004      	b.n	800ba0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	4904      	ldr	r1, [pc, #16]	; (800ba18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba06:	4805      	ldr	r0, [pc, #20]	; (800ba1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba08:	f7ff fdcb 	bl	800b5a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba0c:	4b02      	ldr	r3, [pc, #8]	; (800ba18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	200026bc 	.word	0x200026bc
 800ba1c:	0800eb94 	.word	0x0800eb94

0800ba20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <Get_SerialNum+0x44>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba2c:	4b0e      	ldr	r3, [pc, #56]	; (800ba68 <Get_SerialNum+0x48>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba32:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <Get_SerialNum+0x4c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d009      	beq.n	800ba5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba46:	2208      	movs	r2, #8
 800ba48:	4909      	ldr	r1, [pc, #36]	; (800ba70 <Get_SerialNum+0x50>)
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 f814 	bl	800ba78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba50:	2204      	movs	r2, #4
 800ba52:	4908      	ldr	r1, [pc, #32]	; (800ba74 <Get_SerialNum+0x54>)
 800ba54:	68b8      	ldr	r0, [r7, #8]
 800ba56:	f000 f80f 	bl	800ba78 <IntToUnicode>
  }
}
 800ba5a:	bf00      	nop
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	1ffff7e8 	.word	0x1ffff7e8
 800ba68:	1ffff7ec 	.word	0x1ffff7ec
 800ba6c:	1ffff7f0 	.word	0x1ffff7f0
 800ba70:	200017e2 	.word	0x200017e2
 800ba74:	200017f2 	.word	0x200017f2

0800ba78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	4613      	mov	r3, r2
 800ba84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	75fb      	strb	r3, [r7, #23]
 800ba8e:	e027      	b.n	800bae0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	0f1b      	lsrs	r3, r3, #28
 800ba94:	2b09      	cmp	r3, #9
 800ba96:	d80b      	bhi.n	800bab0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	0f1b      	lsrs	r3, r3, #28
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	7dfb      	ldrb	r3, [r7, #23]
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	4619      	mov	r1, r3
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	440b      	add	r3, r1
 800baa8:	3230      	adds	r2, #48	; 0x30
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
 800baae:	e00a      	b.n	800bac6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	0f1b      	lsrs	r3, r3, #28
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	005b      	lsls	r3, r3, #1
 800baba:	4619      	mov	r1, r3
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	440b      	add	r3, r1
 800bac0:	3237      	adds	r2, #55	; 0x37
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	3301      	adds	r3, #1
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	4413      	add	r3, r2
 800bad6:	2200      	movs	r2, #0
 800bad8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bada:	7dfb      	ldrb	r3, [r7, #23]
 800badc:	3301      	adds	r3, #1
 800bade:	75fb      	strb	r3, [r7, #23]
 800bae0:	7dfa      	ldrb	r2, [r7, #23]
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d3d3      	bcc.n	800ba90 <IntToUnicode+0x18>
  }
}
 800bae8:	bf00      	nop
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	bc80      	pop	{r7}
 800baf0:	4770      	bx	lr
	...

0800baf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0d      	ldr	r2, [pc, #52]	; (800bb38 <HAL_PCD_MspInit+0x44>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d113      	bne.n	800bb2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bb06:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <HAL_PCD_MspInit+0x48>)
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	4a0c      	ldr	r2, [pc, #48]	; (800bb3c <HAL_PCD_MspInit+0x48>)
 800bb0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bb10:	61d3      	str	r3, [r2, #28]
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <HAL_PCD_MspInit+0x48>)
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb1a:	60fb      	str	r3, [r7, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bb1e:	2200      	movs	r2, #0
 800bb20:	2100      	movs	r1, #0
 800bb22:	2014      	movs	r0, #20
 800bb24:	f7f8 faa3 	bl	800406e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bb28:	2014      	movs	r0, #20
 800bb2a:	f7f8 fabc 	bl	80040a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bb2e:	bf00      	nop
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	40005c00 	.word	0x40005c00
 800bb3c:	40021000 	.word	0x40021000

0800bb40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f7fe fe00 	bl	800a75c <USBD_LL_SetupStage>
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bb76:	78fa      	ldrb	r2, [r7, #3]
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	440b      	add	r3, r1
 800bb84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	78fb      	ldrb	r3, [r7, #3]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7fe fe30 	bl	800a7f2 <USBD_LL_DataOutStage>
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bbac:	78fa      	ldrb	r2, [r7, #3]
 800bbae:	6879      	ldr	r1, [r7, #4]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	440b      	add	r3, r1
 800bbba:	333c      	adds	r3, #60	; 0x3c
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	78fb      	ldrb	r3, [r7, #3]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	f7fe fe87 	bl	800a8d4 <USBD_LL_DataInStage>
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe ff97 	bl	800ab10 <USBD_LL_SOF>
}
 800bbe2:	bf00      	nop
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d001      	beq.n	800bc02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bbfe:	f7f7 ff07 	bl	8003a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc08:	7bfa      	ldrb	r2, [r7, #15]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe ff47 	bl	800aaa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe ff00 	bl	800aa1e <USBD_LL_Reset>
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fe ff41 	bl	800aabe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d005      	beq.n	800bc50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc44:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <HAL_PCD_SuspendCallback+0x30>)
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	4a03      	ldr	r2, [pc, #12]	; (800bc58 <HAL_PCD_SuspendCallback+0x30>)
 800bc4a:	f043 0306 	orr.w	r3, r3, #6
 800bc4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	e000ed00 	.word	0xe000ed00

0800bc5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe ff3b 	bl	800aae6 <USBD_LL_Resume>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc80:	4a28      	ldr	r2, [pc, #160]	; (800bd24 <USBD_LL_Init+0xac>)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a26      	ldr	r2, [pc, #152]	; (800bd24 <USBD_LL_Init+0xac>)
 800bc8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bc90:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <USBD_LL_Init+0xac>)
 800bc92:	4a25      	ldr	r2, [pc, #148]	; (800bd28 <USBD_LL_Init+0xb0>)
 800bc94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc96:	4b23      	ldr	r3, [pc, #140]	; (800bd24 <USBD_LL_Init+0xac>)
 800bc98:	2208      	movs	r2, #8
 800bc9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc9c:	4b21      	ldr	r3, [pc, #132]	; (800bd24 <USBD_LL_Init+0xac>)
 800bc9e:	2202      	movs	r2, #2
 800bca0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bca2:	4b20      	ldr	r3, [pc, #128]	; (800bd24 <USBD_LL_Init+0xac>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bca8:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <USBD_LL_Init+0xac>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcae:	4b1d      	ldr	r3, [pc, #116]	; (800bd24 <USBD_LL_Init+0xac>)
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcb4:	481b      	ldr	r0, [pc, #108]	; (800bd24 <USBD_LL_Init+0xac>)
 800bcb6:	f7f9 fcaf 	bl	8005618 <HAL_PCD_Init>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bcc0:	f7f7 fea6 	bl	8003a10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcca:	2318      	movs	r3, #24
 800bccc:	2200      	movs	r2, #0
 800bcce:	2100      	movs	r1, #0
 800bcd0:	f7fa ffe3 	bl	8006c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcda:	2358      	movs	r3, #88	; 0x58
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2180      	movs	r1, #128	; 0x80
 800bce0:	f7fa ffdb 	bl	8006c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcea:	23c0      	movs	r3, #192	; 0xc0
 800bcec:	2200      	movs	r2, #0
 800bcee:	2181      	movs	r1, #129	; 0x81
 800bcf0:	f7fa ffd3 	bl	8006c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bcfa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2101      	movs	r1, #1
 800bd02:	f7fa ffca 	bl	8006c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd10:	2200      	movs	r2, #0
 800bd12:	2182      	movs	r1, #130	; 0x82
 800bd14:	f7fa ffc1 	bl	8006c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	200028bc 	.word	0x200028bc
 800bd28:	40005c00 	.word	0x40005c00

0800bd2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7f9 fd73 	bl	800582e <HAL_PCD_Start>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 f94e 	bl	800bff0 <USBD_Get_USB_Status>
 800bd54:	4603      	mov	r3, r0
 800bd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3710      	adds	r7, #16
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b084      	sub	sp, #16
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	4608      	mov	r0, r1
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4603      	mov	r3, r0
 800bd72:	70fb      	strb	r3, [r7, #3]
 800bd74:	460b      	mov	r3, r1
 800bd76:	70bb      	strb	r3, [r7, #2]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd8a:	78bb      	ldrb	r3, [r7, #2]
 800bd8c:	883a      	ldrh	r2, [r7, #0]
 800bd8e:	78f9      	ldrb	r1, [r7, #3]
 800bd90:	f7f9 feed 	bl	8005b6e <HAL_PCD_EP_Open>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f928 	bl	800bff0 <USBD_Get_USB_Status>
 800bda0:	4603      	mov	r3, r0
 800bda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b084      	sub	sp, #16
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdc8:	78fa      	ldrb	r2, [r7, #3]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f9 ff34 	bl	8005c3a <HAL_PCD_EP_Close>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f909 	bl	800bff0 <USBD_Get_USB_Status>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7f9 fff4 	bl	8005df8 <HAL_PCD_EP_SetStall>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f8ea 	bl	800bff0 <USBD_Get_USB_Status>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be20:	7bbb      	ldrb	r3, [r7, #14]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be44:	78fa      	ldrb	r2, [r7, #3]
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fa f835 	bl	8005eb8 <HAL_PCD_EP_ClrStall>
 800be4e:	4603      	mov	r3, r0
 800be50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	4618      	mov	r0, r3
 800be56:	f000 f8cb 	bl	800bff0 <USBD_Get_USB_Status>
 800be5a:	4603      	mov	r3, r0
 800be5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be80:	2b00      	cmp	r3, #0
 800be82:	da0c      	bge.n	800be9e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	3302      	adds	r3, #2
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	e00b      	b.n	800beb6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be9e:	78fb      	ldrb	r3, [r7, #3]
 800bea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea4:	68f9      	ldr	r1, [r7, #12]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	440b      	add	r3, r1
 800beb0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800beb4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr

0800bec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	460b      	mov	r3, r1
 800beca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	4611      	mov	r1, r2
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f9 fe20 	bl	8005b24 <HAL_PCD_SetAddress>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f880 	bl	800bff0 <USBD_Get_USB_Status>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	72fb      	strb	r3, [r7, #11]
 800bf0e:	4613      	mov	r3, r2
 800bf10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf20:	893b      	ldrh	r3, [r7, #8]
 800bf22:	7af9      	ldrb	r1, [r7, #11]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f7f9 ff24 	bl	8005d72 <HAL_PCD_EP_Transmit>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f85d 	bl	800bff0 <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3718      	adds	r7, #24
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	460b      	mov	r3, r1
 800bf52:	72fb      	strb	r3, [r7, #11]
 800bf54:	4613      	mov	r3, r2
 800bf56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf66:	893b      	ldrh	r3, [r7, #8]
 800bf68:	7af9      	ldrb	r1, [r7, #11]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	f7f9 fead 	bl	8005cca <HAL_PCD_EP_Receive>
 800bf70:	4603      	mov	r3, r0
 800bf72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f83a 	bl	800bff0 <USBD_Get_USB_Status>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf80:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf9c:	78fa      	ldrb	r2, [r7, #3]
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f9 fecf 	bl	8005d44 <HAL_PCD_EP_GetRxCount>
 800bfa6:	4603      	mov	r3, r0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfb8:	4b02      	ldr	r3, [pc, #8]	; (800bfc4 <USBD_static_malloc+0x14>)
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr
 800bfc4:	20001884 	.word	0x20001884

0800bfc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]

}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr

0800bfda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bfe6:	bf00      	nop
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bc80      	pop	{r7}
 800bfee:	4770      	bx	lr

0800bff0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bffe:	79fb      	ldrb	r3, [r7, #7]
 800c000:	2b03      	cmp	r3, #3
 800c002:	d817      	bhi.n	800c034 <USBD_Get_USB_Status+0x44>
 800c004:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <USBD_Get_USB_Status+0x1c>)
 800c006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00a:	bf00      	nop
 800c00c:	0800c01d 	.word	0x0800c01d
 800c010:	0800c023 	.word	0x0800c023
 800c014:	0800c029 	.word	0x0800c029
 800c018:	0800c02f 	.word	0x0800c02f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
    break;
 800c020:	e00b      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c022:	2302      	movs	r3, #2
 800c024:	73fb      	strb	r3, [r7, #15]
    break;
 800c026:	e008      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c028:	2301      	movs	r3, #1
 800c02a:	73fb      	strb	r3, [r7, #15]
    break;
 800c02c:	e005      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c02e:	2302      	movs	r3, #2
 800c030:	73fb      	strb	r3, [r7, #15]
    break;
 800c032:	e002      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c034:	2302      	movs	r3, #2
 800c036:	73fb      	strb	r3, [r7, #15]
    break;
 800c038:	bf00      	nop
  }
  return usb_status;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	bc80      	pop	{r7}
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop

0800c048 <__errno>:
 800c048:	4b01      	ldr	r3, [pc, #4]	; (800c050 <__errno+0x8>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	200017fc 	.word	0x200017fc

0800c054 <__libc_init_array>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	2500      	movs	r5, #0
 800c058:	4e0c      	ldr	r6, [pc, #48]	; (800c08c <__libc_init_array+0x38>)
 800c05a:	4c0d      	ldr	r4, [pc, #52]	; (800c090 <__libc_init_array+0x3c>)
 800c05c:	1ba4      	subs	r4, r4, r6
 800c05e:	10a4      	asrs	r4, r4, #2
 800c060:	42a5      	cmp	r5, r4
 800c062:	d109      	bne.n	800c078 <__libc_init_array+0x24>
 800c064:	f002 fd64 	bl	800eb30 <_init>
 800c068:	2500      	movs	r5, #0
 800c06a:	4e0a      	ldr	r6, [pc, #40]	; (800c094 <__libc_init_array+0x40>)
 800c06c:	4c0a      	ldr	r4, [pc, #40]	; (800c098 <__libc_init_array+0x44>)
 800c06e:	1ba4      	subs	r4, r4, r6
 800c070:	10a4      	asrs	r4, r4, #2
 800c072:	42a5      	cmp	r5, r4
 800c074:	d105      	bne.n	800c082 <__libc_init_array+0x2e>
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c07c:	4798      	blx	r3
 800c07e:	3501      	adds	r5, #1
 800c080:	e7ee      	b.n	800c060 <__libc_init_array+0xc>
 800c082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c086:	4798      	blx	r3
 800c088:	3501      	adds	r5, #1
 800c08a:	e7f2      	b.n	800c072 <__libc_init_array+0x1e>
 800c08c:	0800ee38 	.word	0x0800ee38
 800c090:	0800ee38 	.word	0x0800ee38
 800c094:	0800ee38 	.word	0x0800ee38
 800c098:	0800ee3c 	.word	0x0800ee3c

0800c09c <memset>:
 800c09c:	4603      	mov	r3, r0
 800c09e:	4402      	add	r2, r0
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d100      	bne.n	800c0a6 <memset+0xa>
 800c0a4:	4770      	bx	lr
 800c0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c0aa:	e7f9      	b.n	800c0a0 <memset+0x4>
 800c0ac:	0000      	movs	r0, r0
	...

0800c0b0 <atan>:
 800c0b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	4bb6      	ldr	r3, [pc, #728]	; (800c390 <atan+0x2e0>)
 800c0b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c0ba:	429e      	cmp	r6, r3
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	468b      	mov	fp, r1
 800c0c2:	dd17      	ble.n	800c0f4 <atan+0x44>
 800c0c4:	4bb3      	ldr	r3, [pc, #716]	; (800c394 <atan+0x2e4>)
 800c0c6:	429e      	cmp	r6, r3
 800c0c8:	dc01      	bgt.n	800c0ce <atan+0x1e>
 800c0ca:	d109      	bne.n	800c0e0 <atan+0x30>
 800c0cc:	b140      	cbz	r0, 800c0e0 <atan+0x30>
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 f8ad 	bl	8000234 <__adddf3>
 800c0da:	4604      	mov	r4, r0
 800c0dc:	460d      	mov	r5, r1
 800c0de:	e005      	b.n	800c0ec <atan+0x3c>
 800c0e0:	f1bb 0f00 	cmp.w	fp, #0
 800c0e4:	4cac      	ldr	r4, [pc, #688]	; (800c398 <atan+0x2e8>)
 800c0e6:	f340 8121 	ble.w	800c32c <atan+0x27c>
 800c0ea:	4dac      	ldr	r5, [pc, #688]	; (800c39c <atan+0x2ec>)
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f4:	4baa      	ldr	r3, [pc, #680]	; (800c3a0 <atan+0x2f0>)
 800c0f6:	429e      	cmp	r6, r3
 800c0f8:	dc11      	bgt.n	800c11e <atan+0x6e>
 800c0fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c0fe:	429e      	cmp	r6, r3
 800c100:	dc0a      	bgt.n	800c118 <atan+0x68>
 800c102:	a38b      	add	r3, pc, #556	; (adr r3, 800c330 <atan+0x280>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f7f4 f894 	bl	8000234 <__adddf3>
 800c10c:	2200      	movs	r2, #0
 800c10e:	4ba5      	ldr	r3, [pc, #660]	; (800c3a4 <atan+0x2f4>)
 800c110:	f7f4 fcd6 	bl	8000ac0 <__aeabi_dcmpgt>
 800c114:	2800      	cmp	r0, #0
 800c116:	d1e9      	bne.n	800c0ec <atan+0x3c>
 800c118:	f04f 3aff 	mov.w	sl, #4294967295
 800c11c:	e027      	b.n	800c16e <atan+0xbe>
 800c11e:	f000 f987 	bl	800c430 <fabs>
 800c122:	4ba1      	ldr	r3, [pc, #644]	; (800c3a8 <atan+0x2f8>)
 800c124:	4604      	mov	r4, r0
 800c126:	429e      	cmp	r6, r3
 800c128:	460d      	mov	r5, r1
 800c12a:	f300 80b8 	bgt.w	800c29e <atan+0x1ee>
 800c12e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c132:	429e      	cmp	r6, r3
 800c134:	f300 809c 	bgt.w	800c270 <atan+0x1c0>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	f7f4 f87a 	bl	8000234 <__adddf3>
 800c140:	2200      	movs	r2, #0
 800c142:	4b98      	ldr	r3, [pc, #608]	; (800c3a4 <atan+0x2f4>)
 800c144:	f7f4 f874 	bl	8000230 <__aeabi_dsub>
 800c148:	2200      	movs	r2, #0
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c152:	4620      	mov	r0, r4
 800c154:	4629      	mov	r1, r5
 800c156:	f7f4 f86d 	bl	8000234 <__adddf3>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4630      	mov	r0, r6
 800c160:	4639      	mov	r1, r7
 800c162:	f7f4 fb47 	bl	80007f4 <__aeabi_ddiv>
 800c166:	f04f 0a00 	mov.w	sl, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	460d      	mov	r5, r1
 800c16e:	4622      	mov	r2, r4
 800c170:	462b      	mov	r3, r5
 800c172:	4620      	mov	r0, r4
 800c174:	4629      	mov	r1, r5
 800c176:	f7f4 fa13 	bl	80005a0 <__aeabi_dmul>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4680      	mov	r8, r0
 800c180:	4689      	mov	r9, r1
 800c182:	f7f4 fa0d 	bl	80005a0 <__aeabi_dmul>
 800c186:	a36c      	add	r3, pc, #432	; (adr r3, 800c338 <atan+0x288>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	4606      	mov	r6, r0
 800c18e:	460f      	mov	r7, r1
 800c190:	f7f4 fa06 	bl	80005a0 <__aeabi_dmul>
 800c194:	a36a      	add	r3, pc, #424	; (adr r3, 800c340 <atan+0x290>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 f84b 	bl	8000234 <__adddf3>
 800c19e:	4632      	mov	r2, r6
 800c1a0:	463b      	mov	r3, r7
 800c1a2:	f7f4 f9fd 	bl	80005a0 <__aeabi_dmul>
 800c1a6:	a368      	add	r3, pc, #416	; (adr r3, 800c348 <atan+0x298>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 f842 	bl	8000234 <__adddf3>
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	f7f4 f9f4 	bl	80005a0 <__aeabi_dmul>
 800c1b8:	a365      	add	r3, pc, #404	; (adr r3, 800c350 <atan+0x2a0>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 f839 	bl	8000234 <__adddf3>
 800c1c2:	4632      	mov	r2, r6
 800c1c4:	463b      	mov	r3, r7
 800c1c6:	f7f4 f9eb 	bl	80005a0 <__aeabi_dmul>
 800c1ca:	a363      	add	r3, pc, #396	; (adr r3, 800c358 <atan+0x2a8>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	f7f4 f830 	bl	8000234 <__adddf3>
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	463b      	mov	r3, r7
 800c1d8:	f7f4 f9e2 	bl	80005a0 <__aeabi_dmul>
 800c1dc:	a360      	add	r3, pc, #384	; (adr r3, 800c360 <atan+0x2b0>)
 800c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e2:	f7f4 f827 	bl	8000234 <__adddf3>
 800c1e6:	4642      	mov	r2, r8
 800c1e8:	464b      	mov	r3, r9
 800c1ea:	f7f4 f9d9 	bl	80005a0 <__aeabi_dmul>
 800c1ee:	a35e      	add	r3, pc, #376	; (adr r3, 800c368 <atan+0x2b8>)
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4689      	mov	r9, r1
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 f9d0 	bl	80005a0 <__aeabi_dmul>
 800c200:	a35b      	add	r3, pc, #364	; (adr r3, 800c370 <atan+0x2c0>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	f7f4 f813 	bl	8000230 <__aeabi_dsub>
 800c20a:	4632      	mov	r2, r6
 800c20c:	463b      	mov	r3, r7
 800c20e:	f7f4 f9c7 	bl	80005a0 <__aeabi_dmul>
 800c212:	a359      	add	r3, pc, #356	; (adr r3, 800c378 <atan+0x2c8>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f7f4 f80a 	bl	8000230 <__aeabi_dsub>
 800c21c:	4632      	mov	r2, r6
 800c21e:	463b      	mov	r3, r7
 800c220:	f7f4 f9be 	bl	80005a0 <__aeabi_dmul>
 800c224:	a356      	add	r3, pc, #344	; (adr r3, 800c380 <atan+0x2d0>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	f7f4 f801 	bl	8000230 <__aeabi_dsub>
 800c22e:	4632      	mov	r2, r6
 800c230:	463b      	mov	r3, r7
 800c232:	f7f4 f9b5 	bl	80005a0 <__aeabi_dmul>
 800c236:	a354      	add	r3, pc, #336	; (adr r3, 800c388 <atan+0x2d8>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f7f3 fff8 	bl	8000230 <__aeabi_dsub>
 800c240:	4632      	mov	r2, r6
 800c242:	463b      	mov	r3, r7
 800c244:	f7f4 f9ac 	bl	80005a0 <__aeabi_dmul>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4640      	mov	r0, r8
 800c24e:	4649      	mov	r1, r9
 800c250:	f7f3 fff0 	bl	8000234 <__adddf3>
 800c254:	4622      	mov	r2, r4
 800c256:	462b      	mov	r3, r5
 800c258:	f7f4 f9a2 	bl	80005a0 <__aeabi_dmul>
 800c25c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	d144      	bne.n	800c2f0 <atan+0x240>
 800c266:	4620      	mov	r0, r4
 800c268:	4629      	mov	r1, r5
 800c26a:	f7f3 ffe1 	bl	8000230 <__aeabi_dsub>
 800c26e:	e734      	b.n	800c0da <atan+0x2a>
 800c270:	2200      	movs	r2, #0
 800c272:	4b4c      	ldr	r3, [pc, #304]	; (800c3a4 <atan+0x2f4>)
 800c274:	f7f3 ffdc 	bl	8000230 <__aeabi_dsub>
 800c278:	2200      	movs	r2, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	4b49      	ldr	r3, [pc, #292]	; (800c3a4 <atan+0x2f4>)
 800c280:	4620      	mov	r0, r4
 800c282:	4629      	mov	r1, r5
 800c284:	f7f3 ffd6 	bl	8000234 <__adddf3>
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	4630      	mov	r0, r6
 800c28e:	4639      	mov	r1, r7
 800c290:	f7f4 fab0 	bl	80007f4 <__aeabi_ddiv>
 800c294:	f04f 0a01 	mov.w	sl, #1
 800c298:	4604      	mov	r4, r0
 800c29a:	460d      	mov	r5, r1
 800c29c:	e767      	b.n	800c16e <atan+0xbe>
 800c29e:	4b43      	ldr	r3, [pc, #268]	; (800c3ac <atan+0x2fc>)
 800c2a0:	429e      	cmp	r6, r3
 800c2a2:	dc1a      	bgt.n	800c2da <atan+0x22a>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4b42      	ldr	r3, [pc, #264]	; (800c3b0 <atan+0x300>)
 800c2a8:	f7f3 ffc2 	bl	8000230 <__aeabi_dsub>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	460f      	mov	r7, r1
 800c2b2:	4b3f      	ldr	r3, [pc, #252]	; (800c3b0 <atan+0x300>)
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f4 f972 	bl	80005a0 <__aeabi_dmul>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	4b39      	ldr	r3, [pc, #228]	; (800c3a4 <atan+0x2f4>)
 800c2c0:	f7f3 ffb8 	bl	8000234 <__adddf3>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f4 fa92 	bl	80007f4 <__aeabi_ddiv>
 800c2d0:	f04f 0a02 	mov.w	sl, #2
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	e749      	b.n	800c16e <atan+0xbe>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	2000      	movs	r0, #0
 800c2e0:	4934      	ldr	r1, [pc, #208]	; (800c3b4 <atan+0x304>)
 800c2e2:	f7f4 fa87 	bl	80007f4 <__aeabi_ddiv>
 800c2e6:	f04f 0a03 	mov.w	sl, #3
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	e73e      	b.n	800c16e <atan+0xbe>
 800c2f0:	4b31      	ldr	r3, [pc, #196]	; (800c3b8 <atan+0x308>)
 800c2f2:	4e32      	ldr	r6, [pc, #200]	; (800c3bc <atan+0x30c>)
 800c2f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c2f8:	4456      	add	r6, sl
 800c2fa:	449a      	add	sl, r3
 800c2fc:	e9da 2300 	ldrd	r2, r3, [sl]
 800c300:	f7f3 ff96 	bl	8000230 <__aeabi_dsub>
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	f7f3 ff92 	bl	8000230 <__aeabi_dsub>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c314:	f7f3 ff8c 	bl	8000230 <__aeabi_dsub>
 800c318:	f1bb 0f00 	cmp.w	fp, #0
 800c31c:	4604      	mov	r4, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	f6bf aee4 	bge.w	800c0ec <atan+0x3c>
 800c324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c328:	461d      	mov	r5, r3
 800c32a:	e6df      	b.n	800c0ec <atan+0x3c>
 800c32c:	4d24      	ldr	r5, [pc, #144]	; (800c3c0 <atan+0x310>)
 800c32e:	e6dd      	b.n	800c0ec <atan+0x3c>
 800c330:	8800759c 	.word	0x8800759c
 800c334:	7e37e43c 	.word	0x7e37e43c
 800c338:	e322da11 	.word	0xe322da11
 800c33c:	3f90ad3a 	.word	0x3f90ad3a
 800c340:	24760deb 	.word	0x24760deb
 800c344:	3fa97b4b 	.word	0x3fa97b4b
 800c348:	a0d03d51 	.word	0xa0d03d51
 800c34c:	3fb10d66 	.word	0x3fb10d66
 800c350:	c54c206e 	.word	0xc54c206e
 800c354:	3fb745cd 	.word	0x3fb745cd
 800c358:	920083ff 	.word	0x920083ff
 800c35c:	3fc24924 	.word	0x3fc24924
 800c360:	5555550d 	.word	0x5555550d
 800c364:	3fd55555 	.word	0x3fd55555
 800c368:	2c6a6c2f 	.word	0x2c6a6c2f
 800c36c:	bfa2b444 	.word	0xbfa2b444
 800c370:	52defd9a 	.word	0x52defd9a
 800c374:	3fadde2d 	.word	0x3fadde2d
 800c378:	af749a6d 	.word	0xaf749a6d
 800c37c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c380:	fe231671 	.word	0xfe231671
 800c384:	3fbc71c6 	.word	0x3fbc71c6
 800c388:	9998ebc4 	.word	0x9998ebc4
 800c38c:	3fc99999 	.word	0x3fc99999
 800c390:	440fffff 	.word	0x440fffff
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	54442d18 	.word	0x54442d18
 800c39c:	3ff921fb 	.word	0x3ff921fb
 800c3a0:	3fdbffff 	.word	0x3fdbffff
 800c3a4:	3ff00000 	.word	0x3ff00000
 800c3a8:	3ff2ffff 	.word	0x3ff2ffff
 800c3ac:	40037fff 	.word	0x40037fff
 800c3b0:	3ff80000 	.word	0x3ff80000
 800c3b4:	bff00000 	.word	0xbff00000
 800c3b8:	0800ebe0 	.word	0x0800ebe0
 800c3bc:	0800ebc0 	.word	0x0800ebc0
 800c3c0:	bff921fb 	.word	0xbff921fb

0800c3c4 <cos>:
 800c3c4:	b530      	push	{r4, r5, lr}
 800c3c6:	4a18      	ldr	r2, [pc, #96]	; (800c428 <cos+0x64>)
 800c3c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	dc04      	bgt.n	800c3dc <cos+0x18>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f001 fb93 	bl	800db00 <__kernel_cos>
 800c3da:	e006      	b.n	800c3ea <cos+0x26>
 800c3dc:	4a13      	ldr	r2, [pc, #76]	; (800c42c <cos+0x68>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	dd05      	ble.n	800c3ee <cos+0x2a>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	f7f3 ff23 	bl	8000230 <__aeabi_dsub>
 800c3ea:	b007      	add	sp, #28
 800c3ec:	bd30      	pop	{r4, r5, pc}
 800c3ee:	aa02      	add	r2, sp, #8
 800c3f0:	f001 f8ea 	bl	800d5c8 <__ieee754_rem_pio2>
 800c3f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3f8:	f000 0403 	and.w	r4, r0, #3
 800c3fc:	2c01      	cmp	r4, #1
 800c3fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c402:	d008      	beq.n	800c416 <cos+0x52>
 800c404:	2c02      	cmp	r4, #2
 800c406:	d00c      	beq.n	800c422 <cos+0x5e>
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d0e4      	beq.n	800c3d6 <cos+0x12>
 800c40c:	2401      	movs	r4, #1
 800c40e:	9400      	str	r4, [sp, #0]
 800c410:	f001 ff7e 	bl	800e310 <__kernel_sin>
 800c414:	e7e9      	b.n	800c3ea <cos+0x26>
 800c416:	9400      	str	r4, [sp, #0]
 800c418:	f001 ff7a 	bl	800e310 <__kernel_sin>
 800c41c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c420:	e7e3      	b.n	800c3ea <cos+0x26>
 800c422:	f001 fb6d 	bl	800db00 <__kernel_cos>
 800c426:	e7f9      	b.n	800c41c <cos+0x58>
 800c428:	3fe921fb 	.word	0x3fe921fb
 800c42c:	7fefffff 	.word	0x7fefffff

0800c430 <fabs>:
 800c430:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c434:	4619      	mov	r1, r3
 800c436:	4770      	bx	lr

0800c438 <fmax>:
 800c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43a:	4604      	mov	r4, r0
 800c43c:	460d      	mov	r5, r1
 800c43e:	4616      	mov	r6, r2
 800c440:	461f      	mov	r7, r3
 800c442:	f000 f813 	bl	800c46c <__fpclassifyd>
 800c446:	b158      	cbz	r0, 800c460 <fmax+0x28>
 800c448:	4630      	mov	r0, r6
 800c44a:	4639      	mov	r1, r7
 800c44c:	f000 f80e 	bl	800c46c <__fpclassifyd>
 800c450:	b140      	cbz	r0, 800c464 <fmax+0x2c>
 800c452:	4632      	mov	r2, r6
 800c454:	463b      	mov	r3, r7
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f4 fb31 	bl	8000ac0 <__aeabi_dcmpgt>
 800c45e:	b908      	cbnz	r0, 800c464 <fmax+0x2c>
 800c460:	4634      	mov	r4, r6
 800c462:	463d      	mov	r5, r7
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c46c <__fpclassifyd>:
 800c46c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800c470:	b510      	push	{r4, lr}
 800c472:	d01b      	beq.n	800c4ac <__fpclassifyd+0x40>
 800c474:	4a0f      	ldr	r2, [pc, #60]	; (800c4b4 <__fpclassifyd+0x48>)
 800c476:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 800c47a:	4294      	cmp	r4, r2
 800c47c:	d910      	bls.n	800c4a0 <__fpclassifyd+0x34>
 800c47e:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 800c482:	4a0c      	ldr	r2, [pc, #48]	; (800c4b4 <__fpclassifyd+0x48>)
 800c484:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 800c488:	4291      	cmp	r1, r2
 800c48a:	d909      	bls.n	800c4a0 <__fpclassifyd+0x34>
 800c48c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c490:	d308      	bcc.n	800c4a4 <__fpclassifyd+0x38>
 800c492:	4a09      	ldr	r2, [pc, #36]	; (800c4b8 <__fpclassifyd+0x4c>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d107      	bne.n	800c4a8 <__fpclassifyd+0x3c>
 800c498:	fab0 f080 	clz	r0, r0
 800c49c:	0940      	lsrs	r0, r0, #5
 800c49e:	bd10      	pop	{r4, pc}
 800c4a0:	2004      	movs	r0, #4
 800c4a2:	e7fc      	b.n	800c49e <__fpclassifyd+0x32>
 800c4a4:	2003      	movs	r0, #3
 800c4a6:	e7fa      	b.n	800c49e <__fpclassifyd+0x32>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e7f8      	b.n	800c49e <__fpclassifyd+0x32>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d1e6      	bne.n	800c47e <__fpclassifyd+0x12>
 800c4b0:	2002      	movs	r0, #2
 800c4b2:	e7f4      	b.n	800c49e <__fpclassifyd+0x32>
 800c4b4:	7fdfffff 	.word	0x7fdfffff
 800c4b8:	7ff00000 	.word	0x7ff00000

0800c4bc <sin>:
 800c4bc:	b530      	push	{r4, r5, lr}
 800c4be:	4a1a      	ldr	r2, [pc, #104]	; (800c528 <sin+0x6c>)
 800c4c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	dc06      	bgt.n	800c4d8 <sin+0x1c>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f001 ff1d 	bl	800e310 <__kernel_sin>
 800c4d6:	e006      	b.n	800c4e6 <sin+0x2a>
 800c4d8:	4a14      	ldr	r2, [pc, #80]	; (800c52c <sin+0x70>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	dd05      	ble.n	800c4ea <sin+0x2e>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	f7f3 fea5 	bl	8000230 <__aeabi_dsub>
 800c4e6:	b007      	add	sp, #28
 800c4e8:	bd30      	pop	{r4, r5, pc}
 800c4ea:	aa02      	add	r2, sp, #8
 800c4ec:	f001 f86c 	bl	800d5c8 <__ieee754_rem_pio2>
 800c4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4f4:	f000 0403 	and.w	r4, r0, #3
 800c4f8:	2c01      	cmp	r4, #1
 800c4fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4fe:	d005      	beq.n	800c50c <sin+0x50>
 800c500:	2c02      	cmp	r4, #2
 800c502:	d006      	beq.n	800c512 <sin+0x56>
 800c504:	b964      	cbnz	r4, 800c520 <sin+0x64>
 800c506:	2401      	movs	r4, #1
 800c508:	9400      	str	r4, [sp, #0]
 800c50a:	e7e2      	b.n	800c4d2 <sin+0x16>
 800c50c:	f001 faf8 	bl	800db00 <__kernel_cos>
 800c510:	e7e9      	b.n	800c4e6 <sin+0x2a>
 800c512:	2401      	movs	r4, #1
 800c514:	9400      	str	r4, [sp, #0]
 800c516:	f001 fefb 	bl	800e310 <__kernel_sin>
 800c51a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c51e:	e7e2      	b.n	800c4e6 <sin+0x2a>
 800c520:	f001 faee 	bl	800db00 <__kernel_cos>
 800c524:	e7f9      	b.n	800c51a <sin+0x5e>
 800c526:	bf00      	nop
 800c528:	3fe921fb 	.word	0x3fe921fb
 800c52c:	7fefffff 	.word	0x7fefffff

0800c530 <tan>:
 800c530:	b530      	push	{r4, r5, lr}
 800c532:	4a12      	ldr	r2, [pc, #72]	; (800c57c <tan+0x4c>)
 800c534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c538:	4293      	cmp	r3, r2
 800c53a:	b087      	sub	sp, #28
 800c53c:	dc06      	bgt.n	800c54c <tan+0x1c>
 800c53e:	2301      	movs	r3, #1
 800c540:	2200      	movs	r2, #0
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	2300      	movs	r3, #0
 800c546:	f001 ff9b 	bl	800e480 <__kernel_tan>
 800c54a:	e006      	b.n	800c55a <tan+0x2a>
 800c54c:	4a0c      	ldr	r2, [pc, #48]	; (800c580 <tan+0x50>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	dd05      	ble.n	800c55e <tan+0x2e>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	f7f3 fe6b 	bl	8000230 <__aeabi_dsub>
 800c55a:	b007      	add	sp, #28
 800c55c:	bd30      	pop	{r4, r5, pc}
 800c55e:	aa02      	add	r2, sp, #8
 800c560:	f001 f832 	bl	800d5c8 <__ieee754_rem_pio2>
 800c564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c568:	0040      	lsls	r0, r0, #1
 800c56a:	f000 0002 	and.w	r0, r0, #2
 800c56e:	f1c0 0001 	rsb	r0, r0, #1
 800c572:	9000      	str	r0, [sp, #0]
 800c574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c578:	e7e5      	b.n	800c546 <tan+0x16>
 800c57a:	bf00      	nop
 800c57c:	3fe921fb 	.word	0x3fe921fb
 800c580:	7fefffff 	.word	0x7fefffff

0800c584 <fmod>:
 800c584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c588:	b08b      	sub	sp, #44	; 0x2c
 800c58a:	461f      	mov	r7, r3
 800c58c:	4604      	mov	r4, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	4616      	mov	r6, r2
 800c592:	f000 fa03 	bl	800c99c <__ieee754_fmod>
 800c596:	4b27      	ldr	r3, [pc, #156]	; (800c634 <fmod+0xb0>)
 800c598:	4680      	mov	r8, r0
 800c59a:	f993 a000 	ldrsb.w	sl, [r3]
 800c59e:	4689      	mov	r9, r1
 800c5a0:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c5a4:	d030      	beq.n	800c608 <fmod+0x84>
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	463b      	mov	r3, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f4 fa91 	bl	8000ad4 <__aeabi_dcmpun>
 800c5b2:	bb48      	cbnz	r0, 800c608 <fmod+0x84>
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7f4 fa8a 	bl	8000ad4 <__aeabi_dcmpun>
 800c5c0:	4683      	mov	fp, r0
 800c5c2:	bb08      	cbnz	r0, 800c608 <fmod+0x84>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f7f4 fa50 	bl	8000a70 <__aeabi_dcmpeq>
 800c5d0:	b1d0      	cbz	r0, 800c608 <fmod+0x84>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	4b18      	ldr	r3, [pc, #96]	; (800c638 <fmod+0xb4>)
 800c5d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c5dc:	9301      	str	r3, [sp, #4]
 800c5de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c5e2:	f8cd b020 	str.w	fp, [sp, #32]
 800c5e6:	f1ba 0f00 	cmp.w	sl, #0
 800c5ea:	d112      	bne.n	800c612 <fmod+0x8e>
 800c5ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c5f0:	4668      	mov	r0, sp
 800c5f2:	f002 f991 	bl	800e918 <matherr>
 800c5f6:	b1b8      	cbz	r0, 800c628 <fmod+0xa4>
 800c5f8:	9b08      	ldr	r3, [sp, #32]
 800c5fa:	b11b      	cbz	r3, 800c604 <fmod+0x80>
 800c5fc:	f7ff fd24 	bl	800c048 <__errno>
 800c600:	9b08      	ldr	r3, [sp, #32]
 800c602:	6003      	str	r3, [r0, #0]
 800c604:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c608:	4640      	mov	r0, r8
 800c60a:	4649      	mov	r1, r9
 800c60c:	b00b      	add	sp, #44	; 0x2c
 800c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c612:	2200      	movs	r2, #0
 800c614:	2300      	movs	r3, #0
 800c616:	4610      	mov	r0, r2
 800c618:	4619      	mov	r1, r3
 800c61a:	f7f4 f8eb 	bl	80007f4 <__aeabi_ddiv>
 800c61e:	f1ba 0f02 	cmp.w	sl, #2
 800c622:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c626:	d1e3      	bne.n	800c5f0 <fmod+0x6c>
 800c628:	f7ff fd0e 	bl	800c048 <__errno>
 800c62c:	2321      	movs	r3, #33	; 0x21
 800c62e:	6003      	str	r3, [r0, #0]
 800c630:	e7e2      	b.n	800c5f8 <fmod+0x74>
 800c632:	bf00      	nop
 800c634:	20001860 	.word	0x20001860
 800c638:	0800ec00 	.word	0x0800ec00

0800c63c <pow>:
 800c63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	b08f      	sub	sp, #60	; 0x3c
 800c642:	461d      	mov	r5, r3
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	4614      	mov	r4, r2
 800c64a:	f000 fab1 	bl	800cbb0 <__ieee754_pow>
 800c64e:	4fa1      	ldr	r7, [pc, #644]	; (800c8d4 <pow+0x298>)
 800c650:	e9cd 0100 	strd	r0, r1, [sp]
 800c654:	f997 3000 	ldrsb.w	r3, [r7]
 800c658:	463e      	mov	r6, r7
 800c65a:	9302      	str	r3, [sp, #8]
 800c65c:	3301      	adds	r3, #1
 800c65e:	d05f      	beq.n	800c720 <pow+0xe4>
 800c660:	4622      	mov	r2, r4
 800c662:	462b      	mov	r3, r5
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f4 fa34 	bl	8000ad4 <__aeabi_dcmpun>
 800c66c:	4682      	mov	sl, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d156      	bne.n	800c720 <pow+0xe4>
 800c672:	4642      	mov	r2, r8
 800c674:	464b      	mov	r3, r9
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	f7f4 fa2b 	bl	8000ad4 <__aeabi_dcmpun>
 800c67e:	9003      	str	r0, [sp, #12]
 800c680:	b1e8      	cbz	r0, 800c6be <pow+0x82>
 800c682:	2200      	movs	r2, #0
 800c684:	2300      	movs	r3, #0
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f4 f9f1 	bl	8000a70 <__aeabi_dcmpeq>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d046      	beq.n	800c720 <pow+0xe4>
 800c692:	2301      	movs	r3, #1
 800c694:	2200      	movs	r2, #0
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	4b8f      	ldr	r3, [pc, #572]	; (800c8d8 <pow+0x29c>)
 800c69a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800c69e:	9305      	str	r3, [sp, #20]
 800c6a0:	4b8e      	ldr	r3, [pc, #568]	; (800c8dc <pow+0x2a0>)
 800c6a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c6a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d031      	beq.n	800c718 <pow+0xdc>
 800c6b4:	a804      	add	r0, sp, #16
 800c6b6:	f002 f92f 	bl	800e918 <matherr>
 800c6ba:	bb38      	cbnz	r0, 800c70c <pow+0xd0>
 800c6bc:	e058      	b.n	800c770 <pow+0x134>
 800c6be:	f04f 0a00 	mov.w	sl, #0
 800c6c2:	f04f 0b00 	mov.w	fp, #0
 800c6c6:	4652      	mov	r2, sl
 800c6c8:	465b      	mov	r3, fp
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f7f4 f9cf 	bl	8000a70 <__aeabi_dcmpeq>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d051      	beq.n	800c77a <pow+0x13e>
 800c6d6:	4652      	mov	r2, sl
 800c6d8:	465b      	mov	r3, fp
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4629      	mov	r1, r5
 800c6de:	f7f4 f9c7 	bl	8000a70 <__aeabi_dcmpeq>
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	b308      	cbz	r0, 800c72a <pow+0xee>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	4b7b      	ldr	r3, [pc, #492]	; (800c8d8 <pow+0x29c>)
 800c6ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c6f0:	9305      	str	r3, [sp, #20]
 800c6f2:	9b03      	ldr	r3, [sp, #12]
 800c6f4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c6f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0d7      	beq.n	800c6b4 <pow+0x78>
 800c704:	2200      	movs	r2, #0
 800c706:	4b75      	ldr	r3, [pc, #468]	; (800c8dc <pow+0x2a0>)
 800c708:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c70c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c70e:	b11b      	cbz	r3, 800c718 <pow+0xdc>
 800c710:	f7ff fc9a 	bl	800c048 <__errno>
 800c714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c716:	6003      	str	r3, [r0, #0]
 800c718:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800c71c:	e9cd 3400 	strd	r3, r4, [sp]
 800c720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c724:	b00f      	add	sp, #60	; 0x3c
 800c726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72a:	4620      	mov	r0, r4
 800c72c:	4629      	mov	r1, r5
 800c72e:	f002 f867 	bl	800e800 <finite>
 800c732:	2800      	cmp	r0, #0
 800c734:	d0f4      	beq.n	800c720 <pow+0xe4>
 800c736:	4652      	mov	r2, sl
 800c738:	465b      	mov	r3, fp
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f4 f9a1 	bl	8000a84 <__aeabi_dcmplt>
 800c742:	2800      	cmp	r0, #0
 800c744:	d0ec      	beq.n	800c720 <pow+0xe4>
 800c746:	2301      	movs	r3, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	4b63      	ldr	r3, [pc, #396]	; (800c8d8 <pow+0x29c>)
 800c74c:	960c      	str	r6, [sp, #48]	; 0x30
 800c74e:	9305      	str	r3, [sp, #20]
 800c750:	f997 3000 	ldrsb.w	r3, [r7]
 800c754:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c758:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c75c:	b913      	cbnz	r3, 800c764 <pow+0x128>
 800c75e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c762:	e7a7      	b.n	800c6b4 <pow+0x78>
 800c764:	2000      	movs	r0, #0
 800c766:	495e      	ldr	r1, [pc, #376]	; (800c8e0 <pow+0x2a4>)
 800c768:	2b02      	cmp	r3, #2
 800c76a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c76e:	d1a1      	bne.n	800c6b4 <pow+0x78>
 800c770:	f7ff fc6a 	bl	800c048 <__errno>
 800c774:	2321      	movs	r3, #33	; 0x21
 800c776:	6003      	str	r3, [r0, #0]
 800c778:	e7c8      	b.n	800c70c <pow+0xd0>
 800c77a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c77e:	f002 f83f 	bl	800e800 <finite>
 800c782:	9002      	str	r0, [sp, #8]
 800c784:	2800      	cmp	r0, #0
 800c786:	d177      	bne.n	800c878 <pow+0x23c>
 800c788:	4640      	mov	r0, r8
 800c78a:	4649      	mov	r1, r9
 800c78c:	f002 f838 	bl	800e800 <finite>
 800c790:	2800      	cmp	r0, #0
 800c792:	d071      	beq.n	800c878 <pow+0x23c>
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	f002 f832 	bl	800e800 <finite>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d06b      	beq.n	800c878 <pow+0x23c>
 800c7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	f7f4 f994 	bl	8000ad4 <__aeabi_dcmpun>
 800c7ac:	f997 7000 	ldrsb.w	r7, [r7]
 800c7b0:	4b49      	ldr	r3, [pc, #292]	; (800c8d8 <pow+0x29c>)
 800c7b2:	b1a0      	cbz	r0, 800c7de <pow+0x1a2>
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7ba:	9b02      	ldr	r3, [sp, #8]
 800c7bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c7c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7c2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c7c6:	2f00      	cmp	r7, #0
 800c7c8:	d0c9      	beq.n	800c75e <pow+0x122>
 800c7ca:	4652      	mov	r2, sl
 800c7cc:	465b      	mov	r3, fp
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	4659      	mov	r1, fp
 800c7d2:	f7f4 f80f 	bl	80007f4 <__aeabi_ddiv>
 800c7d6:	2f02      	cmp	r7, #2
 800c7d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c7dc:	e7c7      	b.n	800c76e <pow+0x132>
 800c7de:	2203      	movs	r2, #3
 800c7e0:	900c      	str	r0, [sp, #48]	; 0x30
 800c7e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4b3d      	ldr	r3, [pc, #244]	; (800c8e4 <pow+0x2a8>)
 800c7ee:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c7f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c7f6:	f7f3 fed3 	bl	80005a0 <__aeabi_dmul>
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	bb17      	cbnz	r7, 800c846 <pow+0x20a>
 800c800:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c804:	4b38      	ldr	r3, [pc, #224]	; (800c8e8 <pow+0x2ac>)
 800c806:	4640      	mov	r0, r8
 800c808:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c80c:	4649      	mov	r1, r9
 800c80e:	4652      	mov	r2, sl
 800c810:	465b      	mov	r3, fp
 800c812:	f7f4 f937 	bl	8000a84 <__aeabi_dcmplt>
 800c816:	2800      	cmp	r0, #0
 800c818:	d054      	beq.n	800c8c4 <pow+0x288>
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f002 f883 	bl	800e928 <rint>
 800c822:	4622      	mov	r2, r4
 800c824:	462b      	mov	r3, r5
 800c826:	f7f4 f923 	bl	8000a70 <__aeabi_dcmpeq>
 800c82a:	b920      	cbnz	r0, 800c836 <pow+0x1fa>
 800c82c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c830:	4b2e      	ldr	r3, [pc, #184]	; (800c8ec <pow+0x2b0>)
 800c832:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c836:	f996 3000 	ldrsb.w	r3, [r6]
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d142      	bne.n	800c8c4 <pow+0x288>
 800c83e:	f7ff fc03 	bl	800c048 <__errno>
 800c842:	2322      	movs	r3, #34	; 0x22
 800c844:	e797      	b.n	800c776 <pow+0x13a>
 800c846:	2200      	movs	r2, #0
 800c848:	4b29      	ldr	r3, [pc, #164]	; (800c8f0 <pow+0x2b4>)
 800c84a:	4640      	mov	r0, r8
 800c84c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c850:	4649      	mov	r1, r9
 800c852:	4652      	mov	r2, sl
 800c854:	465b      	mov	r3, fp
 800c856:	f7f4 f915 	bl	8000a84 <__aeabi_dcmplt>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d0eb      	beq.n	800c836 <pow+0x1fa>
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f002 f861 	bl	800e928 <rint>
 800c866:	4622      	mov	r2, r4
 800c868:	462b      	mov	r3, r5
 800c86a:	f7f4 f901 	bl	8000a70 <__aeabi_dcmpeq>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d1e1      	bne.n	800c836 <pow+0x1fa>
 800c872:	2200      	movs	r2, #0
 800c874:	4b1a      	ldr	r3, [pc, #104]	; (800c8e0 <pow+0x2a4>)
 800c876:	e7dc      	b.n	800c832 <pow+0x1f6>
 800c878:	2200      	movs	r2, #0
 800c87a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c87e:	2300      	movs	r3, #0
 800c880:	f7f4 f8f6 	bl	8000a70 <__aeabi_dcmpeq>
 800c884:	2800      	cmp	r0, #0
 800c886:	f43f af4b 	beq.w	800c720 <pow+0xe4>
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f001 ffb7 	bl	800e800 <finite>
 800c892:	2800      	cmp	r0, #0
 800c894:	f43f af44 	beq.w	800c720 <pow+0xe4>
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f001 ffb0 	bl	800e800 <finite>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	f43f af3d 	beq.w	800c720 <pow+0xe4>
 800c8a6:	2304      	movs	r3, #4
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	4b0b      	ldr	r3, [pc, #44]	; (800c8d8 <pow+0x29c>)
 800c8ac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c8b0:	9305      	str	r3, [sp, #20]
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2400      	movs	r4, #0
 800c8b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c8be:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800c8c2:	e7b8      	b.n	800c836 <pow+0x1fa>
 800c8c4:	a804      	add	r0, sp, #16
 800c8c6:	f002 f827 	bl	800e918 <matherr>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f47f af1e 	bne.w	800c70c <pow+0xd0>
 800c8d0:	e7b5      	b.n	800c83e <pow+0x202>
 800c8d2:	bf00      	nop
 800c8d4:	20001860 	.word	0x20001860
 800c8d8:	0800ec05 	.word	0x0800ec05
 800c8dc:	3ff00000 	.word	0x3ff00000
 800c8e0:	fff00000 	.word	0xfff00000
 800c8e4:	3fe00000 	.word	0x3fe00000
 800c8e8:	47efffff 	.word	0x47efffff
 800c8ec:	c7efffff 	.word	0xc7efffff
 800c8f0:	7ff00000 	.word	0x7ff00000

0800c8f4 <sqrt>:
 800c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	b08b      	sub	sp, #44	; 0x2c
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	460d      	mov	r5, r1
 800c8fe:	f001 f853 	bl	800d9a8 <__ieee754_sqrt>
 800c902:	4b24      	ldr	r3, [pc, #144]	; (800c994 <sqrt+0xa0>)
 800c904:	4680      	mov	r8, r0
 800c906:	f993 a000 	ldrsb.w	sl, [r3]
 800c90a:	4689      	mov	r9, r1
 800c90c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c910:	d02b      	beq.n	800c96a <sqrt+0x76>
 800c912:	4622      	mov	r2, r4
 800c914:	462b      	mov	r3, r5
 800c916:	4620      	mov	r0, r4
 800c918:	4629      	mov	r1, r5
 800c91a:	f7f4 f8db 	bl	8000ad4 <__aeabi_dcmpun>
 800c91e:	4683      	mov	fp, r0
 800c920:	bb18      	cbnz	r0, 800c96a <sqrt+0x76>
 800c922:	2600      	movs	r6, #0
 800c924:	2700      	movs	r7, #0
 800c926:	4632      	mov	r2, r6
 800c928:	463b      	mov	r3, r7
 800c92a:	4620      	mov	r0, r4
 800c92c:	4629      	mov	r1, r5
 800c92e:	f7f4 f8a9 	bl	8000a84 <__aeabi_dcmplt>
 800c932:	b1d0      	cbz	r0, 800c96a <sqrt+0x76>
 800c934:	2301      	movs	r3, #1
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4b17      	ldr	r3, [pc, #92]	; (800c998 <sqrt+0xa4>)
 800c93a:	f8cd b020 	str.w	fp, [sp, #32]
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c944:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c948:	f1ba 0f00 	cmp.w	sl, #0
 800c94c:	d112      	bne.n	800c974 <sqrt+0x80>
 800c94e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c952:	4668      	mov	r0, sp
 800c954:	f001 ffe0 	bl	800e918 <matherr>
 800c958:	b1b8      	cbz	r0, 800c98a <sqrt+0x96>
 800c95a:	9b08      	ldr	r3, [sp, #32]
 800c95c:	b11b      	cbz	r3, 800c966 <sqrt+0x72>
 800c95e:	f7ff fb73 	bl	800c048 <__errno>
 800c962:	9b08      	ldr	r3, [sp, #32]
 800c964:	6003      	str	r3, [r0, #0]
 800c966:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800c96a:	4640      	mov	r0, r8
 800c96c:	4649      	mov	r1, r9
 800c96e:	b00b      	add	sp, #44	; 0x2c
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	4632      	mov	r2, r6
 800c976:	463b      	mov	r3, r7
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 ff3a 	bl	80007f4 <__aeabi_ddiv>
 800c980:	f1ba 0f02 	cmp.w	sl, #2
 800c984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c988:	d1e3      	bne.n	800c952 <sqrt+0x5e>
 800c98a:	f7ff fb5d 	bl	800c048 <__errno>
 800c98e:	2321      	movs	r3, #33	; 0x21
 800c990:	6003      	str	r3, [r0, #0]
 800c992:	e7e2      	b.n	800c95a <sqrt+0x66>
 800c994:	20001860 	.word	0x20001860
 800c998:	0800ec09 	.word	0x0800ec09

0800c99c <__ieee754_fmod>:
 800c99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	ea54 0002 	orrs.w	r0, r4, r2
 800c9aa:	461e      	mov	r6, r3
 800c9ac:	4694      	mov	ip, r2
 800c9ae:	4696      	mov	lr, r2
 800c9b0:	d00c      	beq.n	800c9cc <__ieee754_fmod+0x30>
 800c9b2:	4d78      	ldr	r5, [pc, #480]	; (800cb94 <__ieee754_fmod+0x1f8>)
 800c9b4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800c9b8:	45a8      	cmp	r8, r5
 800c9ba:	4689      	mov	r9, r1
 800c9bc:	dc06      	bgt.n	800c9cc <__ieee754_fmod+0x30>
 800c9be:	4255      	negs	r5, r2
 800c9c0:	4315      	orrs	r5, r2
 800c9c2:	4f75      	ldr	r7, [pc, #468]	; (800cb98 <__ieee754_fmod+0x1fc>)
 800c9c4:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 800c9c8:	42bd      	cmp	r5, r7
 800c9ca:	d908      	bls.n	800c9de <__ieee754_fmod+0x42>
 800c9cc:	4650      	mov	r0, sl
 800c9ce:	f7f3 fde7 	bl	80005a0 <__aeabi_dmul>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	f7f3 ff0d 	bl	80007f4 <__aeabi_ddiv>
 800c9da:	4682      	mov	sl, r0
 800c9dc:	e00f      	b.n	800c9fe <__ieee754_fmod+0x62>
 800c9de:	45a0      	cmp	r8, r4
 800c9e0:	4652      	mov	r2, sl
 800c9e2:	4657      	mov	r7, sl
 800c9e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c9e8:	dc0c      	bgt.n	800ca04 <__ieee754_fmod+0x68>
 800c9ea:	db08      	blt.n	800c9fe <__ieee754_fmod+0x62>
 800c9ec:	45e2      	cmp	sl, ip
 800c9ee:	d306      	bcc.n	800c9fe <__ieee754_fmod+0x62>
 800c9f0:	d108      	bne.n	800ca04 <__ieee754_fmod+0x68>
 800c9f2:	496a      	ldr	r1, [pc, #424]	; (800cb9c <__ieee754_fmod+0x200>)
 800c9f4:	0fed      	lsrs	r5, r5, #31
 800c9f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c9fa:	e9d5 a100 	ldrd	sl, r1, [r5]
 800c9fe:	4650      	mov	r0, sl
 800ca00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca04:	4b66      	ldr	r3, [pc, #408]	; (800cba0 <__ieee754_fmod+0x204>)
 800ca06:	4598      	cmp	r8, r3
 800ca08:	dc48      	bgt.n	800ca9c <__ieee754_fmod+0x100>
 800ca0a:	f1b8 0f00 	cmp.w	r8, #0
 800ca0e:	d13c      	bne.n	800ca8a <__ieee754_fmod+0xee>
 800ca10:	4611      	mov	r1, r2
 800ca12:	4864      	ldr	r0, [pc, #400]	; (800cba4 <__ieee754_fmod+0x208>)
 800ca14:	2900      	cmp	r1, #0
 800ca16:	dc35      	bgt.n	800ca84 <__ieee754_fmod+0xe8>
 800ca18:	429c      	cmp	r4, r3
 800ca1a:	dc4f      	bgt.n	800cabc <__ieee754_fmod+0x120>
 800ca1c:	2c00      	cmp	r4, #0
 800ca1e:	d145      	bne.n	800caac <__ieee754_fmod+0x110>
 800ca20:	4661      	mov	r1, ip
 800ca22:	4b60      	ldr	r3, [pc, #384]	; (800cba4 <__ieee754_fmod+0x208>)
 800ca24:	2900      	cmp	r1, #0
 800ca26:	dc3e      	bgt.n	800caa6 <__ieee754_fmod+0x10a>
 800ca28:	495f      	ldr	r1, [pc, #380]	; (800cba8 <__ieee754_fmod+0x20c>)
 800ca2a:	4288      	cmp	r0, r1
 800ca2c:	db4a      	blt.n	800cac4 <__ieee754_fmod+0x128>
 800ca2e:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800ca32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca36:	4a5c      	ldr	r2, [pc, #368]	; (800cba8 <__ieee754_fmod+0x20c>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	db57      	blt.n	800caec <__ieee754_fmod+0x150>
 800ca3c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ca40:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800ca44:	1ac0      	subs	r0, r0, r3
 800ca46:	1b8a      	subs	r2, r1, r6
 800ca48:	eba7 040e 	sub.w	r4, r7, lr
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d163      	bne.n	800cb18 <__ieee754_fmod+0x17c>
 800ca50:	4577      	cmp	r7, lr
 800ca52:	bf38      	it	cc
 800ca54:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	bfbc      	itt	lt
 800ca5c:	463c      	movlt	r4, r7
 800ca5e:	460a      	movlt	r2, r1
 800ca60:	ea52 0104 	orrs.w	r1, r2, r4
 800ca64:	d0c5      	beq.n	800c9f2 <__ieee754_fmod+0x56>
 800ca66:	494e      	ldr	r1, [pc, #312]	; (800cba0 <__ieee754_fmod+0x204>)
 800ca68:	428a      	cmp	r2, r1
 800ca6a:	dd6a      	ble.n	800cb42 <__ieee754_fmod+0x1a6>
 800ca6c:	494e      	ldr	r1, [pc, #312]	; (800cba8 <__ieee754_fmod+0x20c>)
 800ca6e:	428b      	cmp	r3, r1
 800ca70:	db6d      	blt.n	800cb4e <__ieee754_fmod+0x1b2>
 800ca72:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 800ca76:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800ca7a:	4315      	orrs	r5, r2
 800ca7c:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 800ca80:	4620      	mov	r0, r4
 800ca82:	e7aa      	b.n	800c9da <__ieee754_fmod+0x3e>
 800ca84:	3801      	subs	r0, #1
 800ca86:	0049      	lsls	r1, r1, #1
 800ca88:	e7c4      	b.n	800ca14 <__ieee754_fmod+0x78>
 800ca8a:	4847      	ldr	r0, [pc, #284]	; (800cba8 <__ieee754_fmod+0x20c>)
 800ca8c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ca90:	0049      	lsls	r1, r1, #1
 800ca92:	2900      	cmp	r1, #0
 800ca94:	f100 30ff 	add.w	r0, r0, #4294967295
 800ca98:	dcfa      	bgt.n	800ca90 <__ieee754_fmod+0xf4>
 800ca9a:	e7bd      	b.n	800ca18 <__ieee754_fmod+0x7c>
 800ca9c:	ea4f 5028 	mov.w	r0, r8, asr #20
 800caa0:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800caa4:	e7b8      	b.n	800ca18 <__ieee754_fmod+0x7c>
 800caa6:	3b01      	subs	r3, #1
 800caa8:	0049      	lsls	r1, r1, #1
 800caaa:	e7bb      	b.n	800ca24 <__ieee754_fmod+0x88>
 800caac:	4b3e      	ldr	r3, [pc, #248]	; (800cba8 <__ieee754_fmod+0x20c>)
 800caae:	02e1      	lsls	r1, r4, #11
 800cab0:	0049      	lsls	r1, r1, #1
 800cab2:	2900      	cmp	r1, #0
 800cab4:	f103 33ff 	add.w	r3, r3, #4294967295
 800cab8:	dcfa      	bgt.n	800cab0 <__ieee754_fmod+0x114>
 800caba:	e7b5      	b.n	800ca28 <__ieee754_fmod+0x8c>
 800cabc:	1523      	asrs	r3, r4, #20
 800cabe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cac2:	e7b1      	b.n	800ca28 <__ieee754_fmod+0x8c>
 800cac4:	1a0f      	subs	r7, r1, r0
 800cac6:	2f1f      	cmp	r7, #31
 800cac8:	dc0a      	bgt.n	800cae0 <__ieee754_fmod+0x144>
 800caca:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 800cace:	fa08 f807 	lsl.w	r8, r8, r7
 800cad2:	fa22 f101 	lsr.w	r1, r2, r1
 800cad6:	ea41 0108 	orr.w	r1, r1, r8
 800cada:	fa02 f707 	lsl.w	r7, r2, r7
 800cade:	e7aa      	b.n	800ca36 <__ieee754_fmod+0x9a>
 800cae0:	4932      	ldr	r1, [pc, #200]	; (800cbac <__ieee754_fmod+0x210>)
 800cae2:	2700      	movs	r7, #0
 800cae4:	1a09      	subs	r1, r1, r0
 800cae6:	fa02 f101 	lsl.w	r1, r2, r1
 800caea:	e7a4      	b.n	800ca36 <__ieee754_fmod+0x9a>
 800caec:	eba2 0e03 	sub.w	lr, r2, r3
 800caf0:	f1be 0f1f 	cmp.w	lr, #31
 800caf4:	dc09      	bgt.n	800cb0a <__ieee754_fmod+0x16e>
 800caf6:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 800cafa:	fa04 f40e 	lsl.w	r4, r4, lr
 800cafe:	fa2c f606 	lsr.w	r6, ip, r6
 800cb02:	4326      	orrs	r6, r4
 800cb04:	fa0c fe0e 	lsl.w	lr, ip, lr
 800cb08:	e79c      	b.n	800ca44 <__ieee754_fmod+0xa8>
 800cb0a:	4e28      	ldr	r6, [pc, #160]	; (800cbac <__ieee754_fmod+0x210>)
 800cb0c:	f04f 0e00 	mov.w	lr, #0
 800cb10:	1af6      	subs	r6, r6, r3
 800cb12:	fa0c f606 	lsl.w	r6, ip, r6
 800cb16:	e795      	b.n	800ca44 <__ieee754_fmod+0xa8>
 800cb18:	4577      	cmp	r7, lr
 800cb1a:	bf38      	it	cc
 800cb1c:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	da05      	bge.n	800cb30 <__ieee754_fmod+0x194>
 800cb24:	0ffa      	lsrs	r2, r7, #31
 800cb26:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cb2a:	007f      	lsls	r7, r7, #1
 800cb2c:	3801      	subs	r0, #1
 800cb2e:	e78a      	b.n	800ca46 <__ieee754_fmod+0xaa>
 800cb30:	ea52 0104 	orrs.w	r1, r2, r4
 800cb34:	f43f af5d 	beq.w	800c9f2 <__ieee754_fmod+0x56>
 800cb38:	0fe1      	lsrs	r1, r4, #31
 800cb3a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cb3e:	0067      	lsls	r7, r4, #1
 800cb40:	e7f4      	b.n	800cb2c <__ieee754_fmod+0x190>
 800cb42:	0fe0      	lsrs	r0, r4, #31
 800cb44:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800cb48:	0064      	lsls	r4, r4, #1
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	e78c      	b.n	800ca68 <__ieee754_fmod+0xcc>
 800cb4e:	1ac9      	subs	r1, r1, r3
 800cb50:	2914      	cmp	r1, #20
 800cb52:	dc0a      	bgt.n	800cb6a <__ieee754_fmod+0x1ce>
 800cb54:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800cb58:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5c:	40cc      	lsrs	r4, r1
 800cb5e:	4323      	orrs	r3, r4
 800cb60:	410a      	asrs	r2, r1
 800cb62:	ea42 0105 	orr.w	r1, r2, r5
 800cb66:	4618      	mov	r0, r3
 800cb68:	e737      	b.n	800c9da <__ieee754_fmod+0x3e>
 800cb6a:	291f      	cmp	r1, #31
 800cb6c:	dc07      	bgt.n	800cb7e <__ieee754_fmod+0x1e2>
 800cb6e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 800cb72:	40cc      	lsrs	r4, r1
 800cb74:	fa02 f303 	lsl.w	r3, r2, r3
 800cb78:	4323      	orrs	r3, r4
 800cb7a:	462a      	mov	r2, r5
 800cb7c:	e7f1      	b.n	800cb62 <__ieee754_fmod+0x1c6>
 800cb7e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cb82:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cb86:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cb8a:	33e2      	adds	r3, #226	; 0xe2
 800cb8c:	fa42 f303 	asr.w	r3, r2, r3
 800cb90:	e7f3      	b.n	800cb7a <__ieee754_fmod+0x1de>
 800cb92:	bf00      	nop
 800cb94:	7fefffff 	.word	0x7fefffff
 800cb98:	7ff00000 	.word	0x7ff00000
 800cb9c:	0800ec10 	.word	0x0800ec10
 800cba0:	000fffff 	.word	0x000fffff
 800cba4:	fffffbed 	.word	0xfffffbed
 800cba8:	fffffc02 	.word	0xfffffc02
 800cbac:	fffffbe2 	.word	0xfffffbe2

0800cbb0 <__ieee754_pow>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	b091      	sub	sp, #68	; 0x44
 800cbb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800cbbe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800cbc2:	ea55 0302 	orrs.w	r3, r5, r2
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	4688      	mov	r8, r1
 800cbca:	f000 84b7 	beq.w	800d53c <__ieee754_pow+0x98c>
 800cbce:	4b80      	ldr	r3, [pc, #512]	; (800cdd0 <__ieee754_pow+0x220>)
 800cbd0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cbd4:	429c      	cmp	r4, r3
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	4682      	mov	sl, r0
 800cbda:	dc09      	bgt.n	800cbf0 <__ieee754_pow+0x40>
 800cbdc:	d103      	bne.n	800cbe6 <__ieee754_pow+0x36>
 800cbde:	b938      	cbnz	r0, 800cbf0 <__ieee754_pow+0x40>
 800cbe0:	42a5      	cmp	r5, r4
 800cbe2:	dc0d      	bgt.n	800cc00 <__ieee754_pow+0x50>
 800cbe4:	e001      	b.n	800cbea <__ieee754_pow+0x3a>
 800cbe6:	429d      	cmp	r5, r3
 800cbe8:	dc02      	bgt.n	800cbf0 <__ieee754_pow+0x40>
 800cbea:	429d      	cmp	r5, r3
 800cbec:	d10e      	bne.n	800cc0c <__ieee754_pow+0x5c>
 800cbee:	b16a      	cbz	r2, 800cc0c <__ieee754_pow+0x5c>
 800cbf0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cbf4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cbf8:	ea54 030a 	orrs.w	r3, r4, sl
 800cbfc:	f000 849e 	beq.w	800d53c <__ieee754_pow+0x98c>
 800cc00:	4874      	ldr	r0, [pc, #464]	; (800cdd4 <__ieee754_pow+0x224>)
 800cc02:	b011      	add	sp, #68	; 0x44
 800cc04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	f001 be88 	b.w	800e91c <nan>
 800cc0c:	f1b9 0f00 	cmp.w	r9, #0
 800cc10:	da53      	bge.n	800ccba <__ieee754_pow+0x10a>
 800cc12:	4b71      	ldr	r3, [pc, #452]	; (800cdd8 <__ieee754_pow+0x228>)
 800cc14:	429d      	cmp	r5, r3
 800cc16:	dc4e      	bgt.n	800ccb6 <__ieee754_pow+0x106>
 800cc18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cc1c:	429d      	cmp	r5, r3
 800cc1e:	dd4c      	ble.n	800ccba <__ieee754_pow+0x10a>
 800cc20:	152b      	asrs	r3, r5, #20
 800cc22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cc26:	2b14      	cmp	r3, #20
 800cc28:	dd28      	ble.n	800cc7c <__ieee754_pow+0xcc>
 800cc2a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cc2e:	fa22 f103 	lsr.w	r1, r2, r3
 800cc32:	fa01 f303 	lsl.w	r3, r1, r3
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d13f      	bne.n	800ccba <__ieee754_pow+0x10a>
 800cc3a:	f001 0101 	and.w	r1, r1, #1
 800cc3e:	f1c1 0302 	rsb	r3, r1, #2
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	2a00      	cmp	r2, #0
 800cc46:	d15c      	bne.n	800cd02 <__ieee754_pow+0x152>
 800cc48:	4b61      	ldr	r3, [pc, #388]	; (800cdd0 <__ieee754_pow+0x220>)
 800cc4a:	429d      	cmp	r5, r3
 800cc4c:	d126      	bne.n	800cc9c <__ieee754_pow+0xec>
 800cc4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cc52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cc56:	ea53 030a 	orrs.w	r3, r3, sl
 800cc5a:	f000 846f 	beq.w	800d53c <__ieee754_pow+0x98c>
 800cc5e:	4b5f      	ldr	r3, [pc, #380]	; (800cddc <__ieee754_pow+0x22c>)
 800cc60:	429c      	cmp	r4, r3
 800cc62:	dd2c      	ble.n	800ccbe <__ieee754_pow+0x10e>
 800cc64:	2e00      	cmp	r6, #0
 800cc66:	f280 846f 	bge.w	800d548 <__ieee754_pow+0x998>
 800cc6a:	f04f 0b00 	mov.w	fp, #0
 800cc6e:	f04f 0c00 	mov.w	ip, #0
 800cc72:	4658      	mov	r0, fp
 800cc74:	4661      	mov	r1, ip
 800cc76:	b011      	add	sp, #68	; 0x44
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	d13e      	bne.n	800ccfe <__ieee754_pow+0x14e>
 800cc80:	f1c3 0314 	rsb	r3, r3, #20
 800cc84:	fa45 f103 	asr.w	r1, r5, r3
 800cc88:	fa01 f303 	lsl.w	r3, r1, r3
 800cc8c:	42ab      	cmp	r3, r5
 800cc8e:	f040 8463 	bne.w	800d558 <__ieee754_pow+0x9a8>
 800cc92:	f001 0101 	and.w	r1, r1, #1
 800cc96:	f1c1 0302 	rsb	r3, r1, #2
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	4b50      	ldr	r3, [pc, #320]	; (800cde0 <__ieee754_pow+0x230>)
 800cc9e:	429d      	cmp	r5, r3
 800cca0:	d114      	bne.n	800cccc <__ieee754_pow+0x11c>
 800cca2:	2e00      	cmp	r6, #0
 800cca4:	f280 8454 	bge.w	800d550 <__ieee754_pow+0x9a0>
 800cca8:	463a      	mov	r2, r7
 800ccaa:	4643      	mov	r3, r8
 800ccac:	2000      	movs	r0, #0
 800ccae:	494c      	ldr	r1, [pc, #304]	; (800cde0 <__ieee754_pow+0x230>)
 800ccb0:	f7f3 fda0 	bl	80007f4 <__aeabi_ddiv>
 800ccb4:	e013      	b.n	800ccde <__ieee754_pow+0x12e>
 800ccb6:	2302      	movs	r3, #2
 800ccb8:	e7c3      	b.n	800cc42 <__ieee754_pow+0x92>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	e7c1      	b.n	800cc42 <__ieee754_pow+0x92>
 800ccbe:	2e00      	cmp	r6, #0
 800ccc0:	dad3      	bge.n	800cc6a <__ieee754_pow+0xba>
 800ccc2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ccc6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ccca:	e7d2      	b.n	800cc72 <__ieee754_pow+0xc2>
 800cccc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800ccd0:	d108      	bne.n	800cce4 <__ieee754_pow+0x134>
 800ccd2:	463a      	mov	r2, r7
 800ccd4:	4643      	mov	r3, r8
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	4641      	mov	r1, r8
 800ccda:	f7f3 fc61 	bl	80005a0 <__aeabi_dmul>
 800ccde:	4683      	mov	fp, r0
 800cce0:	468c      	mov	ip, r1
 800cce2:	e7c6      	b.n	800cc72 <__ieee754_pow+0xc2>
 800cce4:	4b3f      	ldr	r3, [pc, #252]	; (800cde4 <__ieee754_pow+0x234>)
 800cce6:	429e      	cmp	r6, r3
 800cce8:	d10b      	bne.n	800cd02 <__ieee754_pow+0x152>
 800ccea:	f1b9 0f00 	cmp.w	r9, #0
 800ccee:	db08      	blt.n	800cd02 <__ieee754_pow+0x152>
 800ccf0:	4638      	mov	r0, r7
 800ccf2:	4641      	mov	r1, r8
 800ccf4:	b011      	add	sp, #68	; 0x44
 800ccf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfa:	f000 be55 	b.w	800d9a8 <__ieee754_sqrt>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	4638      	mov	r0, r7
 800cd04:	4641      	mov	r1, r8
 800cd06:	f7ff fb93 	bl	800c430 <fabs>
 800cd0a:	4683      	mov	fp, r0
 800cd0c:	468c      	mov	ip, r1
 800cd0e:	f1ba 0f00 	cmp.w	sl, #0
 800cd12:	d12b      	bne.n	800cd6c <__ieee754_pow+0x1bc>
 800cd14:	b124      	cbz	r4, 800cd20 <__ieee754_pow+0x170>
 800cd16:	4b32      	ldr	r3, [pc, #200]	; (800cde0 <__ieee754_pow+0x230>)
 800cd18:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d125      	bne.n	800cd6c <__ieee754_pow+0x1bc>
 800cd20:	2e00      	cmp	r6, #0
 800cd22:	da07      	bge.n	800cd34 <__ieee754_pow+0x184>
 800cd24:	465a      	mov	r2, fp
 800cd26:	4663      	mov	r3, ip
 800cd28:	2000      	movs	r0, #0
 800cd2a:	492d      	ldr	r1, [pc, #180]	; (800cde0 <__ieee754_pow+0x230>)
 800cd2c:	f7f3 fd62 	bl	80007f4 <__aeabi_ddiv>
 800cd30:	4683      	mov	fp, r0
 800cd32:	468c      	mov	ip, r1
 800cd34:	f1b9 0f00 	cmp.w	r9, #0
 800cd38:	da9b      	bge.n	800cc72 <__ieee754_pow+0xc2>
 800cd3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cd3e:	9b00      	ldr	r3, [sp, #0]
 800cd40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cd44:	4323      	orrs	r3, r4
 800cd46:	d108      	bne.n	800cd5a <__ieee754_pow+0x1aa>
 800cd48:	465a      	mov	r2, fp
 800cd4a:	4663      	mov	r3, ip
 800cd4c:	4658      	mov	r0, fp
 800cd4e:	4661      	mov	r1, ip
 800cd50:	f7f3 fa6e 	bl	8000230 <__aeabi_dsub>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	e7aa      	b.n	800ccb0 <__ieee754_pow+0x100>
 800cd5a:	9b00      	ldr	r3, [sp, #0]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d188      	bne.n	800cc72 <__ieee754_pow+0xc2>
 800cd60:	4658      	mov	r0, fp
 800cd62:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cd66:	4683      	mov	fp, r0
 800cd68:	469c      	mov	ip, r3
 800cd6a:	e782      	b.n	800cc72 <__ieee754_pow+0xc2>
 800cd6c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800cd70:	f109 33ff 	add.w	r3, r9, #4294967295
 800cd74:	930d      	str	r3, [sp, #52]	; 0x34
 800cd76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd78:	9b00      	ldr	r3, [sp, #0]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	d104      	bne.n	800cd88 <__ieee754_pow+0x1d8>
 800cd7e:	463a      	mov	r2, r7
 800cd80:	4643      	mov	r3, r8
 800cd82:	4638      	mov	r0, r7
 800cd84:	4641      	mov	r1, r8
 800cd86:	e7e3      	b.n	800cd50 <__ieee754_pow+0x1a0>
 800cd88:	4b17      	ldr	r3, [pc, #92]	; (800cde8 <__ieee754_pow+0x238>)
 800cd8a:	429d      	cmp	r5, r3
 800cd8c:	f340 80fe 	ble.w	800cf8c <__ieee754_pow+0x3dc>
 800cd90:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cd94:	429d      	cmp	r5, r3
 800cd96:	dd0b      	ble.n	800cdb0 <__ieee754_pow+0x200>
 800cd98:	4b10      	ldr	r3, [pc, #64]	; (800cddc <__ieee754_pow+0x22c>)
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	dc0e      	bgt.n	800cdbc <__ieee754_pow+0x20c>
 800cd9e:	2e00      	cmp	r6, #0
 800cda0:	f6bf af63 	bge.w	800cc6a <__ieee754_pow+0xba>
 800cda4:	a308      	add	r3, pc, #32	; (adr r3, 800cdc8 <__ieee754_pow+0x218>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	4610      	mov	r0, r2
 800cdac:	4619      	mov	r1, r3
 800cdae:	e794      	b.n	800ccda <__ieee754_pow+0x12a>
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <__ieee754_pow+0x23c>)
 800cdb2:	429c      	cmp	r4, r3
 800cdb4:	ddf3      	ble.n	800cd9e <__ieee754_pow+0x1ee>
 800cdb6:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <__ieee754_pow+0x230>)
 800cdb8:	429c      	cmp	r4, r3
 800cdba:	dd19      	ble.n	800cdf0 <__ieee754_pow+0x240>
 800cdbc:	2e00      	cmp	r6, #0
 800cdbe:	dcf1      	bgt.n	800cda4 <__ieee754_pow+0x1f4>
 800cdc0:	e753      	b.n	800cc6a <__ieee754_pow+0xba>
 800cdc2:	bf00      	nop
 800cdc4:	f3af 8000 	nop.w
 800cdc8:	8800759c 	.word	0x8800759c
 800cdcc:	7e37e43c 	.word	0x7e37e43c
 800cdd0:	7ff00000 	.word	0x7ff00000
 800cdd4:	0800ec04 	.word	0x0800ec04
 800cdd8:	433fffff 	.word	0x433fffff
 800cddc:	3fefffff 	.word	0x3fefffff
 800cde0:	3ff00000 	.word	0x3ff00000
 800cde4:	3fe00000 	.word	0x3fe00000
 800cde8:	41e00000 	.word	0x41e00000
 800cdec:	3feffffe 	.word	0x3feffffe
 800cdf0:	4661      	mov	r1, ip
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	4b60      	ldr	r3, [pc, #384]	; (800cf78 <__ieee754_pow+0x3c8>)
 800cdf6:	4658      	mov	r0, fp
 800cdf8:	f7f3 fa1a 	bl	8000230 <__aeabi_dsub>
 800cdfc:	a354      	add	r3, pc, #336	; (adr r3, 800cf50 <__ieee754_pow+0x3a0>)
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	4604      	mov	r4, r0
 800ce04:	460d      	mov	r5, r1
 800ce06:	f7f3 fbcb 	bl	80005a0 <__aeabi_dmul>
 800ce0a:	a353      	add	r3, pc, #332	; (adr r3, 800cf58 <__ieee754_pow+0x3a8>)
 800ce0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce10:	4606      	mov	r6, r0
 800ce12:	460f      	mov	r7, r1
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 fbc2 	bl	80005a0 <__aeabi_dmul>
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4682      	mov	sl, r0
 800ce20:	468b      	mov	fp, r1
 800ce22:	4b56      	ldr	r3, [pc, #344]	; (800cf7c <__ieee754_pow+0x3cc>)
 800ce24:	4620      	mov	r0, r4
 800ce26:	4629      	mov	r1, r5
 800ce28:	f7f3 fbba 	bl	80005a0 <__aeabi_dmul>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	460b      	mov	r3, r1
 800ce30:	a14b      	add	r1, pc, #300	; (adr r1, 800cf60 <__ieee754_pow+0x3b0>)
 800ce32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce36:	f7f3 f9fb 	bl	8000230 <__aeabi_dsub>
 800ce3a:	4622      	mov	r2, r4
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	f7f3 fbaf 	bl	80005a0 <__aeabi_dmul>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	2000      	movs	r0, #0
 800ce48:	494d      	ldr	r1, [pc, #308]	; (800cf80 <__ieee754_pow+0x3d0>)
 800ce4a:	f7f3 f9f1 	bl	8000230 <__aeabi_dsub>
 800ce4e:	4622      	mov	r2, r4
 800ce50:	462b      	mov	r3, r5
 800ce52:	4680      	mov	r8, r0
 800ce54:	4689      	mov	r9, r1
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	f7f3 fba1 	bl	80005a0 <__aeabi_dmul>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	f7f3 fb9b 	bl	80005a0 <__aeabi_dmul>
 800ce6a:	a33f      	add	r3, pc, #252	; (adr r3, 800cf68 <__ieee754_pow+0x3b8>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 fb96 	bl	80005a0 <__aeabi_dmul>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	4650      	mov	r0, sl
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f7f3 f9d8 	bl	8000230 <__aeabi_dsub>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4604      	mov	r4, r0
 800ce86:	460d      	mov	r5, r1
 800ce88:	4630      	mov	r0, r6
 800ce8a:	4639      	mov	r1, r7
 800ce8c:	f7f3 f9d2 	bl	8000234 <__adddf3>
 800ce90:	2000      	movs	r0, #0
 800ce92:	468b      	mov	fp, r1
 800ce94:	4682      	mov	sl, r0
 800ce96:	4632      	mov	r2, r6
 800ce98:	463b      	mov	r3, r7
 800ce9a:	f7f3 f9c9 	bl	8000230 <__aeabi_dsub>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4620      	mov	r0, r4
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 f9c3 	bl	8000230 <__aeabi_dsub>
 800ceaa:	9b00      	ldr	r3, [sp, #0]
 800ceac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	bf0c      	ite	eq
 800ceb8:	4c32      	ldreq	r4, [pc, #200]	; (800cf84 <__ieee754_pow+0x3d4>)
 800ceba:	4c2f      	ldrne	r4, [pc, #188]	; (800cf78 <__ieee754_pow+0x3c8>)
 800cebc:	4606      	mov	r6, r0
 800cebe:	e9cd 3400 	strd	r3, r4, [sp]
 800cec2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cec6:	2400      	movs	r4, #0
 800cec8:	460f      	mov	r7, r1
 800ceca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cece:	4622      	mov	r2, r4
 800ced0:	462b      	mov	r3, r5
 800ced2:	f7f3 f9ad 	bl	8000230 <__aeabi_dsub>
 800ced6:	4652      	mov	r2, sl
 800ced8:	465b      	mov	r3, fp
 800ceda:	f7f3 fb61 	bl	80005a0 <__aeabi_dmul>
 800cede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee2:	4680      	mov	r8, r0
 800cee4:	4689      	mov	r9, r1
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	f7f3 fb59 	bl	80005a0 <__aeabi_dmul>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4640      	mov	r0, r8
 800cef4:	4649      	mov	r1, r9
 800cef6:	f7f3 f99d 	bl	8000234 <__adddf3>
 800cefa:	4622      	mov	r2, r4
 800cefc:	462b      	mov	r3, r5
 800cefe:	4680      	mov	r8, r0
 800cf00:	4689      	mov	r9, r1
 800cf02:	4650      	mov	r0, sl
 800cf04:	4659      	mov	r1, fp
 800cf06:	f7f3 fb4b 	bl	80005a0 <__aeabi_dmul>
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	460b      	mov	r3, r1
 800cf10:	4602      	mov	r2, r0
 800cf12:	4649      	mov	r1, r9
 800cf14:	4640      	mov	r0, r8
 800cf16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cf1a:	f7f3 f98b 	bl	8000234 <__adddf3>
 800cf1e:	4b1a      	ldr	r3, [pc, #104]	; (800cf88 <__ieee754_pow+0x3d8>)
 800cf20:	4682      	mov	sl, r0
 800cf22:	4299      	cmp	r1, r3
 800cf24:	460f      	mov	r7, r1
 800cf26:	460e      	mov	r6, r1
 800cf28:	f340 82e1 	ble.w	800d4ee <__ieee754_pow+0x93e>
 800cf2c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cf30:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cf34:	4303      	orrs	r3, r0
 800cf36:	f000 81db 	beq.w	800d2f0 <__ieee754_pow+0x740>
 800cf3a:	a30d      	add	r3, pc, #52	; (adr r3, 800cf70 <__ieee754_pow+0x3c0>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf44:	f7f3 fb2c 	bl	80005a0 <__aeabi_dmul>
 800cf48:	a309      	add	r3, pc, #36	; (adr r3, 800cf70 <__ieee754_pow+0x3c0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	e6c4      	b.n	800ccda <__ieee754_pow+0x12a>
 800cf50:	60000000 	.word	0x60000000
 800cf54:	3ff71547 	.word	0x3ff71547
 800cf58:	f85ddf44 	.word	0xf85ddf44
 800cf5c:	3e54ae0b 	.word	0x3e54ae0b
 800cf60:	55555555 	.word	0x55555555
 800cf64:	3fd55555 	.word	0x3fd55555
 800cf68:	652b82fe 	.word	0x652b82fe
 800cf6c:	3ff71547 	.word	0x3ff71547
 800cf70:	8800759c 	.word	0x8800759c
 800cf74:	7e37e43c 	.word	0x7e37e43c
 800cf78:	3ff00000 	.word	0x3ff00000
 800cf7c:	3fd00000 	.word	0x3fd00000
 800cf80:	3fe00000 	.word	0x3fe00000
 800cf84:	bff00000 	.word	0xbff00000
 800cf88:	408fffff 	.word	0x408fffff
 800cf8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cf90:	f04f 0200 	mov.w	r2, #0
 800cf94:	da08      	bge.n	800cfa8 <__ieee754_pow+0x3f8>
 800cf96:	4658      	mov	r0, fp
 800cf98:	4bcd      	ldr	r3, [pc, #820]	; (800d2d0 <__ieee754_pow+0x720>)
 800cf9a:	4661      	mov	r1, ip
 800cf9c:	f7f3 fb00 	bl	80005a0 <__aeabi_dmul>
 800cfa0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cfa4:	4683      	mov	fp, r0
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	1523      	asrs	r3, r4, #20
 800cfaa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cfae:	4413      	add	r3, r2
 800cfb0:	930c      	str	r3, [sp, #48]	; 0x30
 800cfb2:	4bc8      	ldr	r3, [pc, #800]	; (800d2d4 <__ieee754_pow+0x724>)
 800cfb4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cfb8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cfbc:	429c      	cmp	r4, r3
 800cfbe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cfc2:	dd08      	ble.n	800cfd6 <__ieee754_pow+0x426>
 800cfc4:	4bc4      	ldr	r3, [pc, #784]	; (800d2d8 <__ieee754_pow+0x728>)
 800cfc6:	429c      	cmp	r4, r3
 800cfc8:	f340 815b 	ble.w	800d282 <__ieee754_pow+0x6d2>
 800cfcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	4658      	mov	r0, fp
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4bbf      	ldr	r3, [pc, #764]	; (800d2dc <__ieee754_pow+0x72c>)
 800cfe0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800cfe4:	444b      	add	r3, r9
 800cfe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cfea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800cfee:	461a      	mov	r2, r3
 800cff0:	4623      	mov	r3, r4
 800cff2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cff6:	f7f3 f91b 	bl	8000230 <__aeabi_dsub>
 800cffa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cffe:	4606      	mov	r6, r0
 800d000:	460f      	mov	r7, r1
 800d002:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d006:	f7f3 f915 	bl	8000234 <__adddf3>
 800d00a:	4602      	mov	r2, r0
 800d00c:	460b      	mov	r3, r1
 800d00e:	2000      	movs	r0, #0
 800d010:	49b3      	ldr	r1, [pc, #716]	; (800d2e0 <__ieee754_pow+0x730>)
 800d012:	f7f3 fbef 	bl	80007f4 <__aeabi_ddiv>
 800d016:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4630      	mov	r0, r6
 800d020:	4639      	mov	r1, r7
 800d022:	f7f3 fabd 	bl	80005a0 <__aeabi_dmul>
 800d026:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d02a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d02e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d032:	2300      	movs	r3, #0
 800d034:	2200      	movs	r2, #0
 800d036:	106d      	asrs	r5, r5, #1
 800d038:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d03c:	9304      	str	r3, [sp, #16]
 800d03e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d042:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d046:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800d04a:	4650      	mov	r0, sl
 800d04c:	4659      	mov	r1, fp
 800d04e:	4614      	mov	r4, r2
 800d050:	461d      	mov	r5, r3
 800d052:	f7f3 faa5 	bl	80005a0 <__aeabi_dmul>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4630      	mov	r0, r6
 800d05c:	4639      	mov	r1, r7
 800d05e:	f7f3 f8e7 	bl	8000230 <__aeabi_dsub>
 800d062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d066:	4606      	mov	r6, r0
 800d068:	460f      	mov	r7, r1
 800d06a:	4620      	mov	r0, r4
 800d06c:	4629      	mov	r1, r5
 800d06e:	f7f3 f8df 	bl	8000230 <__aeabi_dsub>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d07a:	f7f3 f8d9 	bl	8000230 <__aeabi_dsub>
 800d07e:	4652      	mov	r2, sl
 800d080:	465b      	mov	r3, fp
 800d082:	f7f3 fa8d 	bl	80005a0 <__aeabi_dmul>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4630      	mov	r0, r6
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 f8cf 	bl	8000230 <__aeabi_dsub>
 800d092:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d096:	f7f3 fa83 	bl	80005a0 <__aeabi_dmul>
 800d09a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d09e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f7f3 fa7b 	bl	80005a0 <__aeabi_dmul>
 800d0aa:	a377      	add	r3, pc, #476	; (adr r3, 800d288 <__ieee754_pow+0x6d8>)
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	460d      	mov	r5, r1
 800d0b4:	f7f3 fa74 	bl	80005a0 <__aeabi_dmul>
 800d0b8:	a375      	add	r3, pc, #468	; (adr r3, 800d290 <__ieee754_pow+0x6e0>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 f8b9 	bl	8000234 <__adddf3>
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	f7f3 fa6b 	bl	80005a0 <__aeabi_dmul>
 800d0ca:	a373      	add	r3, pc, #460	; (adr r3, 800d298 <__ieee754_pow+0x6e8>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	f7f3 f8b0 	bl	8000234 <__adddf3>
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	462b      	mov	r3, r5
 800d0d8:	f7f3 fa62 	bl	80005a0 <__aeabi_dmul>
 800d0dc:	a370      	add	r3, pc, #448	; (adr r3, 800d2a0 <__ieee754_pow+0x6f0>)
 800d0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e2:	f7f3 f8a7 	bl	8000234 <__adddf3>
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	462b      	mov	r3, r5
 800d0ea:	f7f3 fa59 	bl	80005a0 <__aeabi_dmul>
 800d0ee:	a36e      	add	r3, pc, #440	; (adr r3, 800d2a8 <__ieee754_pow+0x6f8>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	f7f3 f89e 	bl	8000234 <__adddf3>
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	462b      	mov	r3, r5
 800d0fc:	f7f3 fa50 	bl	80005a0 <__aeabi_dmul>
 800d100:	a36b      	add	r3, pc, #428	; (adr r3, 800d2b0 <__ieee754_pow+0x700>)
 800d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d106:	f7f3 f895 	bl	8000234 <__adddf3>
 800d10a:	4622      	mov	r2, r4
 800d10c:	4606      	mov	r6, r0
 800d10e:	460f      	mov	r7, r1
 800d110:	462b      	mov	r3, r5
 800d112:	4620      	mov	r0, r4
 800d114:	4629      	mov	r1, r5
 800d116:	f7f3 fa43 	bl	80005a0 <__aeabi_dmul>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4630      	mov	r0, r6
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 fa3d 	bl	80005a0 <__aeabi_dmul>
 800d126:	4604      	mov	r4, r0
 800d128:	460d      	mov	r5, r1
 800d12a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d12e:	4652      	mov	r2, sl
 800d130:	465b      	mov	r3, fp
 800d132:	f7f3 f87f 	bl	8000234 <__adddf3>
 800d136:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d13a:	f7f3 fa31 	bl	80005a0 <__aeabi_dmul>
 800d13e:	4622      	mov	r2, r4
 800d140:	462b      	mov	r3, r5
 800d142:	f7f3 f877 	bl	8000234 <__adddf3>
 800d146:	4652      	mov	r2, sl
 800d148:	4606      	mov	r6, r0
 800d14a:	460f      	mov	r7, r1
 800d14c:	465b      	mov	r3, fp
 800d14e:	4650      	mov	r0, sl
 800d150:	4659      	mov	r1, fp
 800d152:	f7f3 fa25 	bl	80005a0 <__aeabi_dmul>
 800d156:	2200      	movs	r2, #0
 800d158:	4b62      	ldr	r3, [pc, #392]	; (800d2e4 <__ieee754_pow+0x734>)
 800d15a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d15e:	f7f3 f869 	bl	8000234 <__adddf3>
 800d162:	4632      	mov	r2, r6
 800d164:	463b      	mov	r3, r7
 800d166:	f7f3 f865 	bl	8000234 <__adddf3>
 800d16a:	9804      	ldr	r0, [sp, #16]
 800d16c:	460d      	mov	r5, r1
 800d16e:	4604      	mov	r4, r0
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 fa12 	bl	80005a0 <__aeabi_dmul>
 800d17c:	2200      	movs	r2, #0
 800d17e:	4682      	mov	sl, r0
 800d180:	468b      	mov	fp, r1
 800d182:	4b58      	ldr	r3, [pc, #352]	; (800d2e4 <__ieee754_pow+0x734>)
 800d184:	4620      	mov	r0, r4
 800d186:	4629      	mov	r1, r5
 800d188:	f7f3 f852 	bl	8000230 <__aeabi_dsub>
 800d18c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d190:	f7f3 f84e 	bl	8000230 <__aeabi_dsub>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 f848 	bl	8000230 <__aeabi_dsub>
 800d1a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1a4:	f7f3 f9fc 	bl	80005a0 <__aeabi_dmul>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460f      	mov	r7, r1
 800d1ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	f7f3 f9f4 	bl	80005a0 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f7f3 f838 	bl	8000234 <__adddf3>
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	460f      	mov	r7, r1
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	4650      	mov	r0, sl
 800d1ce:	4659      	mov	r1, fp
 800d1d0:	f7f3 f830 	bl	8000234 <__adddf3>
 800d1d4:	a338      	add	r3, pc, #224	; (adr r3, 800d2b8 <__ieee754_pow+0x708>)
 800d1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1da:	9804      	ldr	r0, [sp, #16]
 800d1dc:	460d      	mov	r5, r1
 800d1de:	4604      	mov	r4, r0
 800d1e0:	f7f3 f9de 	bl	80005a0 <__aeabi_dmul>
 800d1e4:	4652      	mov	r2, sl
 800d1e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d1ea:	465b      	mov	r3, fp
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	f7f3 f81e 	bl	8000230 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	f7f3 f818 	bl	8000230 <__aeabi_dsub>
 800d200:	a32f      	add	r3, pc, #188	; (adr r3, 800d2c0 <__ieee754_pow+0x710>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f7f3 f9cb 	bl	80005a0 <__aeabi_dmul>
 800d20a:	a32f      	add	r3, pc, #188	; (adr r3, 800d2c8 <__ieee754_pow+0x718>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	4606      	mov	r6, r0
 800d212:	460f      	mov	r7, r1
 800d214:	4620      	mov	r0, r4
 800d216:	4629      	mov	r1, r5
 800d218:	f7f3 f9c2 	bl	80005a0 <__aeabi_dmul>
 800d21c:	4602      	mov	r2, r0
 800d21e:	460b      	mov	r3, r1
 800d220:	4630      	mov	r0, r6
 800d222:	4639      	mov	r1, r7
 800d224:	f7f3 f806 	bl	8000234 <__adddf3>
 800d228:	4b2f      	ldr	r3, [pc, #188]	; (800d2e8 <__ieee754_pow+0x738>)
 800d22a:	444b      	add	r3, r9
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f3 f800 	bl	8000234 <__adddf3>
 800d234:	4604      	mov	r4, r0
 800d236:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d238:	460d      	mov	r5, r1
 800d23a:	f7f3 f947 	bl	80004cc <__aeabi_i2d>
 800d23e:	4606      	mov	r6, r0
 800d240:	460f      	mov	r7, r1
 800d242:	4b2a      	ldr	r3, [pc, #168]	; (800d2ec <__ieee754_pow+0x73c>)
 800d244:	4622      	mov	r2, r4
 800d246:	444b      	add	r3, r9
 800d248:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d24c:	462b      	mov	r3, r5
 800d24e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d252:	f7f2 ffef 	bl	8000234 <__adddf3>
 800d256:	4642      	mov	r2, r8
 800d258:	464b      	mov	r3, r9
 800d25a:	f7f2 ffeb 	bl	8000234 <__adddf3>
 800d25e:	4632      	mov	r2, r6
 800d260:	463b      	mov	r3, r7
 800d262:	f7f2 ffe7 	bl	8000234 <__adddf3>
 800d266:	9804      	ldr	r0, [sp, #16]
 800d268:	4632      	mov	r2, r6
 800d26a:	463b      	mov	r3, r7
 800d26c:	4682      	mov	sl, r0
 800d26e:	468b      	mov	fp, r1
 800d270:	f7f2 ffde 	bl	8000230 <__aeabi_dsub>
 800d274:	4642      	mov	r2, r8
 800d276:	464b      	mov	r3, r9
 800d278:	f7f2 ffda 	bl	8000230 <__aeabi_dsub>
 800d27c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d280:	e60b      	b.n	800ce9a <__ieee754_pow+0x2ea>
 800d282:	f04f 0801 	mov.w	r8, #1
 800d286:	e6a8      	b.n	800cfda <__ieee754_pow+0x42a>
 800d288:	4a454eef 	.word	0x4a454eef
 800d28c:	3fca7e28 	.word	0x3fca7e28
 800d290:	93c9db65 	.word	0x93c9db65
 800d294:	3fcd864a 	.word	0x3fcd864a
 800d298:	a91d4101 	.word	0xa91d4101
 800d29c:	3fd17460 	.word	0x3fd17460
 800d2a0:	518f264d 	.word	0x518f264d
 800d2a4:	3fd55555 	.word	0x3fd55555
 800d2a8:	db6fabff 	.word	0xdb6fabff
 800d2ac:	3fdb6db6 	.word	0x3fdb6db6
 800d2b0:	33333303 	.word	0x33333303
 800d2b4:	3fe33333 	.word	0x3fe33333
 800d2b8:	e0000000 	.word	0xe0000000
 800d2bc:	3feec709 	.word	0x3feec709
 800d2c0:	dc3a03fd 	.word	0xdc3a03fd
 800d2c4:	3feec709 	.word	0x3feec709
 800d2c8:	145b01f5 	.word	0x145b01f5
 800d2cc:	be3e2fe0 	.word	0xbe3e2fe0
 800d2d0:	43400000 	.word	0x43400000
 800d2d4:	0003988e 	.word	0x0003988e
 800d2d8:	000bb679 	.word	0x000bb679
 800d2dc:	0800ec20 	.word	0x0800ec20
 800d2e0:	3ff00000 	.word	0x3ff00000
 800d2e4:	40080000 	.word	0x40080000
 800d2e8:	0800ec40 	.word	0x0800ec40
 800d2ec:	0800ec30 	.word	0x0800ec30
 800d2f0:	a39b      	add	r3, pc, #620	; (adr r3, 800d560 <__ieee754_pow+0x9b0>)
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f2 ff9b 	bl	8000234 <__adddf3>
 800d2fe:	4622      	mov	r2, r4
 800d300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d304:	462b      	mov	r3, r5
 800d306:	4650      	mov	r0, sl
 800d308:	4639      	mov	r1, r7
 800d30a:	f7f2 ff91 	bl	8000230 <__aeabi_dsub>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d316:	f7f3 fbd3 	bl	8000ac0 <__aeabi_dcmpgt>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f47f ae0d 	bne.w	800cf3a <__ieee754_pow+0x38a>
 800d320:	4aa3      	ldr	r2, [pc, #652]	; (800d5b0 <__ieee754_pow+0xa00>)
 800d322:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d326:	4293      	cmp	r3, r2
 800d328:	f340 8103 	ble.w	800d532 <__ieee754_pow+0x982>
 800d32c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d330:	2000      	movs	r0, #0
 800d332:	151b      	asrs	r3, r3, #20
 800d334:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d338:	fa4a f303 	asr.w	r3, sl, r3
 800d33c:	4433      	add	r3, r6
 800d33e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d342:	4f9c      	ldr	r7, [pc, #624]	; (800d5b4 <__ieee754_pow+0xa04>)
 800d344:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d348:	4117      	asrs	r7, r2
 800d34a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d34e:	ea23 0107 	bic.w	r1, r3, r7
 800d352:	f1c2 0214 	rsb	r2, r2, #20
 800d356:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d35a:	fa4a fa02 	asr.w	sl, sl, r2
 800d35e:	2e00      	cmp	r6, #0
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4620      	mov	r0, r4
 800d366:	4629      	mov	r1, r5
 800d368:	bfb8      	it	lt
 800d36a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d36e:	f7f2 ff5f 	bl	8000230 <__aeabi_dsub>
 800d372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d37a:	4642      	mov	r2, r8
 800d37c:	464b      	mov	r3, r9
 800d37e:	f7f2 ff59 	bl	8000234 <__adddf3>
 800d382:	a379      	add	r3, pc, #484	; (adr r3, 800d568 <__ieee754_pow+0x9b8>)
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	2000      	movs	r0, #0
 800d38a:	460d      	mov	r5, r1
 800d38c:	4604      	mov	r4, r0
 800d38e:	f7f3 f907 	bl	80005a0 <__aeabi_dmul>
 800d392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d396:	4606      	mov	r6, r0
 800d398:	460f      	mov	r7, r1
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f2 ff47 	bl	8000230 <__aeabi_dsub>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4640      	mov	r0, r8
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	f7f2 ff41 	bl	8000230 <__aeabi_dsub>
 800d3ae:	a370      	add	r3, pc, #448	; (adr r3, 800d570 <__ieee754_pow+0x9c0>)
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	f7f3 f8f4 	bl	80005a0 <__aeabi_dmul>
 800d3b8:	a36f      	add	r3, pc, #444	; (adr r3, 800d578 <__ieee754_pow+0x9c8>)
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	4680      	mov	r8, r0
 800d3c0:	4689      	mov	r9, r1
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	f7f3 f8eb 	bl	80005a0 <__aeabi_dmul>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	f7f2 ff2f 	bl	8000234 <__adddf3>
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	460d      	mov	r5, r1
 800d3da:	4602      	mov	r2, r0
 800d3dc:	460b      	mov	r3, r1
 800d3de:	4630      	mov	r0, r6
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	f7f2 ff27 	bl	8000234 <__adddf3>
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	463b      	mov	r3, r7
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	f7f2 ff1f 	bl	8000230 <__aeabi_dsub>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	f7f2 ff19 	bl	8000230 <__aeabi_dsub>
 800d3fe:	4642      	mov	r2, r8
 800d400:	4606      	mov	r6, r0
 800d402:	460f      	mov	r7, r1
 800d404:	464b      	mov	r3, r9
 800d406:	4640      	mov	r0, r8
 800d408:	4649      	mov	r1, r9
 800d40a:	f7f3 f8c9 	bl	80005a0 <__aeabi_dmul>
 800d40e:	a35c      	add	r3, pc, #368	; (adr r3, 800d580 <__ieee754_pow+0x9d0>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	4604      	mov	r4, r0
 800d416:	460d      	mov	r5, r1
 800d418:	f7f3 f8c2 	bl	80005a0 <__aeabi_dmul>
 800d41c:	a35a      	add	r3, pc, #360	; (adr r3, 800d588 <__ieee754_pow+0x9d8>)
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	f7f2 ff05 	bl	8000230 <__aeabi_dsub>
 800d426:	4622      	mov	r2, r4
 800d428:	462b      	mov	r3, r5
 800d42a:	f7f3 f8b9 	bl	80005a0 <__aeabi_dmul>
 800d42e:	a358      	add	r3, pc, #352	; (adr r3, 800d590 <__ieee754_pow+0x9e0>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	f7f2 fefe 	bl	8000234 <__adddf3>
 800d438:	4622      	mov	r2, r4
 800d43a:	462b      	mov	r3, r5
 800d43c:	f7f3 f8b0 	bl	80005a0 <__aeabi_dmul>
 800d440:	a355      	add	r3, pc, #340	; (adr r3, 800d598 <__ieee754_pow+0x9e8>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 fef3 	bl	8000230 <__aeabi_dsub>
 800d44a:	4622      	mov	r2, r4
 800d44c:	462b      	mov	r3, r5
 800d44e:	f7f3 f8a7 	bl	80005a0 <__aeabi_dmul>
 800d452:	a353      	add	r3, pc, #332	; (adr r3, 800d5a0 <__ieee754_pow+0x9f0>)
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	f7f2 feec 	bl	8000234 <__adddf3>
 800d45c:	4622      	mov	r2, r4
 800d45e:	462b      	mov	r3, r5
 800d460:	f7f3 f89e 	bl	80005a0 <__aeabi_dmul>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4640      	mov	r0, r8
 800d46a:	4649      	mov	r1, r9
 800d46c:	f7f2 fee0 	bl	8000230 <__aeabi_dsub>
 800d470:	4604      	mov	r4, r0
 800d472:	460d      	mov	r5, r1
 800d474:	4602      	mov	r2, r0
 800d476:	460b      	mov	r3, r1
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f3 f890 	bl	80005a0 <__aeabi_dmul>
 800d480:	2200      	movs	r2, #0
 800d482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d48a:	4620      	mov	r0, r4
 800d48c:	4629      	mov	r1, r5
 800d48e:	f7f2 fecf 	bl	8000230 <__aeabi_dsub>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d49a:	f7f3 f9ab 	bl	80007f4 <__aeabi_ddiv>
 800d49e:	4632      	mov	r2, r6
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	460d      	mov	r5, r1
 800d4a4:	463b      	mov	r3, r7
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	f7f3 f879 	bl	80005a0 <__aeabi_dmul>
 800d4ae:	4632      	mov	r2, r6
 800d4b0:	463b      	mov	r3, r7
 800d4b2:	f7f2 febf 	bl	8000234 <__adddf3>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	4620      	mov	r0, r4
 800d4bc:	4629      	mov	r1, r5
 800d4be:	f7f2 feb7 	bl	8000230 <__aeabi_dsub>
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	464b      	mov	r3, r9
 800d4c6:	f7f2 feb3 	bl	8000230 <__aeabi_dsub>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	4939      	ldr	r1, [pc, #228]	; (800d5b8 <__ieee754_pow+0xa08>)
 800d4d2:	f7f2 fead 	bl	8000230 <__aeabi_dsub>
 800d4d6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d4da:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d4de:	da2b      	bge.n	800d538 <__ieee754_pow+0x988>
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	f001 faad 	bl	800ea40 <scalbn>
 800d4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4ea:	f7ff bbf6 	b.w	800ccda <__ieee754_pow+0x12a>
 800d4ee:	4b33      	ldr	r3, [pc, #204]	; (800d5bc <__ieee754_pow+0xa0c>)
 800d4f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d4f4:	429f      	cmp	r7, r3
 800d4f6:	f77f af13 	ble.w	800d320 <__ieee754_pow+0x770>
 800d4fa:	4b31      	ldr	r3, [pc, #196]	; (800d5c0 <__ieee754_pow+0xa10>)
 800d4fc:	440b      	add	r3, r1
 800d4fe:	4303      	orrs	r3, r0
 800d500:	d00b      	beq.n	800d51a <__ieee754_pow+0x96a>
 800d502:	a329      	add	r3, pc, #164	; (adr r3, 800d5a8 <__ieee754_pow+0x9f8>)
 800d504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d50c:	f7f3 f848 	bl	80005a0 <__aeabi_dmul>
 800d510:	a325      	add	r3, pc, #148	; (adr r3, 800d5a8 <__ieee754_pow+0x9f8>)
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f7ff bbe0 	b.w	800ccda <__ieee754_pow+0x12a>
 800d51a:	4622      	mov	r2, r4
 800d51c:	462b      	mov	r3, r5
 800d51e:	f7f2 fe87 	bl	8000230 <__aeabi_dsub>
 800d522:	4642      	mov	r2, r8
 800d524:	464b      	mov	r3, r9
 800d526:	f7f3 fac1 	bl	8000aac <__aeabi_dcmpge>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	f43f aef8 	beq.w	800d320 <__ieee754_pow+0x770>
 800d530:	e7e7      	b.n	800d502 <__ieee754_pow+0x952>
 800d532:	f04f 0a00 	mov.w	sl, #0
 800d536:	e71e      	b.n	800d376 <__ieee754_pow+0x7c6>
 800d538:	4621      	mov	r1, r4
 800d53a:	e7d4      	b.n	800d4e6 <__ieee754_pow+0x936>
 800d53c:	f04f 0b00 	mov.w	fp, #0
 800d540:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d5b8 <__ieee754_pow+0xa08>
 800d544:	f7ff bb95 	b.w	800cc72 <__ieee754_pow+0xc2>
 800d548:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800d54c:	f7ff bb91 	b.w	800cc72 <__ieee754_pow+0xc2>
 800d550:	4638      	mov	r0, r7
 800d552:	4641      	mov	r1, r8
 800d554:	f7ff bbc3 	b.w	800ccde <__ieee754_pow+0x12e>
 800d558:	9200      	str	r2, [sp, #0]
 800d55a:	f7ff bb9f 	b.w	800cc9c <__ieee754_pow+0xec>
 800d55e:	bf00      	nop
 800d560:	652b82fe 	.word	0x652b82fe
 800d564:	3c971547 	.word	0x3c971547
 800d568:	00000000 	.word	0x00000000
 800d56c:	3fe62e43 	.word	0x3fe62e43
 800d570:	fefa39ef 	.word	0xfefa39ef
 800d574:	3fe62e42 	.word	0x3fe62e42
 800d578:	0ca86c39 	.word	0x0ca86c39
 800d57c:	be205c61 	.word	0xbe205c61
 800d580:	72bea4d0 	.word	0x72bea4d0
 800d584:	3e663769 	.word	0x3e663769
 800d588:	c5d26bf1 	.word	0xc5d26bf1
 800d58c:	3ebbbd41 	.word	0x3ebbbd41
 800d590:	af25de2c 	.word	0xaf25de2c
 800d594:	3f11566a 	.word	0x3f11566a
 800d598:	16bebd93 	.word	0x16bebd93
 800d59c:	3f66c16c 	.word	0x3f66c16c
 800d5a0:	5555553e 	.word	0x5555553e
 800d5a4:	3fc55555 	.word	0x3fc55555
 800d5a8:	c2f8f359 	.word	0xc2f8f359
 800d5ac:	01a56e1f 	.word	0x01a56e1f
 800d5b0:	3fe00000 	.word	0x3fe00000
 800d5b4:	000fffff 	.word	0x000fffff
 800d5b8:	3ff00000 	.word	0x3ff00000
 800d5bc:	4090cbff 	.word	0x4090cbff
 800d5c0:	3f6f3400 	.word	0x3f6f3400
 800d5c4:	00000000 	.word	0x00000000

0800d5c8 <__ieee754_rem_pio2>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	4614      	mov	r4, r2
 800d5ce:	4ac2      	ldr	r2, [pc, #776]	; (800d8d8 <__ieee754_rem_pio2+0x310>)
 800d5d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800d5d4:	4592      	cmp	sl, r2
 800d5d6:	b08d      	sub	sp, #52	; 0x34
 800d5d8:	468b      	mov	fp, r1
 800d5da:	dc07      	bgt.n	800d5ec <__ieee754_rem_pio2+0x24>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e9c4 0100 	strd	r0, r1, [r4]
 800d5e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	e023      	b.n	800d634 <__ieee754_rem_pio2+0x6c>
 800d5ec:	4abb      	ldr	r2, [pc, #748]	; (800d8dc <__ieee754_rem_pio2+0x314>)
 800d5ee:	4592      	cmp	sl, r2
 800d5f0:	dc71      	bgt.n	800d6d6 <__ieee754_rem_pio2+0x10e>
 800d5f2:	a3ab      	add	r3, pc, #684	; (adr r3, 800d8a0 <__ieee754_rem_pio2+0x2d8>)
 800d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f8:	2900      	cmp	r1, #0
 800d5fa:	4db9      	ldr	r5, [pc, #740]	; (800d8e0 <__ieee754_rem_pio2+0x318>)
 800d5fc:	dd36      	ble.n	800d66c <__ieee754_rem_pio2+0xa4>
 800d5fe:	f7f2 fe17 	bl	8000230 <__aeabi_dsub>
 800d602:	45aa      	cmp	sl, r5
 800d604:	4606      	mov	r6, r0
 800d606:	460f      	mov	r7, r1
 800d608:	d018      	beq.n	800d63c <__ieee754_rem_pio2+0x74>
 800d60a:	a3a7      	add	r3, pc, #668	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x2e0>)
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	f7f2 fe0e 	bl	8000230 <__aeabi_dsub>
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	4630      	mov	r0, r6
 800d61a:	e9c4 2300 	strd	r2, r3, [r4]
 800d61e:	4639      	mov	r1, r7
 800d620:	f7f2 fe06 	bl	8000230 <__aeabi_dsub>
 800d624:	a3a0      	add	r3, pc, #640	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x2e0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 fe01 	bl	8000230 <__aeabi_dsub>
 800d62e:	2501      	movs	r5, #1
 800d630:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d634:	4628      	mov	r0, r5
 800d636:	b00d      	add	sp, #52	; 0x34
 800d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63c:	a39c      	add	r3, pc, #624	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x2e8>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	f7f2 fdf5 	bl	8000230 <__aeabi_dsub>
 800d646:	a39c      	add	r3, pc, #624	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x2f0>)
 800d648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	f7f2 fdee 	bl	8000230 <__aeabi_dsub>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4630      	mov	r0, r6
 800d65a:	e9c4 2300 	strd	r2, r3, [r4]
 800d65e:	4639      	mov	r1, r7
 800d660:	f7f2 fde6 	bl	8000230 <__aeabi_dsub>
 800d664:	a394      	add	r3, pc, #592	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x2f0>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	e7de      	b.n	800d62a <__ieee754_rem_pio2+0x62>
 800d66c:	f7f2 fde2 	bl	8000234 <__adddf3>
 800d670:	45aa      	cmp	sl, r5
 800d672:	4606      	mov	r6, r0
 800d674:	460f      	mov	r7, r1
 800d676:	d016      	beq.n	800d6a6 <__ieee754_rem_pio2+0xde>
 800d678:	a38b      	add	r3, pc, #556	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x2e0>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7f2 fdd9 	bl	8000234 <__adddf3>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4630      	mov	r0, r6
 800d688:	e9c4 2300 	strd	r2, r3, [r4]
 800d68c:	4639      	mov	r1, r7
 800d68e:	f7f2 fdcf 	bl	8000230 <__aeabi_dsub>
 800d692:	a385      	add	r3, pc, #532	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x2e0>)
 800d694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d698:	f7f2 fdcc 	bl	8000234 <__adddf3>
 800d69c:	f04f 35ff 	mov.w	r5, #4294967295
 800d6a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6a4:	e7c6      	b.n	800d634 <__ieee754_rem_pio2+0x6c>
 800d6a6:	a382      	add	r3, pc, #520	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x2e8>)
 800d6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ac:	f7f2 fdc2 	bl	8000234 <__adddf3>
 800d6b0:	a381      	add	r3, pc, #516	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x2f0>)
 800d6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	460f      	mov	r7, r1
 800d6ba:	f7f2 fdbb 	bl	8000234 <__adddf3>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	e9c4 2300 	strd	r2, r3, [r4]
 800d6c8:	4639      	mov	r1, r7
 800d6ca:	f7f2 fdb1 	bl	8000230 <__aeabi_dsub>
 800d6ce:	a37a      	add	r3, pc, #488	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x2f0>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	e7e0      	b.n	800d698 <__ieee754_rem_pio2+0xd0>
 800d6d6:	4a83      	ldr	r2, [pc, #524]	; (800d8e4 <__ieee754_rem_pio2+0x31c>)
 800d6d8:	4592      	cmp	sl, r2
 800d6da:	f300 80d2 	bgt.w	800d882 <__ieee754_rem_pio2+0x2ba>
 800d6de:	f7fe fea7 	bl	800c430 <fabs>
 800d6e2:	a377      	add	r3, pc, #476	; (adr r3, 800d8c0 <__ieee754_rem_pio2+0x2f8>)
 800d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f2 ff58 	bl	80005a0 <__aeabi_dmul>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	4b7d      	ldr	r3, [pc, #500]	; (800d8e8 <__ieee754_rem_pio2+0x320>)
 800d6f4:	f7f2 fd9e 	bl	8000234 <__adddf3>
 800d6f8:	f7f3 fa02 	bl	8000b00 <__aeabi_d2iz>
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	f7f2 fee5 	bl	80004cc <__aeabi_i2d>
 800d702:	a367      	add	r3, pc, #412	; (adr r3, 800d8a0 <__ieee754_rem_pio2+0x2d8>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d70c:	f7f2 ff48 	bl	80005a0 <__aeabi_dmul>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f2 fd8a 	bl	8000230 <__aeabi_dsub>
 800d71c:	a362      	add	r3, pc, #392	; (adr r3, 800d8a8 <__ieee754_rem_pio2+0x2e0>)
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	4606      	mov	r6, r0
 800d724:	460f      	mov	r7, r1
 800d726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d72a:	f7f2 ff39 	bl	80005a0 <__aeabi_dmul>
 800d72e:	2d1f      	cmp	r5, #31
 800d730:	4680      	mov	r8, r0
 800d732:	4689      	mov	r9, r1
 800d734:	dc0e      	bgt.n	800d754 <__ieee754_rem_pio2+0x18c>
 800d736:	4b6d      	ldr	r3, [pc, #436]	; (800d8ec <__ieee754_rem_pio2+0x324>)
 800d738:	1e6a      	subs	r2, r5, #1
 800d73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73e:	4553      	cmp	r3, sl
 800d740:	d008      	beq.n	800d754 <__ieee754_rem_pio2+0x18c>
 800d742:	4642      	mov	r2, r8
 800d744:	464b      	mov	r3, r9
 800d746:	4630      	mov	r0, r6
 800d748:	4639      	mov	r1, r7
 800d74a:	f7f2 fd71 	bl	8000230 <__aeabi_dsub>
 800d74e:	e9c4 0100 	strd	r0, r1, [r4]
 800d752:	e011      	b.n	800d778 <__ieee754_rem_pio2+0x1b0>
 800d754:	464b      	mov	r3, r9
 800d756:	4642      	mov	r2, r8
 800d758:	4630      	mov	r0, r6
 800d75a:	4639      	mov	r1, r7
 800d75c:	f7f2 fd68 	bl	8000230 <__aeabi_dsub>
 800d760:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d764:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d768:	ebaa 0303 	sub.w	r3, sl, r3
 800d76c:	2b10      	cmp	r3, #16
 800d76e:	dc1f      	bgt.n	800d7b0 <__ieee754_rem_pio2+0x1e8>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	e9c4 2300 	strd	r2, r3, [r4]
 800d778:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d77c:	4630      	mov	r0, r6
 800d77e:	4653      	mov	r3, sl
 800d780:	4639      	mov	r1, r7
 800d782:	f7f2 fd55 	bl	8000230 <__aeabi_dsub>
 800d786:	4642      	mov	r2, r8
 800d788:	464b      	mov	r3, r9
 800d78a:	f7f2 fd51 	bl	8000230 <__aeabi_dsub>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	f1bb 0f00 	cmp.w	fp, #0
 800d796:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d79a:	f6bf af4b 	bge.w	800d634 <__ieee754_rem_pio2+0x6c>
 800d79e:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800d7a2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800d7a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800d7aa:	60e1      	str	r1, [r4, #12]
 800d7ac:	426d      	negs	r5, r5
 800d7ae:	e741      	b.n	800d634 <__ieee754_rem_pio2+0x6c>
 800d7b0:	a33f      	add	r3, pc, #252	; (adr r3, 800d8b0 <__ieee754_rem_pio2+0x2e8>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ba:	f7f2 fef1 	bl	80005a0 <__aeabi_dmul>
 800d7be:	4680      	mov	r8, r0
 800d7c0:	4689      	mov	r9, r1
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f2 fd31 	bl	8000230 <__aeabi_dsub>
 800d7ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	4639      	mov	r1, r7
 800d7da:	f7f2 fd29 	bl	8000230 <__aeabi_dsub>
 800d7de:	4642      	mov	r2, r8
 800d7e0:	464b      	mov	r3, r9
 800d7e2:	f7f2 fd25 	bl	8000230 <__aeabi_dsub>
 800d7e6:	a334      	add	r3, pc, #208	; (adr r3, 800d8b8 <__ieee754_rem_pio2+0x2f0>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	460f      	mov	r7, r1
 800d7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f4:	f7f2 fed4 	bl	80005a0 <__aeabi_dmul>
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	463b      	mov	r3, r7
 800d7fc:	f7f2 fd18 	bl	8000230 <__aeabi_dsub>
 800d800:	460b      	mov	r3, r1
 800d802:	4602      	mov	r2, r0
 800d804:	4680      	mov	r8, r0
 800d806:	4689      	mov	r9, r1
 800d808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d80c:	f7f2 fd10 	bl	8000230 <__aeabi_dsub>
 800d810:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d814:	ebaa 0a03 	sub.w	sl, sl, r3
 800d818:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800d81c:	dc06      	bgt.n	800d82c <__ieee754_rem_pio2+0x264>
 800d81e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	e9c4 2300 	strd	r2, r3, [r4]
 800d82a:	e7a5      	b.n	800d778 <__ieee754_rem_pio2+0x1b0>
 800d82c:	a326      	add	r3, pc, #152	; (adr r3, 800d8c8 <__ieee754_rem_pio2+0x300>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d836:	f7f2 feb3 	bl	80005a0 <__aeabi_dmul>
 800d83a:	4680      	mov	r8, r0
 800d83c:	4689      	mov	r9, r1
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d846:	f7f2 fcf3 	bl	8000230 <__aeabi_dsub>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	4606      	mov	r6, r0
 800d850:	460f      	mov	r7, r1
 800d852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d856:	f7f2 fceb 	bl	8000230 <__aeabi_dsub>
 800d85a:	4642      	mov	r2, r8
 800d85c:	464b      	mov	r3, r9
 800d85e:	f7f2 fce7 	bl	8000230 <__aeabi_dsub>
 800d862:	a31b      	add	r3, pc, #108	; (adr r3, 800d8d0 <__ieee754_rem_pio2+0x308>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	4680      	mov	r8, r0
 800d86a:	4689      	mov	r9, r1
 800d86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d870:	f7f2 fe96 	bl	80005a0 <__aeabi_dmul>
 800d874:	4642      	mov	r2, r8
 800d876:	464b      	mov	r3, r9
 800d878:	f7f2 fcda 	bl	8000230 <__aeabi_dsub>
 800d87c:	4680      	mov	r8, r0
 800d87e:	4689      	mov	r9, r1
 800d880:	e75f      	b.n	800d742 <__ieee754_rem_pio2+0x17a>
 800d882:	4a1b      	ldr	r2, [pc, #108]	; (800d8f0 <__ieee754_rem_pio2+0x328>)
 800d884:	4592      	cmp	sl, r2
 800d886:	dd35      	ble.n	800d8f4 <__ieee754_rem_pio2+0x32c>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	f7f2 fcd0 	bl	8000230 <__aeabi_dsub>
 800d890:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d894:	e9c4 0100 	strd	r0, r1, [r4]
 800d898:	e6a6      	b.n	800d5e8 <__ieee754_rem_pio2+0x20>
 800d89a:	bf00      	nop
 800d89c:	f3af 8000 	nop.w
 800d8a0:	54400000 	.word	0x54400000
 800d8a4:	3ff921fb 	.word	0x3ff921fb
 800d8a8:	1a626331 	.word	0x1a626331
 800d8ac:	3dd0b461 	.word	0x3dd0b461
 800d8b0:	1a600000 	.word	0x1a600000
 800d8b4:	3dd0b461 	.word	0x3dd0b461
 800d8b8:	2e037073 	.word	0x2e037073
 800d8bc:	3ba3198a 	.word	0x3ba3198a
 800d8c0:	6dc9c883 	.word	0x6dc9c883
 800d8c4:	3fe45f30 	.word	0x3fe45f30
 800d8c8:	2e000000 	.word	0x2e000000
 800d8cc:	3ba3198a 	.word	0x3ba3198a
 800d8d0:	252049c1 	.word	0x252049c1
 800d8d4:	397b839a 	.word	0x397b839a
 800d8d8:	3fe921fb 	.word	0x3fe921fb
 800d8dc:	4002d97b 	.word	0x4002d97b
 800d8e0:	3ff921fb 	.word	0x3ff921fb
 800d8e4:	413921fb 	.word	0x413921fb
 800d8e8:	3fe00000 	.word	0x3fe00000
 800d8ec:	0800ec50 	.word	0x0800ec50
 800d8f0:	7fefffff 	.word	0x7fefffff
 800d8f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d8f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d8fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d900:	460f      	mov	r7, r1
 800d902:	4606      	mov	r6, r0
 800d904:	f7f3 f8fc 	bl	8000b00 <__aeabi_d2iz>
 800d908:	f7f2 fde0 	bl	80004cc <__aeabi_i2d>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4630      	mov	r0, r6
 800d912:	4639      	mov	r1, r7
 800d914:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d918:	f7f2 fc8a 	bl	8000230 <__aeabi_dsub>
 800d91c:	2200      	movs	r2, #0
 800d91e:	4b20      	ldr	r3, [pc, #128]	; (800d9a0 <__ieee754_rem_pio2+0x3d8>)
 800d920:	f7f2 fe3e 	bl	80005a0 <__aeabi_dmul>
 800d924:	460f      	mov	r7, r1
 800d926:	4606      	mov	r6, r0
 800d928:	f7f3 f8ea 	bl	8000b00 <__aeabi_d2iz>
 800d92c:	f7f2 fdce 	bl	80004cc <__aeabi_i2d>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4630      	mov	r0, r6
 800d936:	4639      	mov	r1, r7
 800d938:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d93c:	f7f2 fc78 	bl	8000230 <__aeabi_dsub>
 800d940:	2200      	movs	r2, #0
 800d942:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <__ieee754_rem_pio2+0x3d8>)
 800d944:	f7f2 fe2c 	bl	80005a0 <__aeabi_dmul>
 800d948:	f04f 0803 	mov.w	r8, #3
 800d94c:	2600      	movs	r6, #0
 800d94e:	2700      	movs	r7, #0
 800d950:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d954:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d958:	4632      	mov	r2, r6
 800d95a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d95e:	463b      	mov	r3, r7
 800d960:	f108 3aff 	add.w	sl, r8, #4294967295
 800d964:	f7f3 f884 	bl	8000a70 <__aeabi_dcmpeq>
 800d968:	b9b8      	cbnz	r0, 800d99a <__ieee754_rem_pio2+0x3d2>
 800d96a:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <__ieee754_rem_pio2+0x3dc>)
 800d96c:	462a      	mov	r2, r5
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	2302      	movs	r3, #2
 800d972:	4621      	mov	r1, r4
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	a806      	add	r0, sp, #24
 800d978:	4643      	mov	r3, r8
 800d97a:	f000 f97f 	bl	800dc7c <__kernel_rem_pio2>
 800d97e:	f1bb 0f00 	cmp.w	fp, #0
 800d982:	4605      	mov	r5, r0
 800d984:	f6bf ae56 	bge.w	800d634 <__ieee754_rem_pio2+0x6c>
 800d988:	6863      	ldr	r3, [r4, #4]
 800d98a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d98e:	6063      	str	r3, [r4, #4]
 800d990:	68e3      	ldr	r3, [r4, #12]
 800d992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d996:	60e3      	str	r3, [r4, #12]
 800d998:	e708      	b.n	800d7ac <__ieee754_rem_pio2+0x1e4>
 800d99a:	46d0      	mov	r8, sl
 800d99c:	e7dc      	b.n	800d958 <__ieee754_rem_pio2+0x390>
 800d99e:	bf00      	nop
 800d9a0:	41700000 	.word	0x41700000
 800d9a4:	0800ecd0 	.word	0x0800ecd0

0800d9a8 <__ieee754_sqrt>:
 800d9a8:	4b54      	ldr	r3, [pc, #336]	; (800dafc <__ieee754_sqrt+0x154>)
 800d9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ae:	438b      	bics	r3, r1
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	460d      	mov	r5, r1
 800d9b4:	460a      	mov	r2, r1
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	d10f      	bne.n	800d9da <__ieee754_sqrt+0x32>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	f7f2 fdef 	bl	80005a0 <__aeabi_dmul>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	f7f2 fc33 	bl	8000234 <__adddf3>
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	4607      	mov	r7, r0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	dc0e      	bgt.n	800da00 <__ieee754_sqrt+0x58>
 800d9e2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d9e6:	ea5c 0707 	orrs.w	r7, ip, r7
 800d9ea:	d0f2      	beq.n	800d9d2 <__ieee754_sqrt+0x2a>
 800d9ec:	b141      	cbz	r1, 800da00 <__ieee754_sqrt+0x58>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	f7f2 fc1d 	bl	8000230 <__aeabi_dsub>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	f7f2 fefb 	bl	80007f4 <__aeabi_ddiv>
 800d9fe:	e7e6      	b.n	800d9ce <__ieee754_sqrt+0x26>
 800da00:	1512      	asrs	r2, r2, #20
 800da02:	d074      	beq.n	800daee <__ieee754_sqrt+0x146>
 800da04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da08:	07d5      	lsls	r5, r2, #31
 800da0a:	f04f 0500 	mov.w	r5, #0
 800da0e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da12:	bf48      	it	mi
 800da14:	0fd9      	lsrmi	r1, r3, #31
 800da16:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800da1a:	bf44      	itt	mi
 800da1c:	005b      	lslmi	r3, r3, #1
 800da1e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800da22:	1051      	asrs	r1, r2, #1
 800da24:	0fda      	lsrs	r2, r3, #31
 800da26:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800da2a:	4628      	mov	r0, r5
 800da2c:	2216      	movs	r2, #22
 800da2e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	1987      	adds	r7, r0, r6
 800da36:	42a7      	cmp	r7, r4
 800da38:	bfde      	ittt	le
 800da3a:	19b8      	addle	r0, r7, r6
 800da3c:	1be4      	suble	r4, r4, r7
 800da3e:	19ad      	addle	r5, r5, r6
 800da40:	0fdf      	lsrs	r7, r3, #31
 800da42:	3a01      	subs	r2, #1
 800da44:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800da48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da50:	d1f0      	bne.n	800da34 <__ieee754_sqrt+0x8c>
 800da52:	f04f 0c20 	mov.w	ip, #32
 800da56:	4696      	mov	lr, r2
 800da58:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800da5c:	4284      	cmp	r4, r0
 800da5e:	eb06 070e 	add.w	r7, r6, lr
 800da62:	dc02      	bgt.n	800da6a <__ieee754_sqrt+0xc2>
 800da64:	d112      	bne.n	800da8c <__ieee754_sqrt+0xe4>
 800da66:	429f      	cmp	r7, r3
 800da68:	d810      	bhi.n	800da8c <__ieee754_sqrt+0xe4>
 800da6a:	2f00      	cmp	r7, #0
 800da6c:	eb07 0e06 	add.w	lr, r7, r6
 800da70:	da42      	bge.n	800daf8 <__ieee754_sqrt+0x150>
 800da72:	f1be 0f00 	cmp.w	lr, #0
 800da76:	db3f      	blt.n	800daf8 <__ieee754_sqrt+0x150>
 800da78:	f100 0801 	add.w	r8, r0, #1
 800da7c:	1a24      	subs	r4, r4, r0
 800da7e:	4640      	mov	r0, r8
 800da80:	429f      	cmp	r7, r3
 800da82:	bf88      	it	hi
 800da84:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800da88:	1bdb      	subs	r3, r3, r7
 800da8a:	4432      	add	r2, r6
 800da8c:	0064      	lsls	r4, r4, #1
 800da8e:	f1bc 0c01 	subs.w	ip, ip, #1
 800da92:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800da96:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da9e:	d1dd      	bne.n	800da5c <__ieee754_sqrt+0xb4>
 800daa0:	4323      	orrs	r3, r4
 800daa2:	d006      	beq.n	800dab2 <__ieee754_sqrt+0x10a>
 800daa4:	1c54      	adds	r4, r2, #1
 800daa6:	bf0b      	itete	eq
 800daa8:	4662      	moveq	r2, ip
 800daaa:	3201      	addne	r2, #1
 800daac:	3501      	addeq	r5, #1
 800daae:	f022 0201 	bicne.w	r2, r2, #1
 800dab2:	106b      	asrs	r3, r5, #1
 800dab4:	0852      	lsrs	r2, r2, #1
 800dab6:	07e8      	lsls	r0, r5, #31
 800dab8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dabc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dac0:	bf48      	it	mi
 800dac2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dac6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800daca:	4616      	mov	r6, r2
 800dacc:	e781      	b.n	800d9d2 <__ieee754_sqrt+0x2a>
 800dace:	0adc      	lsrs	r4, r3, #11
 800dad0:	3915      	subs	r1, #21
 800dad2:	055b      	lsls	r3, r3, #21
 800dad4:	2c00      	cmp	r4, #0
 800dad6:	d0fa      	beq.n	800dace <__ieee754_sqrt+0x126>
 800dad8:	02e6      	lsls	r6, r4, #11
 800dada:	d50a      	bpl.n	800daf2 <__ieee754_sqrt+0x14a>
 800dadc:	f1c2 0020 	rsb	r0, r2, #32
 800dae0:	fa23 f000 	lsr.w	r0, r3, r0
 800dae4:	1e55      	subs	r5, r2, #1
 800dae6:	4093      	lsls	r3, r2
 800dae8:	4304      	orrs	r4, r0
 800daea:	1b4a      	subs	r2, r1, r5
 800daec:	e78a      	b.n	800da04 <__ieee754_sqrt+0x5c>
 800daee:	4611      	mov	r1, r2
 800daf0:	e7f0      	b.n	800dad4 <__ieee754_sqrt+0x12c>
 800daf2:	0064      	lsls	r4, r4, #1
 800daf4:	3201      	adds	r2, #1
 800daf6:	e7ef      	b.n	800dad8 <__ieee754_sqrt+0x130>
 800daf8:	4680      	mov	r8, r0
 800dafa:	e7bf      	b.n	800da7c <__ieee754_sqrt+0xd4>
 800dafc:	7ff00000 	.word	0x7ff00000

0800db00 <__kernel_cos>:
 800db00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800db08:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800db0c:	4680      	mov	r8, r0
 800db0e:	460f      	mov	r7, r1
 800db10:	e9cd 2300 	strd	r2, r3, [sp]
 800db14:	da04      	bge.n	800db20 <__kernel_cos+0x20>
 800db16:	f7f2 fff3 	bl	8000b00 <__aeabi_d2iz>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	f000 8086 	beq.w	800dc2c <__kernel_cos+0x12c>
 800db20:	4642      	mov	r2, r8
 800db22:	463b      	mov	r3, r7
 800db24:	4640      	mov	r0, r8
 800db26:	4639      	mov	r1, r7
 800db28:	f7f2 fd3a 	bl	80005a0 <__aeabi_dmul>
 800db2c:	2200      	movs	r2, #0
 800db2e:	4b4e      	ldr	r3, [pc, #312]	; (800dc68 <__kernel_cos+0x168>)
 800db30:	4604      	mov	r4, r0
 800db32:	460d      	mov	r5, r1
 800db34:	f7f2 fd34 	bl	80005a0 <__aeabi_dmul>
 800db38:	a33f      	add	r3, pc, #252	; (adr r3, 800dc38 <__kernel_cos+0x138>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	4682      	mov	sl, r0
 800db40:	468b      	mov	fp, r1
 800db42:	4620      	mov	r0, r4
 800db44:	4629      	mov	r1, r5
 800db46:	f7f2 fd2b 	bl	80005a0 <__aeabi_dmul>
 800db4a:	a33d      	add	r3, pc, #244	; (adr r3, 800dc40 <__kernel_cos+0x140>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fb70 	bl	8000234 <__adddf3>
 800db54:	4622      	mov	r2, r4
 800db56:	462b      	mov	r3, r5
 800db58:	f7f2 fd22 	bl	80005a0 <__aeabi_dmul>
 800db5c:	a33a      	add	r3, pc, #232	; (adr r3, 800dc48 <__kernel_cos+0x148>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	f7f2 fb65 	bl	8000230 <__aeabi_dsub>
 800db66:	4622      	mov	r2, r4
 800db68:	462b      	mov	r3, r5
 800db6a:	f7f2 fd19 	bl	80005a0 <__aeabi_dmul>
 800db6e:	a338      	add	r3, pc, #224	; (adr r3, 800dc50 <__kernel_cos+0x150>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	f7f2 fb5e 	bl	8000234 <__adddf3>
 800db78:	4622      	mov	r2, r4
 800db7a:	462b      	mov	r3, r5
 800db7c:	f7f2 fd10 	bl	80005a0 <__aeabi_dmul>
 800db80:	a335      	add	r3, pc, #212	; (adr r3, 800dc58 <__kernel_cos+0x158>)
 800db82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db86:	f7f2 fb53 	bl	8000230 <__aeabi_dsub>
 800db8a:	4622      	mov	r2, r4
 800db8c:	462b      	mov	r3, r5
 800db8e:	f7f2 fd07 	bl	80005a0 <__aeabi_dmul>
 800db92:	a333      	add	r3, pc, #204	; (adr r3, 800dc60 <__kernel_cos+0x160>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb4c 	bl	8000234 <__adddf3>
 800db9c:	4622      	mov	r2, r4
 800db9e:	462b      	mov	r3, r5
 800dba0:	f7f2 fcfe 	bl	80005a0 <__aeabi_dmul>
 800dba4:	4622      	mov	r2, r4
 800dba6:	462b      	mov	r3, r5
 800dba8:	f7f2 fcfa 	bl	80005a0 <__aeabi_dmul>
 800dbac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	4640      	mov	r0, r8
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f2 fcf2 	bl	80005a0 <__aeabi_dmul>
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f7f2 fb34 	bl	8000230 <__aeabi_dsub>
 800dbc8:	4b28      	ldr	r3, [pc, #160]	; (800dc6c <__kernel_cos+0x16c>)
 800dbca:	4680      	mov	r8, r0
 800dbcc:	429e      	cmp	r6, r3
 800dbce:	4689      	mov	r9, r1
 800dbd0:	dc0e      	bgt.n	800dbf0 <__kernel_cos+0xf0>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	4659      	mov	r1, fp
 800dbda:	f7f2 fb29 	bl	8000230 <__aeabi_dsub>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4922      	ldr	r1, [pc, #136]	; (800dc70 <__kernel_cos+0x170>)
 800dbe6:	f7f2 fb23 	bl	8000230 <__aeabi_dsub>
 800dbea:	b003      	add	sp, #12
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	2400      	movs	r4, #0
 800dbf2:	4b20      	ldr	r3, [pc, #128]	; (800dc74 <__kernel_cos+0x174>)
 800dbf4:	4622      	mov	r2, r4
 800dbf6:	429e      	cmp	r6, r3
 800dbf8:	bfcc      	ite	gt
 800dbfa:	4d1f      	ldrgt	r5, [pc, #124]	; (800dc78 <__kernel_cos+0x178>)
 800dbfc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800dc00:	462b      	mov	r3, r5
 800dc02:	2000      	movs	r0, #0
 800dc04:	491a      	ldr	r1, [pc, #104]	; (800dc70 <__kernel_cos+0x170>)
 800dc06:	f7f2 fb13 	bl	8000230 <__aeabi_dsub>
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	460f      	mov	r7, r1
 800dc10:	462b      	mov	r3, r5
 800dc12:	4650      	mov	r0, sl
 800dc14:	4659      	mov	r1, fp
 800dc16:	f7f2 fb0b 	bl	8000230 <__aeabi_dsub>
 800dc1a:	4642      	mov	r2, r8
 800dc1c:	464b      	mov	r3, r9
 800dc1e:	f7f2 fb07 	bl	8000230 <__aeabi_dsub>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4630      	mov	r0, r6
 800dc28:	4639      	mov	r1, r7
 800dc2a:	e7dc      	b.n	800dbe6 <__kernel_cos+0xe6>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4910      	ldr	r1, [pc, #64]	; (800dc70 <__kernel_cos+0x170>)
 800dc30:	e7db      	b.n	800dbea <__kernel_cos+0xea>
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
 800dc38:	be8838d4 	.word	0xbe8838d4
 800dc3c:	bda8fae9 	.word	0xbda8fae9
 800dc40:	bdb4b1c4 	.word	0xbdb4b1c4
 800dc44:	3e21ee9e 	.word	0x3e21ee9e
 800dc48:	809c52ad 	.word	0x809c52ad
 800dc4c:	3e927e4f 	.word	0x3e927e4f
 800dc50:	19cb1590 	.word	0x19cb1590
 800dc54:	3efa01a0 	.word	0x3efa01a0
 800dc58:	16c15177 	.word	0x16c15177
 800dc5c:	3f56c16c 	.word	0x3f56c16c
 800dc60:	5555554c 	.word	0x5555554c
 800dc64:	3fa55555 	.word	0x3fa55555
 800dc68:	3fe00000 	.word	0x3fe00000
 800dc6c:	3fd33332 	.word	0x3fd33332
 800dc70:	3ff00000 	.word	0x3ff00000
 800dc74:	3fe90000 	.word	0x3fe90000
 800dc78:	3fd20000 	.word	0x3fd20000

0800dc7c <__kernel_rem_pio2>:
 800dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc80:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800dc84:	9307      	str	r3, [sp, #28]
 800dc86:	9104      	str	r1, [sp, #16]
 800dc88:	4bbf      	ldr	r3, [pc, #764]	; (800df88 <__kernel_rem_pio2+0x30c>)
 800dc8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800dc8c:	1ed4      	subs	r4, r2, #3
 800dc8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc92:	2500      	movs	r5, #0
 800dc94:	9302      	str	r3, [sp, #8]
 800dc96:	9b07      	ldr	r3, [sp, #28]
 800dc98:	9008      	str	r0, [sp, #32]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	9306      	str	r3, [sp, #24]
 800dc9e:	2318      	movs	r3, #24
 800dca0:	fb94 f4f3 	sdiv	r4, r4, r3
 800dca4:	f06f 0317 	mvn.w	r3, #23
 800dca8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800dcac:	fb04 3303 	mla	r3, r4, r3, r3
 800dcb0:	eb03 0a02 	add.w	sl, r3, r2
 800dcb4:	9a06      	ldr	r2, [sp, #24]
 800dcb6:	9b02      	ldr	r3, [sp, #8]
 800dcb8:	1aa7      	subs	r7, r4, r2
 800dcba:	eb03 0802 	add.w	r8, r3, r2
 800dcbe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	ae1e      	add	r6, sp, #120	; 0x78
 800dcca:	4545      	cmp	r5, r8
 800dccc:	dd14      	ble.n	800dcf8 <__kernel_rem_pio2+0x7c>
 800dcce:	2600      	movs	r6, #0
 800dcd0:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800dcd4:	9b02      	ldr	r3, [sp, #8]
 800dcd6:	429e      	cmp	r6, r3
 800dcd8:	dc39      	bgt.n	800dd4e <__kernel_rem_pio2+0xd2>
 800dcda:	9b08      	ldr	r3, [sp, #32]
 800dcdc:	f04f 0800 	mov.w	r8, #0
 800dce0:	3b08      	subs	r3, #8
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	9b07      	ldr	r3, [sp, #28]
 800dce6:	f04f 0900 	mov.w	r9, #0
 800dcea:	199d      	adds	r5, r3, r6
 800dcec:	ab20      	add	r3, sp, #128	; 0x80
 800dcee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dcf2:	9305      	str	r3, [sp, #20]
 800dcf4:	2700      	movs	r7, #0
 800dcf6:	e023      	b.n	800dd40 <__kernel_rem_pio2+0xc4>
 800dcf8:	42ef      	cmn	r7, r5
 800dcfa:	d40b      	bmi.n	800dd14 <__kernel_rem_pio2+0x98>
 800dcfc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dd00:	e9cd 2300 	strd	r2, r3, [sp]
 800dd04:	f7f2 fbe2 	bl	80004cc <__aeabi_i2d>
 800dd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd0c:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800dd10:	3501      	adds	r5, #1
 800dd12:	e7da      	b.n	800dcca <__kernel_rem_pio2+0x4e>
 800dd14:	4610      	mov	r0, r2
 800dd16:	4619      	mov	r1, r3
 800dd18:	e7f8      	b.n	800dd0c <__kernel_rem_pio2+0x90>
 800dd1a:	9905      	ldr	r1, [sp, #20]
 800dd1c:	9d00      	ldr	r5, [sp, #0]
 800dd1e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dd22:	9105      	str	r1, [sp, #20]
 800dd24:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800dd28:	9500      	str	r5, [sp, #0]
 800dd2a:	f7f2 fc39 	bl	80005a0 <__aeabi_dmul>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4640      	mov	r0, r8
 800dd34:	4649      	mov	r1, r9
 800dd36:	f7f2 fa7d 	bl	8000234 <__adddf3>
 800dd3a:	4680      	mov	r8, r0
 800dd3c:	4689      	mov	r9, r1
 800dd3e:	3701      	adds	r7, #1
 800dd40:	9b06      	ldr	r3, [sp, #24]
 800dd42:	429f      	cmp	r7, r3
 800dd44:	dde9      	ble.n	800dd1a <__kernel_rem_pio2+0x9e>
 800dd46:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	e7c2      	b.n	800dcd4 <__kernel_rem_pio2+0x58>
 800dd4e:	9b02      	ldr	r3, [sp, #8]
 800dd50:	aa0c      	add	r2, sp, #48	; 0x30
 800dd52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd56:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd58:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800dd5a:	9f02      	ldr	r7, [sp, #8]
 800dd5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dd60:	930a      	str	r3, [sp, #40]	; 0x28
 800dd62:	2600      	movs	r6, #0
 800dd64:	ab98      	add	r3, sp, #608	; 0x260
 800dd66:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800dd6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dd72:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800dd76:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800dd7a:	ab98      	add	r3, sp, #608	; 0x260
 800dd7c:	445b      	add	r3, fp
 800dd7e:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800dd82:	1bbb      	subs	r3, r7, r6
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	dc71      	bgt.n	800de6c <__kernel_rem_pio2+0x1f0>
 800dd88:	4652      	mov	r2, sl
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	4649      	mov	r1, r9
 800dd8e:	f000 fe57 	bl	800ea40 <scalbn>
 800dd92:	2200      	movs	r2, #0
 800dd94:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dd98:	4604      	mov	r4, r0
 800dd9a:	460d      	mov	r5, r1
 800dd9c:	f7f2 fc00 	bl	80005a0 <__aeabi_dmul>
 800dda0:	f000 fd36 	bl	800e810 <floor>
 800dda4:	2200      	movs	r2, #0
 800dda6:	4b79      	ldr	r3, [pc, #484]	; (800df8c <__kernel_rem_pio2+0x310>)
 800dda8:	f7f2 fbfa 	bl	80005a0 <__aeabi_dmul>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	f7f2 fa3c 	bl	8000230 <__aeabi_dsub>
 800ddb8:	460d      	mov	r5, r1
 800ddba:	4604      	mov	r4, r0
 800ddbc:	f7f2 fea0 	bl	8000b00 <__aeabi_d2iz>
 800ddc0:	9005      	str	r0, [sp, #20]
 800ddc2:	f7f2 fb83 	bl	80004cc <__aeabi_i2d>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	460b      	mov	r3, r1
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4629      	mov	r1, r5
 800ddce:	f7f2 fa2f 	bl	8000230 <__aeabi_dsub>
 800ddd2:	f1ba 0f00 	cmp.w	sl, #0
 800ddd6:	4680      	mov	r8, r0
 800ddd8:	4689      	mov	r9, r1
 800ddda:	dd6c      	ble.n	800deb6 <__kernel_rem_pio2+0x23a>
 800dddc:	1e7a      	subs	r2, r7, #1
 800ddde:	ab0c      	add	r3, sp, #48	; 0x30
 800dde0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dde4:	f1ca 0118 	rsb	r1, sl, #24
 800dde8:	9c05      	ldr	r4, [sp, #20]
 800ddea:	fa40 f301 	asr.w	r3, r0, r1
 800ddee:	441c      	add	r4, r3
 800ddf0:	408b      	lsls	r3, r1
 800ddf2:	1ac0      	subs	r0, r0, r3
 800ddf4:	ab0c      	add	r3, sp, #48	; 0x30
 800ddf6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ddfa:	f1ca 0317 	rsb	r3, sl, #23
 800ddfe:	9405      	str	r4, [sp, #20]
 800de00:	fa40 f303 	asr.w	r3, r0, r3
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	9b00      	ldr	r3, [sp, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dd62      	ble.n	800ded2 <__kernel_rem_pio2+0x256>
 800de0c:	2200      	movs	r2, #0
 800de0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800de12:	4614      	mov	r4, r2
 800de14:	9b05      	ldr	r3, [sp, #20]
 800de16:	3301      	adds	r3, #1
 800de18:	9305      	str	r3, [sp, #20]
 800de1a:	4297      	cmp	r7, r2
 800de1c:	f300 809f 	bgt.w	800df5e <__kernel_rem_pio2+0x2e2>
 800de20:	f1ba 0f00 	cmp.w	sl, #0
 800de24:	dd07      	ble.n	800de36 <__kernel_rem_pio2+0x1ba>
 800de26:	f1ba 0f01 	cmp.w	sl, #1
 800de2a:	f000 80bb 	beq.w	800dfa4 <__kernel_rem_pio2+0x328>
 800de2e:	f1ba 0f02 	cmp.w	sl, #2
 800de32:	f000 80c1 	beq.w	800dfb8 <__kernel_rem_pio2+0x33c>
 800de36:	9b00      	ldr	r3, [sp, #0]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d14a      	bne.n	800ded2 <__kernel_rem_pio2+0x256>
 800de3c:	4642      	mov	r2, r8
 800de3e:	464b      	mov	r3, r9
 800de40:	2000      	movs	r0, #0
 800de42:	4953      	ldr	r1, [pc, #332]	; (800df90 <__kernel_rem_pio2+0x314>)
 800de44:	f7f2 f9f4 	bl	8000230 <__aeabi_dsub>
 800de48:	4680      	mov	r8, r0
 800de4a:	4689      	mov	r9, r1
 800de4c:	2c00      	cmp	r4, #0
 800de4e:	d040      	beq.n	800ded2 <__kernel_rem_pio2+0x256>
 800de50:	4652      	mov	r2, sl
 800de52:	2000      	movs	r0, #0
 800de54:	494e      	ldr	r1, [pc, #312]	; (800df90 <__kernel_rem_pio2+0x314>)
 800de56:	f000 fdf3 	bl	800ea40 <scalbn>
 800de5a:	4602      	mov	r2, r0
 800de5c:	460b      	mov	r3, r1
 800de5e:	4640      	mov	r0, r8
 800de60:	4649      	mov	r1, r9
 800de62:	f7f2 f9e5 	bl	8000230 <__aeabi_dsub>
 800de66:	4680      	mov	r8, r0
 800de68:	4689      	mov	r9, r1
 800de6a:	e032      	b.n	800ded2 <__kernel_rem_pio2+0x256>
 800de6c:	2200      	movs	r2, #0
 800de6e:	4b49      	ldr	r3, [pc, #292]	; (800df94 <__kernel_rem_pio2+0x318>)
 800de70:	4640      	mov	r0, r8
 800de72:	4649      	mov	r1, r9
 800de74:	f7f2 fb94 	bl	80005a0 <__aeabi_dmul>
 800de78:	f7f2 fe42 	bl	8000b00 <__aeabi_d2iz>
 800de7c:	f7f2 fb26 	bl	80004cc <__aeabi_i2d>
 800de80:	2200      	movs	r2, #0
 800de82:	4b45      	ldr	r3, [pc, #276]	; (800df98 <__kernel_rem_pio2+0x31c>)
 800de84:	e9cd 0100 	strd	r0, r1, [sp]
 800de88:	f7f2 fb8a 	bl	80005a0 <__aeabi_dmul>
 800de8c:	4602      	mov	r2, r0
 800de8e:	460b      	mov	r3, r1
 800de90:	4640      	mov	r0, r8
 800de92:	4649      	mov	r1, r9
 800de94:	f7f2 f9cc 	bl	8000230 <__aeabi_dsub>
 800de98:	f7f2 fe32 	bl	8000b00 <__aeabi_d2iz>
 800de9c:	ab0c      	add	r3, sp, #48	; 0x30
 800de9e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800dea2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800deaa:	f7f2 f9c3 	bl	8000234 <__adddf3>
 800deae:	3601      	adds	r6, #1
 800deb0:	4680      	mov	r8, r0
 800deb2:	4689      	mov	r9, r1
 800deb4:	e765      	b.n	800dd82 <__kernel_rem_pio2+0x106>
 800deb6:	d105      	bne.n	800dec4 <__kernel_rem_pio2+0x248>
 800deb8:	1e7b      	subs	r3, r7, #1
 800deba:	aa0c      	add	r2, sp, #48	; 0x30
 800debc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dec0:	15c3      	asrs	r3, r0, #23
 800dec2:	e79f      	b.n	800de04 <__kernel_rem_pio2+0x188>
 800dec4:	2200      	movs	r2, #0
 800dec6:	4b35      	ldr	r3, [pc, #212]	; (800df9c <__kernel_rem_pio2+0x320>)
 800dec8:	f7f2 fdf0 	bl	8000aac <__aeabi_dcmpge>
 800decc:	2800      	cmp	r0, #0
 800dece:	d143      	bne.n	800df58 <__kernel_rem_pio2+0x2dc>
 800ded0:	9000      	str	r0, [sp, #0]
 800ded2:	2200      	movs	r2, #0
 800ded4:	2300      	movs	r3, #0
 800ded6:	4640      	mov	r0, r8
 800ded8:	4649      	mov	r1, r9
 800deda:	f7f2 fdc9 	bl	8000a70 <__aeabi_dcmpeq>
 800dede:	2800      	cmp	r0, #0
 800dee0:	f000 80c3 	beq.w	800e06a <__kernel_rem_pio2+0x3ee>
 800dee4:	1e7c      	subs	r4, r7, #1
 800dee6:	4623      	mov	r3, r4
 800dee8:	2200      	movs	r2, #0
 800deea:	9902      	ldr	r1, [sp, #8]
 800deec:	428b      	cmp	r3, r1
 800deee:	da6a      	bge.n	800dfc6 <__kernel_rem_pio2+0x34a>
 800def0:	2a00      	cmp	r2, #0
 800def2:	f000 8084 	beq.w	800dffe <__kernel_rem_pio2+0x382>
 800def6:	ab0c      	add	r3, sp, #48	; 0x30
 800def8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800defc:	f1aa 0a18 	sub.w	sl, sl, #24
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 80b0 	beq.w	800e066 <__kernel_rem_pio2+0x3ea>
 800df06:	4652      	mov	r2, sl
 800df08:	2000      	movs	r0, #0
 800df0a:	4921      	ldr	r1, [pc, #132]	; (800df90 <__kernel_rem_pio2+0x314>)
 800df0c:	f000 fd98 	bl	800ea40 <scalbn>
 800df10:	4625      	mov	r5, r4
 800df12:	4606      	mov	r6, r0
 800df14:	460f      	mov	r7, r1
 800df16:	f04f 0a00 	mov.w	sl, #0
 800df1a:	00e3      	lsls	r3, r4, #3
 800df1c:	aa98      	add	r2, sp, #608	; 0x260
 800df1e:	eb02 0803 	add.w	r8, r2, r3
 800df22:	f8df b070 	ldr.w	fp, [pc, #112]	; 800df94 <__kernel_rem_pio2+0x318>
 800df26:	9306      	str	r3, [sp, #24]
 800df28:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800df2c:	2d00      	cmp	r5, #0
 800df2e:	f280 80d2 	bge.w	800e0d6 <__kernel_rem_pio2+0x45a>
 800df32:	2500      	movs	r5, #0
 800df34:	9a06      	ldr	r2, [sp, #24]
 800df36:	ab98      	add	r3, sp, #608	; 0x260
 800df38:	189e      	adds	r6, r3, r2
 800df3a:	3ea8      	subs	r6, #168	; 0xa8
 800df3c:	1b63      	subs	r3, r4, r5
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f2c0 80f9 	blt.w	800e136 <__kernel_rem_pio2+0x4ba>
 800df44:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800dfa0 <__kernel_rem_pio2+0x324>
 800df48:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800df4c:	f04f 0a00 	mov.w	sl, #0
 800df50:	f04f 0b00 	mov.w	fp, #0
 800df54:	2700      	movs	r7, #0
 800df56:	e0e2      	b.n	800e11e <__kernel_rem_pio2+0x4a2>
 800df58:	2302      	movs	r3, #2
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	e756      	b.n	800de0c <__kernel_rem_pio2+0x190>
 800df5e:	ab0c      	add	r3, sp, #48	; 0x30
 800df60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df64:	b94c      	cbnz	r4, 800df7a <__kernel_rem_pio2+0x2fe>
 800df66:	b12b      	cbz	r3, 800df74 <__kernel_rem_pio2+0x2f8>
 800df68:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800df6c:	a80c      	add	r0, sp, #48	; 0x30
 800df6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800df72:	2301      	movs	r3, #1
 800df74:	3201      	adds	r2, #1
 800df76:	461c      	mov	r4, r3
 800df78:	e74f      	b.n	800de1a <__kernel_rem_pio2+0x19e>
 800df7a:	1acb      	subs	r3, r1, r3
 800df7c:	a80c      	add	r0, sp, #48	; 0x30
 800df7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800df82:	4623      	mov	r3, r4
 800df84:	e7f6      	b.n	800df74 <__kernel_rem_pio2+0x2f8>
 800df86:	bf00      	nop
 800df88:	0800ee18 	.word	0x0800ee18
 800df8c:	40200000 	.word	0x40200000
 800df90:	3ff00000 	.word	0x3ff00000
 800df94:	3e700000 	.word	0x3e700000
 800df98:	41700000 	.word	0x41700000
 800df9c:	3fe00000 	.word	0x3fe00000
 800dfa0:	0800edd0 	.word	0x0800edd0
 800dfa4:	1e7a      	subs	r2, r7, #1
 800dfa6:	ab0c      	add	r3, sp, #48	; 0x30
 800dfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dfb0:	a90c      	add	r1, sp, #48	; 0x30
 800dfb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dfb6:	e73e      	b.n	800de36 <__kernel_rem_pio2+0x1ba>
 800dfb8:	1e7a      	subs	r2, r7, #1
 800dfba:	ab0c      	add	r3, sp, #48	; 0x30
 800dfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dfc4:	e7f4      	b.n	800dfb0 <__kernel_rem_pio2+0x334>
 800dfc6:	a90c      	add	r1, sp, #48	; 0x30
 800dfc8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	430a      	orrs	r2, r1
 800dfd0:	e78b      	b.n	800deea <__kernel_rem_pio2+0x26e>
 800dfd2:	3401      	adds	r4, #1
 800dfd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dfd8:	2a00      	cmp	r2, #0
 800dfda:	d0fa      	beq.n	800dfd2 <__kernel_rem_pio2+0x356>
 800dfdc:	ab98      	add	r3, sp, #608	; 0x260
 800dfde:	449b      	add	fp, r3
 800dfe0:	9b07      	ldr	r3, [sp, #28]
 800dfe2:	1c7e      	adds	r6, r7, #1
 800dfe4:	19dd      	adds	r5, r3, r7
 800dfe6:	ab98      	add	r3, sp, #608	; 0x260
 800dfe8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dfec:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800dff0:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800dff4:	443c      	add	r4, r7
 800dff6:	42b4      	cmp	r4, r6
 800dff8:	da04      	bge.n	800e004 <__kernel_rem_pio2+0x388>
 800dffa:	4627      	mov	r7, r4
 800dffc:	e6b1      	b.n	800dd62 <__kernel_rem_pio2+0xe6>
 800dffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e000:	2401      	movs	r4, #1
 800e002:	e7e7      	b.n	800dfd4 <__kernel_rem_pio2+0x358>
 800e004:	f105 0308 	add.w	r3, r5, #8
 800e008:	9309      	str	r3, [sp, #36]	; 0x24
 800e00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00c:	2700      	movs	r7, #0
 800e00e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e012:	f7f2 fa5b 	bl	80004cc <__aeabi_i2d>
 800e016:	f04f 0800 	mov.w	r8, #0
 800e01a:	f04f 0900 	mov.w	r9, #0
 800e01e:	9b08      	ldr	r3, [sp, #32]
 800e020:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e024:	3b08      	subs	r3, #8
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	f105 0310 	add.w	r3, r5, #16
 800e02c:	9305      	str	r3, [sp, #20]
 800e02e:	9b06      	ldr	r3, [sp, #24]
 800e030:	429f      	cmp	r7, r3
 800e032:	dd04      	ble.n	800e03e <__kernel_rem_pio2+0x3c2>
 800e034:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800e038:	3601      	adds	r6, #1
 800e03a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e03c:	e7db      	b.n	800dff6 <__kernel_rem_pio2+0x37a>
 800e03e:	9905      	ldr	r1, [sp, #20]
 800e040:	9d00      	ldr	r5, [sp, #0]
 800e042:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e046:	9105      	str	r1, [sp, #20]
 800e048:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800e04c:	9500      	str	r5, [sp, #0]
 800e04e:	f7f2 faa7 	bl	80005a0 <__aeabi_dmul>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4640      	mov	r0, r8
 800e058:	4649      	mov	r1, r9
 800e05a:	f7f2 f8eb 	bl	8000234 <__adddf3>
 800e05e:	3701      	adds	r7, #1
 800e060:	4680      	mov	r8, r0
 800e062:	4689      	mov	r9, r1
 800e064:	e7e3      	b.n	800e02e <__kernel_rem_pio2+0x3b2>
 800e066:	3c01      	subs	r4, #1
 800e068:	e745      	b.n	800def6 <__kernel_rem_pio2+0x27a>
 800e06a:	f1ca 0200 	rsb	r2, sl, #0
 800e06e:	4640      	mov	r0, r8
 800e070:	4649      	mov	r1, r9
 800e072:	f000 fce5 	bl	800ea40 <scalbn>
 800e076:	2200      	movs	r2, #0
 800e078:	4ba3      	ldr	r3, [pc, #652]	; (800e308 <__kernel_rem_pio2+0x68c>)
 800e07a:	4604      	mov	r4, r0
 800e07c:	460d      	mov	r5, r1
 800e07e:	f7f2 fd15 	bl	8000aac <__aeabi_dcmpge>
 800e082:	b1f8      	cbz	r0, 800e0c4 <__kernel_rem_pio2+0x448>
 800e084:	2200      	movs	r2, #0
 800e086:	4ba1      	ldr	r3, [pc, #644]	; (800e30c <__kernel_rem_pio2+0x690>)
 800e088:	4620      	mov	r0, r4
 800e08a:	4629      	mov	r1, r5
 800e08c:	f7f2 fa88 	bl	80005a0 <__aeabi_dmul>
 800e090:	f7f2 fd36 	bl	8000b00 <__aeabi_d2iz>
 800e094:	4606      	mov	r6, r0
 800e096:	f7f2 fa19 	bl	80004cc <__aeabi_i2d>
 800e09a:	2200      	movs	r2, #0
 800e09c:	4b9a      	ldr	r3, [pc, #616]	; (800e308 <__kernel_rem_pio2+0x68c>)
 800e09e:	f7f2 fa7f 	bl	80005a0 <__aeabi_dmul>
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7f2 f8c1 	bl	8000230 <__aeabi_dsub>
 800e0ae:	f7f2 fd27 	bl	8000b00 <__aeabi_d2iz>
 800e0b2:	1c7c      	adds	r4, r7, #1
 800e0b4:	ab0c      	add	r3, sp, #48	; 0x30
 800e0b6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e0ba:	f10a 0a18 	add.w	sl, sl, #24
 800e0be:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800e0c2:	e720      	b.n	800df06 <__kernel_rem_pio2+0x28a>
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	4629      	mov	r1, r5
 800e0c8:	f7f2 fd1a 	bl	8000b00 <__aeabi_d2iz>
 800e0cc:	ab0c      	add	r3, sp, #48	; 0x30
 800e0ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e0d2:	463c      	mov	r4, r7
 800e0d4:	e717      	b.n	800df06 <__kernel_rem_pio2+0x28a>
 800e0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800e0d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0dc:	f7f2 f9f6 	bl	80004cc <__aeabi_i2d>
 800e0e0:	4632      	mov	r2, r6
 800e0e2:	463b      	mov	r3, r7
 800e0e4:	f7f2 fa5c 	bl	80005a0 <__aeabi_dmul>
 800e0e8:	4652      	mov	r2, sl
 800e0ea:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e0ee:	465b      	mov	r3, fp
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 fa54 	bl	80005a0 <__aeabi_dmul>
 800e0f8:	3d01      	subs	r5, #1
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460f      	mov	r7, r1
 800e0fe:	e715      	b.n	800df2c <__kernel_rem_pio2+0x2b0>
 800e100:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800e104:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e108:	f7f2 fa4a 	bl	80005a0 <__aeabi_dmul>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4650      	mov	r0, sl
 800e112:	4659      	mov	r1, fp
 800e114:	f7f2 f88e 	bl	8000234 <__adddf3>
 800e118:	4682      	mov	sl, r0
 800e11a:	468b      	mov	fp, r1
 800e11c:	3701      	adds	r7, #1
 800e11e:	9b02      	ldr	r3, [sp, #8]
 800e120:	429f      	cmp	r7, r3
 800e122:	dc01      	bgt.n	800e128 <__kernel_rem_pio2+0x4ac>
 800e124:	42bd      	cmp	r5, r7
 800e126:	daeb      	bge.n	800e100 <__kernel_rem_pio2+0x484>
 800e128:	ab48      	add	r3, sp, #288	; 0x120
 800e12a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e12e:	e9c3 ab00 	strd	sl, fp, [r3]
 800e132:	3501      	adds	r5, #1
 800e134:	e702      	b.n	800df3c <__kernel_rem_pio2+0x2c0>
 800e136:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d86c      	bhi.n	800e216 <__kernel_rem_pio2+0x59a>
 800e13c:	e8df f003 	tbb	[pc, r3]
 800e140:	022f2f59 	.word	0x022f2f59
 800e144:	9a06      	ldr	r2, [sp, #24]
 800e146:	ab48      	add	r3, sp, #288	; 0x120
 800e148:	189d      	adds	r5, r3, r2
 800e14a:	46aa      	mov	sl, r5
 800e14c:	46a3      	mov	fp, r4
 800e14e:	f1bb 0f00 	cmp.w	fp, #0
 800e152:	f300 8087 	bgt.w	800e264 <__kernel_rem_pio2+0x5e8>
 800e156:	46a2      	mov	sl, r4
 800e158:	f1ba 0f01 	cmp.w	sl, #1
 800e15c:	f300 809f 	bgt.w	800e29e <__kernel_rem_pio2+0x622>
 800e160:	2700      	movs	r7, #0
 800e162:	463e      	mov	r6, r7
 800e164:	9d06      	ldr	r5, [sp, #24]
 800e166:	ab48      	add	r3, sp, #288	; 0x120
 800e168:	3508      	adds	r5, #8
 800e16a:	441d      	add	r5, r3
 800e16c:	2c01      	cmp	r4, #1
 800e16e:	f300 80b3 	bgt.w	800e2d8 <__kernel_rem_pio2+0x65c>
 800e172:	9b00      	ldr	r3, [sp, #0]
 800e174:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800e176:	9849      	ldr	r0, [sp, #292]	; 0x124
 800e178:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800e17a:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f040 80b5 	bne.w	800e2ec <__kernel_rem_pio2+0x670>
 800e182:	4603      	mov	r3, r0
 800e184:	462a      	mov	r2, r5
 800e186:	9804      	ldr	r0, [sp, #16]
 800e188:	e9c0 2300 	strd	r2, r3, [r0]
 800e18c:	4622      	mov	r2, r4
 800e18e:	460b      	mov	r3, r1
 800e190:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e194:	463a      	mov	r2, r7
 800e196:	4633      	mov	r3, r6
 800e198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e19c:	e03b      	b.n	800e216 <__kernel_rem_pio2+0x59a>
 800e19e:	f04f 0c00 	mov.w	ip, #0
 800e1a2:	4626      	mov	r6, r4
 800e1a4:	4667      	mov	r7, ip
 800e1a6:	9d06      	ldr	r5, [sp, #24]
 800e1a8:	ab48      	add	r3, sp, #288	; 0x120
 800e1aa:	3508      	adds	r5, #8
 800e1ac:	441d      	add	r5, r3
 800e1ae:	2e00      	cmp	r6, #0
 800e1b0:	da42      	bge.n	800e238 <__kernel_rem_pio2+0x5bc>
 800e1b2:	9b00      	ldr	r3, [sp, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d049      	beq.n	800e24c <__kernel_rem_pio2+0x5d0>
 800e1b8:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800e1bc:	4662      	mov	r2, ip
 800e1be:	460b      	mov	r3, r1
 800e1c0:	9904      	ldr	r1, [sp, #16]
 800e1c2:	2601      	movs	r6, #1
 800e1c4:	e9c1 2300 	strd	r2, r3, [r1]
 800e1c8:	a948      	add	r1, sp, #288	; 0x120
 800e1ca:	463b      	mov	r3, r7
 800e1cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1d0:	f7f2 f82e 	bl	8000230 <__aeabi_dsub>
 800e1d4:	4684      	mov	ip, r0
 800e1d6:	460f      	mov	r7, r1
 800e1d8:	ad48      	add	r5, sp, #288	; 0x120
 800e1da:	42b4      	cmp	r4, r6
 800e1dc:	da38      	bge.n	800e250 <__kernel_rem_pio2+0x5d4>
 800e1de:	9b00      	ldr	r3, [sp, #0]
 800e1e0:	b10b      	cbz	r3, 800e1e6 <__kernel_rem_pio2+0x56a>
 800e1e2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e1e6:	4662      	mov	r2, ip
 800e1e8:	463b      	mov	r3, r7
 800e1ea:	9904      	ldr	r1, [sp, #16]
 800e1ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e1f0:	e011      	b.n	800e216 <__kernel_rem_pio2+0x59a>
 800e1f2:	2700      	movs	r7, #0
 800e1f4:	463d      	mov	r5, r7
 800e1f6:	9b06      	ldr	r3, [sp, #24]
 800e1f8:	aa98      	add	r2, sp, #608	; 0x260
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800e200:	2c00      	cmp	r4, #0
 800e202:	da0f      	bge.n	800e224 <__kernel_rem_pio2+0x5a8>
 800e204:	9b00      	ldr	r3, [sp, #0]
 800e206:	b10b      	cbz	r3, 800e20c <__kernel_rem_pio2+0x590>
 800e208:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800e20c:	463a      	mov	r2, r7
 800e20e:	462b      	mov	r3, r5
 800e210:	9904      	ldr	r1, [sp, #16]
 800e212:	e9c1 2300 	strd	r2, r3, [r1]
 800e216:	9b05      	ldr	r3, [sp, #20]
 800e218:	f003 0007 	and.w	r0, r3, #7
 800e21c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	4638      	mov	r0, r7
 800e226:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e22a:	4629      	mov	r1, r5
 800e22c:	f7f2 f802 	bl	8000234 <__adddf3>
 800e230:	3c01      	subs	r4, #1
 800e232:	4607      	mov	r7, r0
 800e234:	460d      	mov	r5, r1
 800e236:	e7e3      	b.n	800e200 <__kernel_rem_pio2+0x584>
 800e238:	4660      	mov	r0, ip
 800e23a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e23e:	4639      	mov	r1, r7
 800e240:	f7f1 fff8 	bl	8000234 <__adddf3>
 800e244:	3e01      	subs	r6, #1
 800e246:	4684      	mov	ip, r0
 800e248:	460f      	mov	r7, r1
 800e24a:	e7b0      	b.n	800e1ae <__kernel_rem_pio2+0x532>
 800e24c:	4639      	mov	r1, r7
 800e24e:	e7b5      	b.n	800e1bc <__kernel_rem_pio2+0x540>
 800e250:	4660      	mov	r0, ip
 800e252:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800e256:	4639      	mov	r1, r7
 800e258:	f7f1 ffec 	bl	8000234 <__adddf3>
 800e25c:	3601      	adds	r6, #1
 800e25e:	4684      	mov	ip, r0
 800e260:	460f      	mov	r7, r1
 800e262:	e7ba      	b.n	800e1da <__kernel_rem_pio2+0x55e>
 800e264:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800e268:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800e26c:	4640      	mov	r0, r8
 800e26e:	4649      	mov	r1, r9
 800e270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e274:	f7f1 ffde 	bl	8000234 <__adddf3>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4606      	mov	r6, r0
 800e27e:	460f      	mov	r7, r1
 800e280:	4640      	mov	r0, r8
 800e282:	4649      	mov	r1, r9
 800e284:	f7f1 ffd4 	bl	8000230 <__aeabi_dsub>
 800e288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e28c:	f7f1 ffd2 	bl	8000234 <__adddf3>
 800e290:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e294:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e298:	e9ca 6700 	strd	r6, r7, [sl]
 800e29c:	e757      	b.n	800e14e <__kernel_rem_pio2+0x4d2>
 800e29e:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800e2a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	4639      	mov	r1, r7
 800e2aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2ae:	f7f1 ffc1 	bl	8000234 <__adddf3>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4680      	mov	r8, r0
 800e2b8:	4689      	mov	r9, r1
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f1 ffb7 	bl	8000230 <__aeabi_dsub>
 800e2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2c6:	f7f1 ffb5 	bl	8000234 <__adddf3>
 800e2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2ce:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e2d2:	e9c5 8900 	strd	r8, r9, [r5]
 800e2d6:	e73f      	b.n	800e158 <__kernel_rem_pio2+0x4dc>
 800e2d8:	4638      	mov	r0, r7
 800e2da:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e2de:	4631      	mov	r1, r6
 800e2e0:	f7f1 ffa8 	bl	8000234 <__adddf3>
 800e2e4:	3c01      	subs	r4, #1
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	460e      	mov	r6, r1
 800e2ea:	e73f      	b.n	800e16c <__kernel_rem_pio2+0x4f0>
 800e2ec:	9b04      	ldr	r3, [sp, #16]
 800e2ee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e2f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e2f6:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e2fa:	601d      	str	r5, [r3, #0]
 800e2fc:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800e300:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800e304:	615e      	str	r6, [r3, #20]
 800e306:	e786      	b.n	800e216 <__kernel_rem_pio2+0x59a>
 800e308:	41700000 	.word	0x41700000
 800e30c:	3e700000 	.word	0x3e700000

0800e310 <__kernel_sin>:
 800e310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e314:	b086      	sub	sp, #24
 800e316:	e9cd 2300 	strd	r2, r3, [sp]
 800e31a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e31e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e322:	4682      	mov	sl, r0
 800e324:	460c      	mov	r4, r1
 800e326:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e328:	da03      	bge.n	800e332 <__kernel_sin+0x22>
 800e32a:	f7f2 fbe9 	bl	8000b00 <__aeabi_d2iz>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d050      	beq.n	800e3d4 <__kernel_sin+0xc4>
 800e332:	4652      	mov	r2, sl
 800e334:	4623      	mov	r3, r4
 800e336:	4650      	mov	r0, sl
 800e338:	4621      	mov	r1, r4
 800e33a:	f7f2 f931 	bl	80005a0 <__aeabi_dmul>
 800e33e:	4606      	mov	r6, r0
 800e340:	460f      	mov	r7, r1
 800e342:	4602      	mov	r2, r0
 800e344:	460b      	mov	r3, r1
 800e346:	4650      	mov	r0, sl
 800e348:	4621      	mov	r1, r4
 800e34a:	f7f2 f929 	bl	80005a0 <__aeabi_dmul>
 800e34e:	a33e      	add	r3, pc, #248	; (adr r3, 800e448 <__kernel_sin+0x138>)
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	4680      	mov	r8, r0
 800e356:	4689      	mov	r9, r1
 800e358:	4630      	mov	r0, r6
 800e35a:	4639      	mov	r1, r7
 800e35c:	f7f2 f920 	bl	80005a0 <__aeabi_dmul>
 800e360:	a33b      	add	r3, pc, #236	; (adr r3, 800e450 <__kernel_sin+0x140>)
 800e362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e366:	f7f1 ff63 	bl	8000230 <__aeabi_dsub>
 800e36a:	4632      	mov	r2, r6
 800e36c:	463b      	mov	r3, r7
 800e36e:	f7f2 f917 	bl	80005a0 <__aeabi_dmul>
 800e372:	a339      	add	r3, pc, #228	; (adr r3, 800e458 <__kernel_sin+0x148>)
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	f7f1 ff5c 	bl	8000234 <__adddf3>
 800e37c:	4632      	mov	r2, r6
 800e37e:	463b      	mov	r3, r7
 800e380:	f7f2 f90e 	bl	80005a0 <__aeabi_dmul>
 800e384:	a336      	add	r3, pc, #216	; (adr r3, 800e460 <__kernel_sin+0x150>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f7f1 ff51 	bl	8000230 <__aeabi_dsub>
 800e38e:	4632      	mov	r2, r6
 800e390:	463b      	mov	r3, r7
 800e392:	f7f2 f905 	bl	80005a0 <__aeabi_dmul>
 800e396:	a334      	add	r3, pc, #208	; (adr r3, 800e468 <__kernel_sin+0x158>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	f7f1 ff4a 	bl	8000234 <__adddf3>
 800e3a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3a4:	b9dd      	cbnz	r5, 800e3de <__kernel_sin+0xce>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f2 f8f7 	bl	80005a0 <__aeabi_dmul>
 800e3b2:	a32f      	add	r3, pc, #188	; (adr r3, 800e470 <__kernel_sin+0x160>)
 800e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b8:	f7f1 ff3a 	bl	8000230 <__aeabi_dsub>
 800e3bc:	4642      	mov	r2, r8
 800e3be:	464b      	mov	r3, r9
 800e3c0:	f7f2 f8ee 	bl	80005a0 <__aeabi_dmul>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4650      	mov	r0, sl
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	f7f1 ff32 	bl	8000234 <__adddf3>
 800e3d0:	4682      	mov	sl, r0
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	4650      	mov	r0, sl
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	b006      	add	sp, #24
 800e3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3de:	2200      	movs	r2, #0
 800e3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3e4:	4b24      	ldr	r3, [pc, #144]	; (800e478 <__kernel_sin+0x168>)
 800e3e6:	f7f2 f8db 	bl	80005a0 <__aeabi_dmul>
 800e3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	f7f2 f8d3 	bl	80005a0 <__aeabi_dmul>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e402:	f7f1 ff15 	bl	8000230 <__aeabi_dsub>
 800e406:	4632      	mov	r2, r6
 800e408:	463b      	mov	r3, r7
 800e40a:	f7f2 f8c9 	bl	80005a0 <__aeabi_dmul>
 800e40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e412:	f7f1 ff0d 	bl	8000230 <__aeabi_dsub>
 800e416:	a316      	add	r3, pc, #88	; (adr r3, 800e470 <__kernel_sin+0x160>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	4640      	mov	r0, r8
 800e422:	4649      	mov	r1, r9
 800e424:	f7f2 f8bc 	bl	80005a0 <__aeabi_dmul>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	4630      	mov	r0, r6
 800e42e:	4639      	mov	r1, r7
 800e430:	f7f1 ff00 	bl	8000234 <__adddf3>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4650      	mov	r0, sl
 800e43a:	4621      	mov	r1, r4
 800e43c:	f7f1 fef8 	bl	8000230 <__aeabi_dsub>
 800e440:	e7c6      	b.n	800e3d0 <__kernel_sin+0xc0>
 800e442:	bf00      	nop
 800e444:	f3af 8000 	nop.w
 800e448:	5acfd57c 	.word	0x5acfd57c
 800e44c:	3de5d93a 	.word	0x3de5d93a
 800e450:	8a2b9ceb 	.word	0x8a2b9ceb
 800e454:	3e5ae5e6 	.word	0x3e5ae5e6
 800e458:	57b1fe7d 	.word	0x57b1fe7d
 800e45c:	3ec71de3 	.word	0x3ec71de3
 800e460:	19c161d5 	.word	0x19c161d5
 800e464:	3f2a01a0 	.word	0x3f2a01a0
 800e468:	1110f8a6 	.word	0x1110f8a6
 800e46c:	3f811111 	.word	0x3f811111
 800e470:	55555549 	.word	0x55555549
 800e474:	3fc55555 	.word	0x3fc55555
 800e478:	3fe00000 	.word	0x3fe00000
 800e47c:	00000000 	.word	0x00000000

0800e480 <__kernel_tan>:
 800e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e484:	461f      	mov	r7, r3
 800e486:	4bda      	ldr	r3, [pc, #872]	; (800e7f0 <__kernel_tan+0x370>)
 800e488:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e48c:	b089      	sub	sp, #36	; 0x24
 800e48e:	429e      	cmp	r6, r3
 800e490:	4682      	mov	sl, r0
 800e492:	468b      	mov	fp, r1
 800e494:	4690      	mov	r8, r2
 800e496:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800e49a:	9105      	str	r1, [sp, #20]
 800e49c:	dc21      	bgt.n	800e4e2 <__kernel_tan+0x62>
 800e49e:	f7f2 fb2f 	bl	8000b00 <__aeabi_d2iz>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d140      	bne.n	800e528 <__kernel_tan+0xa8>
 800e4a6:	4652      	mov	r2, sl
 800e4a8:	f109 0301 	add.w	r3, r9, #1
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	4333      	orrs	r3, r6
 800e4b0:	d110      	bne.n	800e4d4 <__kernel_tan+0x54>
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	f7fd ffbb 	bl	800c430 <fabs>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	2000      	movs	r0, #0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	49cc      	ldr	r1, [pc, #816]	; (800e7f4 <__kernel_tan+0x374>)
 800e4c2:	f7f2 f997 	bl	80007f4 <__aeabi_ddiv>
 800e4c6:	4682      	mov	sl, r0
 800e4c8:	468b      	mov	fp, r1
 800e4ca:	4650      	mov	r0, sl
 800e4cc:	4659      	mov	r1, fp
 800e4ce:	b009      	add	sp, #36	; 0x24
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	f1b9 0f01 	cmp.w	r9, #1
 800e4d8:	d0f7      	beq.n	800e4ca <__kernel_tan+0x4a>
 800e4da:	465b      	mov	r3, fp
 800e4dc:	2000      	movs	r0, #0
 800e4de:	49c6      	ldr	r1, [pc, #792]	; (800e7f8 <__kernel_tan+0x378>)
 800e4e0:	e7ef      	b.n	800e4c2 <__kernel_tan+0x42>
 800e4e2:	4bc6      	ldr	r3, [pc, #792]	; (800e7fc <__kernel_tan+0x37c>)
 800e4e4:	429e      	cmp	r6, r3
 800e4e6:	dd1f      	ble.n	800e528 <__kernel_tan+0xa8>
 800e4e8:	2900      	cmp	r1, #0
 800e4ea:	da04      	bge.n	800e4f6 <__kernel_tan+0x76>
 800e4ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e4f0:	469b      	mov	fp, r3
 800e4f2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e4f6:	4652      	mov	r2, sl
 800e4f8:	a19f      	add	r1, pc, #636	; (adr r1, 800e778 <__kernel_tan+0x2f8>)
 800e4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fe:	465b      	mov	r3, fp
 800e500:	f7f1 fe96 	bl	8000230 <__aeabi_dsub>
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	a19d      	add	r1, pc, #628	; (adr r1, 800e780 <__kernel_tan+0x300>)
 800e50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e50e:	4642      	mov	r2, r8
 800e510:	463b      	mov	r3, r7
 800e512:	f7f1 fe8d 	bl	8000230 <__aeabi_dsub>
 800e516:	4622      	mov	r2, r4
 800e518:	462b      	mov	r3, r5
 800e51a:	f7f1 fe8b 	bl	8000234 <__adddf3>
 800e51e:	f04f 0800 	mov.w	r8, #0
 800e522:	4682      	mov	sl, r0
 800e524:	468b      	mov	fp, r1
 800e526:	4647      	mov	r7, r8
 800e528:	4652      	mov	r2, sl
 800e52a:	465b      	mov	r3, fp
 800e52c:	4650      	mov	r0, sl
 800e52e:	4659      	mov	r1, fp
 800e530:	f7f2 f836 	bl	80005a0 <__aeabi_dmul>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	e9cd 0100 	strd	r0, r1, [sp]
 800e53c:	f7f2 f830 	bl	80005a0 <__aeabi_dmul>
 800e540:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e544:	4604      	mov	r4, r0
 800e546:	460d      	mov	r5, r1
 800e548:	4650      	mov	r0, sl
 800e54a:	4659      	mov	r1, fp
 800e54c:	f7f2 f828 	bl	80005a0 <__aeabi_dmul>
 800e550:	a38d      	add	r3, pc, #564	; (adr r3, 800e788 <__kernel_tan+0x308>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e55a:	4620      	mov	r0, r4
 800e55c:	4629      	mov	r1, r5
 800e55e:	f7f2 f81f 	bl	80005a0 <__aeabi_dmul>
 800e562:	a38b      	add	r3, pc, #556	; (adr r3, 800e790 <__kernel_tan+0x310>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f1 fe64 	bl	8000234 <__adddf3>
 800e56c:	4622      	mov	r2, r4
 800e56e:	462b      	mov	r3, r5
 800e570:	f7f2 f816 	bl	80005a0 <__aeabi_dmul>
 800e574:	a388      	add	r3, pc, #544	; (adr r3, 800e798 <__kernel_tan+0x318>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	f7f1 fe5b 	bl	8000234 <__adddf3>
 800e57e:	4622      	mov	r2, r4
 800e580:	462b      	mov	r3, r5
 800e582:	f7f2 f80d 	bl	80005a0 <__aeabi_dmul>
 800e586:	a386      	add	r3, pc, #536	; (adr r3, 800e7a0 <__kernel_tan+0x320>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	f7f1 fe52 	bl	8000234 <__adddf3>
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	f7f2 f804 	bl	80005a0 <__aeabi_dmul>
 800e598:	a383      	add	r3, pc, #524	; (adr r3, 800e7a8 <__kernel_tan+0x328>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f1 fe49 	bl	8000234 <__adddf3>
 800e5a2:	4622      	mov	r2, r4
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	f7f1 fffb 	bl	80005a0 <__aeabi_dmul>
 800e5aa:	a381      	add	r3, pc, #516	; (adr r3, 800e7b0 <__kernel_tan+0x330>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f7f1 fe40 	bl	8000234 <__adddf3>
 800e5b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5b8:	f7f1 fff2 	bl	80005a0 <__aeabi_dmul>
 800e5bc:	a37e      	add	r3, pc, #504	; (adr r3, 800e7b8 <__kernel_tan+0x338>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	f7f1 ffe9 	bl	80005a0 <__aeabi_dmul>
 800e5ce:	a37c      	add	r3, pc, #496	; (adr r3, 800e7c0 <__kernel_tan+0x340>)
 800e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d4:	f7f1 fe2e 	bl	8000234 <__adddf3>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	462b      	mov	r3, r5
 800e5dc:	f7f1 ffe0 	bl	80005a0 <__aeabi_dmul>
 800e5e0:	a379      	add	r3, pc, #484	; (adr r3, 800e7c8 <__kernel_tan+0x348>)
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	f7f1 fe25 	bl	8000234 <__adddf3>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	f7f1 ffd7 	bl	80005a0 <__aeabi_dmul>
 800e5f2:	a377      	add	r3, pc, #476	; (adr r3, 800e7d0 <__kernel_tan+0x350>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f1 fe1c 	bl	8000234 <__adddf3>
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	462b      	mov	r3, r5
 800e600:	f7f1 ffce 	bl	80005a0 <__aeabi_dmul>
 800e604:	a374      	add	r3, pc, #464	; (adr r3, 800e7d8 <__kernel_tan+0x358>)
 800e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60a:	f7f1 fe13 	bl	8000234 <__adddf3>
 800e60e:	4622      	mov	r2, r4
 800e610:	462b      	mov	r3, r5
 800e612:	f7f1 ffc5 	bl	80005a0 <__aeabi_dmul>
 800e616:	a372      	add	r3, pc, #456	; (adr r3, 800e7e0 <__kernel_tan+0x360>)
 800e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61c:	f7f1 fe0a 	bl	8000234 <__adddf3>
 800e620:	4602      	mov	r2, r0
 800e622:	460b      	mov	r3, r1
 800e624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e628:	f7f1 fe04 	bl	8000234 <__adddf3>
 800e62c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e630:	f7f1 ffb6 	bl	80005a0 <__aeabi_dmul>
 800e634:	4642      	mov	r2, r8
 800e636:	463b      	mov	r3, r7
 800e638:	f7f1 fdfc 	bl	8000234 <__adddf3>
 800e63c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e640:	f7f1 ffae 	bl	80005a0 <__aeabi_dmul>
 800e644:	4642      	mov	r2, r8
 800e646:	463b      	mov	r3, r7
 800e648:	f7f1 fdf4 	bl	8000234 <__adddf3>
 800e64c:	a366      	add	r3, pc, #408	; (adr r3, 800e7e8 <__kernel_tan+0x368>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	4604      	mov	r4, r0
 800e654:	460d      	mov	r5, r1
 800e656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e65a:	f7f1 ffa1 	bl	80005a0 <__aeabi_dmul>
 800e65e:	4622      	mov	r2, r4
 800e660:	462b      	mov	r3, r5
 800e662:	f7f1 fde7 	bl	8000234 <__adddf3>
 800e666:	e9cd 0100 	strd	r0, r1, [sp]
 800e66a:	460b      	mov	r3, r1
 800e66c:	4602      	mov	r2, r0
 800e66e:	4659      	mov	r1, fp
 800e670:	4650      	mov	r0, sl
 800e672:	f7f1 fddf 	bl	8000234 <__adddf3>
 800e676:	4b61      	ldr	r3, [pc, #388]	; (800e7fc <__kernel_tan+0x37c>)
 800e678:	4604      	mov	r4, r0
 800e67a:	429e      	cmp	r6, r3
 800e67c:	460d      	mov	r5, r1
 800e67e:	dd3d      	ble.n	800e6fc <__kernel_tan+0x27c>
 800e680:	4648      	mov	r0, r9
 800e682:	f7f1 ff23 	bl	80004cc <__aeabi_i2d>
 800e686:	4622      	mov	r2, r4
 800e688:	4680      	mov	r8, r0
 800e68a:	4689      	mov	r9, r1
 800e68c:	462b      	mov	r3, r5
 800e68e:	4620      	mov	r0, r4
 800e690:	4629      	mov	r1, r5
 800e692:	f7f1 ff85 	bl	80005a0 <__aeabi_dmul>
 800e696:	4642      	mov	r2, r8
 800e698:	4606      	mov	r6, r0
 800e69a:	460f      	mov	r7, r1
 800e69c:	464b      	mov	r3, r9
 800e69e:	4620      	mov	r0, r4
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	f7f1 fdc7 	bl	8000234 <__adddf3>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f2 f8a1 	bl	80007f4 <__aeabi_ddiv>
 800e6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6b6:	f7f1 fdbb 	bl	8000230 <__aeabi_dsub>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4650      	mov	r0, sl
 800e6c0:	4659      	mov	r1, fp
 800e6c2:	f7f1 fdb5 	bl	8000230 <__aeabi_dsub>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	f7f1 fdb3 	bl	8000234 <__adddf3>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	f7f1 fdab 	bl	8000230 <__aeabi_dsub>
 800e6da:	9b05      	ldr	r3, [sp, #20]
 800e6dc:	4604      	mov	r4, r0
 800e6de:	1798      	asrs	r0, r3, #30
 800e6e0:	f000 0002 	and.w	r0, r0, #2
 800e6e4:	f1c0 0001 	rsb	r0, r0, #1
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	f7f1 feef 	bl	80004cc <__aeabi_i2d>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	f7f1 ff53 	bl	80005a0 <__aeabi_dmul>
 800e6fa:	e6e4      	b.n	800e4c6 <__kernel_tan+0x46>
 800e6fc:	f1b9 0f01 	cmp.w	r9, #1
 800e700:	d036      	beq.n	800e770 <__kernel_tan+0x2f0>
 800e702:	460f      	mov	r7, r1
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	2000      	movs	r0, #0
 800e70a:	493b      	ldr	r1, [pc, #236]	; (800e7f8 <__kernel_tan+0x378>)
 800e70c:	f7f2 f872 	bl	80007f4 <__aeabi_ddiv>
 800e710:	2600      	movs	r6, #0
 800e712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e716:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e71a:	4652      	mov	r2, sl
 800e71c:	465b      	mov	r3, fp
 800e71e:	4630      	mov	r0, r6
 800e720:	4639      	mov	r1, r7
 800e722:	f7f1 fd85 	bl	8000230 <__aeabi_dsub>
 800e726:	4602      	mov	r2, r0
 800e728:	460b      	mov	r3, r1
 800e72a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e72e:	f7f1 fd7f 	bl	8000230 <__aeabi_dsub>
 800e732:	4632      	mov	r2, r6
 800e734:	462b      	mov	r3, r5
 800e736:	f7f1 ff33 	bl	80005a0 <__aeabi_dmul>
 800e73a:	4632      	mov	r2, r6
 800e73c:	4682      	mov	sl, r0
 800e73e:	468b      	mov	fp, r1
 800e740:	462b      	mov	r3, r5
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f1 ff2b 	bl	80005a0 <__aeabi_dmul>
 800e74a:	2200      	movs	r2, #0
 800e74c:	4b29      	ldr	r3, [pc, #164]	; (800e7f4 <__kernel_tan+0x374>)
 800e74e:	f7f1 fd71 	bl	8000234 <__adddf3>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	4650      	mov	r0, sl
 800e758:	4659      	mov	r1, fp
 800e75a:	f7f1 fd6b 	bl	8000234 <__adddf3>
 800e75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e762:	f7f1 ff1d 	bl	80005a0 <__aeabi_dmul>
 800e766:	4632      	mov	r2, r6
 800e768:	462b      	mov	r3, r5
 800e76a:	f7f1 fd63 	bl	8000234 <__adddf3>
 800e76e:	e6aa      	b.n	800e4c6 <__kernel_tan+0x46>
 800e770:	4682      	mov	sl, r0
 800e772:	468b      	mov	fp, r1
 800e774:	e6a9      	b.n	800e4ca <__kernel_tan+0x4a>
 800e776:	bf00      	nop
 800e778:	54442d18 	.word	0x54442d18
 800e77c:	3fe921fb 	.word	0x3fe921fb
 800e780:	33145c07 	.word	0x33145c07
 800e784:	3c81a626 	.word	0x3c81a626
 800e788:	74bf7ad4 	.word	0x74bf7ad4
 800e78c:	3efb2a70 	.word	0x3efb2a70
 800e790:	32f0a7e9 	.word	0x32f0a7e9
 800e794:	3f12b80f 	.word	0x3f12b80f
 800e798:	1a8d1068 	.word	0x1a8d1068
 800e79c:	3f3026f7 	.word	0x3f3026f7
 800e7a0:	fee08315 	.word	0xfee08315
 800e7a4:	3f57dbc8 	.word	0x3f57dbc8
 800e7a8:	e96e8493 	.word	0xe96e8493
 800e7ac:	3f8226e3 	.word	0x3f8226e3
 800e7b0:	1bb341fe 	.word	0x1bb341fe
 800e7b4:	3faba1ba 	.word	0x3faba1ba
 800e7b8:	db605373 	.word	0xdb605373
 800e7bc:	bef375cb 	.word	0xbef375cb
 800e7c0:	a03792a6 	.word	0xa03792a6
 800e7c4:	3f147e88 	.word	0x3f147e88
 800e7c8:	f2f26501 	.word	0xf2f26501
 800e7cc:	3f4344d8 	.word	0x3f4344d8
 800e7d0:	c9560328 	.word	0xc9560328
 800e7d4:	3f6d6d22 	.word	0x3f6d6d22
 800e7d8:	8406d637 	.word	0x8406d637
 800e7dc:	3f9664f4 	.word	0x3f9664f4
 800e7e0:	1110fe7a 	.word	0x1110fe7a
 800e7e4:	3fc11111 	.word	0x3fc11111
 800e7e8:	55555563 	.word	0x55555563
 800e7ec:	3fd55555 	.word	0x3fd55555
 800e7f0:	3e2fffff 	.word	0x3e2fffff
 800e7f4:	3ff00000 	.word	0x3ff00000
 800e7f8:	bff00000 	.word	0xbff00000
 800e7fc:	3fe59427 	.word	0x3fe59427

0800e800 <finite>:
 800e800:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e804:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800e808:	0fc0      	lsrs	r0, r0, #31
 800e80a:	4770      	bx	lr
 800e80c:	0000      	movs	r0, r0
	...

0800e810 <floor>:
 800e810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e814:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e818:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e81c:	2e13      	cmp	r6, #19
 800e81e:	4607      	mov	r7, r0
 800e820:	460b      	mov	r3, r1
 800e822:	460c      	mov	r4, r1
 800e824:	4605      	mov	r5, r0
 800e826:	dc35      	bgt.n	800e894 <floor+0x84>
 800e828:	2e00      	cmp	r6, #0
 800e82a:	da16      	bge.n	800e85a <floor+0x4a>
 800e82c:	a336      	add	r3, pc, #216	; (adr r3, 800e908 <floor+0xf8>)
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f1 fcff 	bl	8000234 <__adddf3>
 800e836:	2200      	movs	r2, #0
 800e838:	2300      	movs	r3, #0
 800e83a:	f7f2 f941 	bl	8000ac0 <__aeabi_dcmpgt>
 800e83e:	b148      	cbz	r0, 800e854 <floor+0x44>
 800e840:	2c00      	cmp	r4, #0
 800e842:	da5b      	bge.n	800e8fc <floor+0xec>
 800e844:	2500      	movs	r5, #0
 800e846:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e84a:	4a31      	ldr	r2, [pc, #196]	; (800e910 <floor+0x100>)
 800e84c:	433b      	orrs	r3, r7
 800e84e:	42ab      	cmp	r3, r5
 800e850:	bf18      	it	ne
 800e852:	4614      	movne	r4, r2
 800e854:	4623      	mov	r3, r4
 800e856:	462f      	mov	r7, r5
 800e858:	e026      	b.n	800e8a8 <floor+0x98>
 800e85a:	4a2e      	ldr	r2, [pc, #184]	; (800e914 <floor+0x104>)
 800e85c:	fa42 f806 	asr.w	r8, r2, r6
 800e860:	ea01 0208 	and.w	r2, r1, r8
 800e864:	4302      	orrs	r2, r0
 800e866:	d01f      	beq.n	800e8a8 <floor+0x98>
 800e868:	a327      	add	r3, pc, #156	; (adr r3, 800e908 <floor+0xf8>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f7f1 fce1 	bl	8000234 <__adddf3>
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	f7f2 f923 	bl	8000ac0 <__aeabi_dcmpgt>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d0ea      	beq.n	800e854 <floor+0x44>
 800e87e:	2c00      	cmp	r4, #0
 800e880:	bfbe      	ittt	lt
 800e882:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e886:	fa43 f606 	asrlt.w	r6, r3, r6
 800e88a:	19a4      	addlt	r4, r4, r6
 800e88c:	ea24 0408 	bic.w	r4, r4, r8
 800e890:	2500      	movs	r5, #0
 800e892:	e7df      	b.n	800e854 <floor+0x44>
 800e894:	2e33      	cmp	r6, #51	; 0x33
 800e896:	dd0b      	ble.n	800e8b0 <floor+0xa0>
 800e898:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e89c:	d104      	bne.n	800e8a8 <floor+0x98>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	f7f1 fcc8 	bl	8000234 <__adddf3>
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e8b8:	fa22 f808 	lsr.w	r8, r2, r8
 800e8bc:	ea18 0f00 	tst.w	r8, r0
 800e8c0:	d0f2      	beq.n	800e8a8 <floor+0x98>
 800e8c2:	a311      	add	r3, pc, #68	; (adr r3, 800e908 <floor+0xf8>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fcb4 	bl	8000234 <__adddf3>
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f7f2 f8f6 	bl	8000ac0 <__aeabi_dcmpgt>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d0bd      	beq.n	800e854 <floor+0x44>
 800e8d8:	2c00      	cmp	r4, #0
 800e8da:	da02      	bge.n	800e8e2 <floor+0xd2>
 800e8dc:	2e14      	cmp	r6, #20
 800e8de:	d103      	bne.n	800e8e8 <floor+0xd8>
 800e8e0:	3401      	adds	r4, #1
 800e8e2:	ea25 0508 	bic.w	r5, r5, r8
 800e8e6:	e7b5      	b.n	800e854 <floor+0x44>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e8ee:	fa03 f606 	lsl.w	r6, r3, r6
 800e8f2:	4435      	add	r5, r6
 800e8f4:	42bd      	cmp	r5, r7
 800e8f6:	bf38      	it	cc
 800e8f8:	18e4      	addcc	r4, r4, r3
 800e8fa:	e7f2      	b.n	800e8e2 <floor+0xd2>
 800e8fc:	2500      	movs	r5, #0
 800e8fe:	462c      	mov	r4, r5
 800e900:	e7a8      	b.n	800e854 <floor+0x44>
 800e902:	bf00      	nop
 800e904:	f3af 8000 	nop.w
 800e908:	8800759c 	.word	0x8800759c
 800e90c:	7e37e43c 	.word	0x7e37e43c
 800e910:	bff00000 	.word	0xbff00000
 800e914:	000fffff 	.word	0x000fffff

0800e918 <matherr>:
 800e918:	2000      	movs	r0, #0
 800e91a:	4770      	bx	lr

0800e91c <nan>:
 800e91c:	2000      	movs	r0, #0
 800e91e:	4901      	ldr	r1, [pc, #4]	; (800e924 <nan+0x8>)
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	7ff80000 	.word	0x7ff80000

0800e928 <rint>:
 800e928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e92a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e92e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800e932:	f1bc 0f13 	cmp.w	ip, #19
 800e936:	4604      	mov	r4, r0
 800e938:	460d      	mov	r5, r1
 800e93a:	460b      	mov	r3, r1
 800e93c:	4606      	mov	r6, r0
 800e93e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800e942:	dc5a      	bgt.n	800e9fa <rint+0xd2>
 800e944:	f1bc 0f00 	cmp.w	ip, #0
 800e948:	da2b      	bge.n	800e9a2 <rint+0x7a>
 800e94a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e94e:	4302      	orrs	r2, r0
 800e950:	d023      	beq.n	800e99a <rint+0x72>
 800e952:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e956:	4302      	orrs	r2, r0
 800e958:	4256      	negs	r6, r2
 800e95a:	4316      	orrs	r6, r2
 800e95c:	0c4b      	lsrs	r3, r1, #17
 800e95e:	0b36      	lsrs	r6, r6, #12
 800e960:	4934      	ldr	r1, [pc, #208]	; (800ea34 <rint+0x10c>)
 800e962:	045b      	lsls	r3, r3, #17
 800e964:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800e968:	ea46 0503 	orr.w	r5, r6, r3
 800e96c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800e970:	4602      	mov	r2, r0
 800e972:	462b      	mov	r3, r5
 800e974:	e9d1 4500 	ldrd	r4, r5, [r1]
 800e978:	4620      	mov	r0, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	f7f1 fc5a 	bl	8000234 <__adddf3>
 800e980:	e9cd 0100 	strd	r0, r1, [sp]
 800e984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e988:	462b      	mov	r3, r5
 800e98a:	4622      	mov	r2, r4
 800e98c:	f7f1 fc50 	bl	8000230 <__aeabi_dsub>
 800e990:	4604      	mov	r4, r0
 800e992:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e996:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	b003      	add	sp, #12
 800e9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a2:	4a25      	ldr	r2, [pc, #148]	; (800ea38 <rint+0x110>)
 800e9a4:	fa42 f20c 	asr.w	r2, r2, ip
 800e9a8:	4011      	ands	r1, r2
 800e9aa:	4301      	orrs	r1, r0
 800e9ac:	d0f5      	beq.n	800e99a <rint+0x72>
 800e9ae:	0852      	lsrs	r2, r2, #1
 800e9b0:	ea05 0102 	and.w	r1, r5, r2
 800e9b4:	ea50 0601 	orrs.w	r6, r0, r1
 800e9b8:	d00c      	beq.n	800e9d4 <rint+0xac>
 800e9ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e9be:	f1bc 0f13 	cmp.w	ip, #19
 800e9c2:	bf0c      	ite	eq
 800e9c4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800e9c8:	2600      	movne	r6, #0
 800e9ca:	ea25 0202 	bic.w	r2, r5, r2
 800e9ce:	fa43 f30c 	asr.w	r3, r3, ip
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	4917      	ldr	r1, [pc, #92]	; (800ea34 <rint+0x10c>)
 800e9d6:	4632      	mov	r2, r6
 800e9d8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800e9dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	f7f1 fc26 	bl	8000234 <__adddf3>
 800e9e8:	e9cd 0100 	strd	r0, r1, [sp]
 800e9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9f0:	4622      	mov	r2, r4
 800e9f2:	462b      	mov	r3, r5
 800e9f4:	f7f1 fc1c 	bl	8000230 <__aeabi_dsub>
 800e9f8:	e008      	b.n	800ea0c <rint+0xe4>
 800e9fa:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800e9fe:	dd08      	ble.n	800ea12 <rint+0xea>
 800ea00:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800ea04:	d1c9      	bne.n	800e99a <rint+0x72>
 800ea06:	4602      	mov	r2, r0
 800ea08:	f7f1 fc14 	bl	8000234 <__adddf3>
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	460d      	mov	r5, r1
 800ea10:	e7c3      	b.n	800e99a <rint+0x72>
 800ea12:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800ea16:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1a:	40ca      	lsrs	r2, r1
 800ea1c:	4210      	tst	r0, r2
 800ea1e:	d0bc      	beq.n	800e99a <rint+0x72>
 800ea20:	0852      	lsrs	r2, r2, #1
 800ea22:	4210      	tst	r0, r2
 800ea24:	bf1f      	itttt	ne
 800ea26:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800ea2a:	ea20 0202 	bicne.w	r2, r0, r2
 800ea2e:	410e      	asrne	r6, r1
 800ea30:	4316      	orrne	r6, r2
 800ea32:	e7cf      	b.n	800e9d4 <rint+0xac>
 800ea34:	0800ee28 	.word	0x0800ee28
 800ea38:	000fffff 	.word	0x000fffff
 800ea3c:	00000000 	.word	0x00000000

0800ea40 <scalbn>:
 800ea40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea42:	4616      	mov	r6, r2
 800ea44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea48:	4604      	mov	r4, r0
 800ea4a:	460d      	mov	r5, r1
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	b982      	cbnz	r2, 800ea72 <scalbn+0x32>
 800ea50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea54:	4303      	orrs	r3, r0
 800ea56:	d034      	beq.n	800eac2 <scalbn+0x82>
 800ea58:	4b2d      	ldr	r3, [pc, #180]	; (800eb10 <scalbn+0xd0>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f7f1 fda0 	bl	80005a0 <__aeabi_dmul>
 800ea60:	4b2c      	ldr	r3, [pc, #176]	; (800eb14 <scalbn+0xd4>)
 800ea62:	4604      	mov	r4, r0
 800ea64:	429e      	cmp	r6, r3
 800ea66:	460d      	mov	r5, r1
 800ea68:	da0d      	bge.n	800ea86 <scalbn+0x46>
 800ea6a:	a325      	add	r3, pc, #148	; (adr r3, 800eb00 <scalbn+0xc0>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	e01c      	b.n	800eaac <scalbn+0x6c>
 800ea72:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ea76:	42ba      	cmp	r2, r7
 800ea78:	d109      	bne.n	800ea8e <scalbn+0x4e>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	f7f1 fbda 	bl	8000234 <__adddf3>
 800ea80:	4604      	mov	r4, r0
 800ea82:	460d      	mov	r5, r1
 800ea84:	e01d      	b.n	800eac2 <scalbn+0x82>
 800ea86:	460b      	mov	r3, r1
 800ea88:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea8c:	3a36      	subs	r2, #54	; 0x36
 800ea8e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea92:	4432      	add	r2, r6
 800ea94:	428a      	cmp	r2, r1
 800ea96:	dd0c      	ble.n	800eab2 <scalbn+0x72>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	a11a      	add	r1, pc, #104	; (adr r1, 800eb08 <scalbn+0xc8>)
 800ea9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaa2:	f000 f83b 	bl	800eb1c <copysign>
 800eaa6:	a318      	add	r3, pc, #96	; (adr r3, 800eb08 <scalbn+0xc8>)
 800eaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaac:	f7f1 fd78 	bl	80005a0 <__aeabi_dmul>
 800eab0:	e7e6      	b.n	800ea80 <scalbn+0x40>
 800eab2:	2a00      	cmp	r2, #0
 800eab4:	dd08      	ble.n	800eac8 <scalbn+0x88>
 800eab6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eabe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eac2:	4620      	mov	r0, r4
 800eac4:	4629      	mov	r1, r5
 800eac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eac8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eacc:	da0b      	bge.n	800eae6 <scalbn+0xa6>
 800eace:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ead2:	429e      	cmp	r6, r3
 800ead4:	4622      	mov	r2, r4
 800ead6:	462b      	mov	r3, r5
 800ead8:	dce0      	bgt.n	800ea9c <scalbn+0x5c>
 800eada:	a109      	add	r1, pc, #36	; (adr r1, 800eb00 <scalbn+0xc0>)
 800eadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eae0:	f000 f81c 	bl	800eb1c <copysign>
 800eae4:	e7c1      	b.n	800ea6a <scalbn+0x2a>
 800eae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaea:	3236      	adds	r2, #54	; 0x36
 800eaec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <scalbn+0xd8>)
 800eafc:	e7d6      	b.n	800eaac <scalbn+0x6c>
 800eafe:	bf00      	nop
 800eb00:	c2f8f359 	.word	0xc2f8f359
 800eb04:	01a56e1f 	.word	0x01a56e1f
 800eb08:	8800759c 	.word	0x8800759c
 800eb0c:	7e37e43c 	.word	0x7e37e43c
 800eb10:	43500000 	.word	0x43500000
 800eb14:	ffff3cb0 	.word	0xffff3cb0
 800eb18:	3c900000 	.word	0x3c900000

0800eb1c <copysign>:
 800eb1c:	b530      	push	{r4, r5, lr}
 800eb1e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800eb22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb26:	ea42 0503 	orr.w	r5, r2, r3
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	bd30      	pop	{r4, r5, pc}
	...

0800eb30 <_init>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr

0800eb3c <_fini>:
 800eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3e:	bf00      	nop
 800eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb42:	bc08      	pop	{r3}
 800eb44:	469e      	mov	lr, r3
 800eb46:	4770      	bx	lr
